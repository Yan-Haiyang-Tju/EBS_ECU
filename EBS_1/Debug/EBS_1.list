
EBS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080050f4  080050f4  000060f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005170  08005170  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005170  08005170  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005170  08005170  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005170  08005170  00006170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005174  08005174  00006174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005178  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e64  2000000c  08005184  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e70  08005184  00007e70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001409d  00000000  00000000  00007035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003675  00000000  00000000  0001b0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  0001e748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f29  00000000  00000000  0001fac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b253  00000000  00000000  000209f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b319  00000000  00000000  0003bc44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009476e  00000000  00000000  00056f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb6cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f70  00000000  00000000  000eb710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000f0680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080050dc 	.word	0x080050dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080050dc 	.word	0x080050dc

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b2f      	ldr	r3, [pc, #188]	@ (800021c <MX_ADC1_Init+0xd0>)
 800015e:	4a30      	ldr	r2, [pc, #192]	@ (8000220 <MX_ADC1_Init+0xd4>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000162:	4b2e      	ldr	r3, [pc, #184]	@ (800021c <MX_ADC1_Init+0xd0>)
 8000164:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800016a:	4b2c      	ldr	r3, [pc, #176]	@ (800021c <MX_ADC1_Init+0xd0>)
 800016c:	2200      	movs	r2, #0
 800016e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000170:	4b2a      	ldr	r3, [pc, #168]	@ (800021c <MX_ADC1_Init+0xd0>)
 8000172:	2201      	movs	r2, #1
 8000174:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000176:	4b29      	ldr	r3, [pc, #164]	@ (800021c <MX_ADC1_Init+0xd0>)
 8000178:	2201      	movs	r2, #1
 800017a:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800017c:	4b27      	ldr	r3, [pc, #156]	@ (800021c <MX_ADC1_Init+0xd0>)
 800017e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000182:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000184:	4b25      	ldr	r3, [pc, #148]	@ (800021c <MX_ADC1_Init+0xd0>)
 8000186:	2200      	movs	r2, #0
 8000188:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 800018a:	4b24      	ldr	r3, [pc, #144]	@ (800021c <MX_ADC1_Init+0xd0>)
 800018c:	2204      	movs	r2, #4
 800018e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000190:	4822      	ldr	r0, [pc, #136]	@ (800021c <MX_ADC1_Init+0xd0>)
 8000192:	f001 f8f3 	bl	800137c <HAL_ADC_Init>
 8000196:	4603      	mov	r3, r0
 8000198:	2b00      	cmp	r3, #0
 800019a:	d001      	beq.n	80001a0 <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 800019c:	f000 faed 	bl	800077a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80001a0:	2301      	movs	r3, #1
 80001a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001a4:	2301      	movs	r3, #1
 80001a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a8:	2300      	movs	r3, #0
 80001aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4619      	mov	r1, r3
 80001b0:	481a      	ldr	r0, [pc, #104]	@ (800021c <MX_ADC1_Init+0xd0>)
 80001b2:	f001 f9bb 	bl	800152c <HAL_ADC_ConfigChannel>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d001      	beq.n	80001c0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80001bc:	f000 fadd 	bl	800077a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80001c0:	2302      	movs	r3, #2
 80001c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001c4:	2302      	movs	r3, #2
 80001c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	4619      	mov	r1, r3
 80001cc:	4813      	ldr	r0, [pc, #76]	@ (800021c <MX_ADC1_Init+0xd0>)
 80001ce:	f001 f9ad 	bl	800152c <HAL_ADC_ConfigChannel>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d001      	beq.n	80001dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80001d8:	f000 facf 	bl	800077a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80001dc:	2303      	movs	r3, #3
 80001de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001e0:	2303      	movs	r3, #3
 80001e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	4619      	mov	r1, r3
 80001e8:	480c      	ldr	r0, [pc, #48]	@ (800021c <MX_ADC1_Init+0xd0>)
 80001ea:	f001 f99f 	bl	800152c <HAL_ADC_ConfigChannel>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80001f4:	f000 fac1 	bl	800077a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80001f8:	2308      	movs	r3, #8
 80001fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80001fc:	2304      	movs	r3, #4
 80001fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	4619      	mov	r1, r3
 8000204:	4805      	ldr	r0, [pc, #20]	@ (800021c <MX_ADC1_Init+0xd0>)
 8000206:	f001 f991 	bl	800152c <HAL_ADC_ConfigChannel>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000210:	f000 fab3 	bl	800077a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000214:	bf00      	nop
 8000216:	3710      	adds	r7, #16
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}
 800021c:	20000028 	.word	0x20000028
 8000220:	40012400 	.word	0x40012400

08000224 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b08a      	sub	sp, #40	@ 0x28
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022c:	f107 0318 	add.w	r3, r7, #24
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a1f      	ldr	r2, [pc, #124]	@ (80002bc <HAL_ADC_MspInit+0x98>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d137      	bne.n	80002b4 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000244:	4b1e      	ldr	r3, [pc, #120]	@ (80002c0 <HAL_ADC_MspInit+0x9c>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	4a1d      	ldr	r2, [pc, #116]	@ (80002c0 <HAL_ADC_MspInit+0x9c>)
 800024a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800024e:	6193      	str	r3, [r2, #24]
 8000250:	4b1b      	ldr	r3, [pc, #108]	@ (80002c0 <HAL_ADC_MspInit+0x9c>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000258:	617b      	str	r3, [r7, #20]
 800025a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800025c:	4b18      	ldr	r3, [pc, #96]	@ (80002c0 <HAL_ADC_MspInit+0x9c>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a17      	ldr	r2, [pc, #92]	@ (80002c0 <HAL_ADC_MspInit+0x9c>)
 8000262:	f043 0304 	orr.w	r3, r3, #4
 8000266:	6193      	str	r3, [r2, #24]
 8000268:	4b15      	ldr	r3, [pc, #84]	@ (80002c0 <HAL_ADC_MspInit+0x9c>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	f003 0304 	and.w	r3, r3, #4
 8000270:	613b      	str	r3, [r7, #16]
 8000272:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000274:	4b12      	ldr	r3, [pc, #72]	@ (80002c0 <HAL_ADC_MspInit+0x9c>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	4a11      	ldr	r2, [pc, #68]	@ (80002c0 <HAL_ADC_MspInit+0x9c>)
 800027a:	f043 0308 	orr.w	r3, r3, #8
 800027e:	6193      	str	r3, [r2, #24]
 8000280:	4b0f      	ldr	r3, [pc, #60]	@ (80002c0 <HAL_ADC_MspInit+0x9c>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	f003 0308 	and.w	r3, r3, #8
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800028c:	230e      	movs	r3, #14
 800028e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000290:	2303      	movs	r3, #3
 8000292:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000294:	f107 0318 	add.w	r3, r7, #24
 8000298:	4619      	mov	r1, r3
 800029a:	480a      	ldr	r0, [pc, #40]	@ (80002c4 <HAL_ADC_MspInit+0xa0>)
 800029c:	f002 fbbc 	bl	8002a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002a0:	2301      	movs	r3, #1
 80002a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002a4:	2303      	movs	r3, #3
 80002a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002a8:	f107 0318 	add.w	r3, r7, #24
 80002ac:	4619      	mov	r1, r3
 80002ae:	4806      	ldr	r0, [pc, #24]	@ (80002c8 <HAL_ADC_MspInit+0xa4>)
 80002b0:	f002 fbb2 	bl	8002a18 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002b4:	bf00      	nop
 80002b6:	3728      	adds	r7, #40	@ 0x28
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40012400 	.word	0x40012400
 80002c0:	40021000 	.word	0x40021000
 80002c4:	40010800 	.word	0x40010800
 80002c8:	40010c00 	.word	0x40010c00

080002cc <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002d0:	4b17      	ldr	r3, [pc, #92]	@ (8000330 <MX_CAN_Init+0x64>)
 80002d2:	4a18      	ldr	r2, [pc, #96]	@ (8000334 <MX_CAN_Init+0x68>)
 80002d4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 80002d6:	4b16      	ldr	r3, [pc, #88]	@ (8000330 <MX_CAN_Init+0x64>)
 80002d8:	2203      	movs	r2, #3
 80002da:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002dc:	4b14      	ldr	r3, [pc, #80]	@ (8000330 <MX_CAN_Init+0x64>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002e2:	4b13      	ldr	r3, [pc, #76]	@ (8000330 <MX_CAN_Init+0x64>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80002e8:	4b11      	ldr	r3, [pc, #68]	@ (8000330 <MX_CAN_Init+0x64>)
 80002ea:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80002ee:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 80002f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000330 <MX_CAN_Init+0x64>)
 80002f2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80002f6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000330 <MX_CAN_Init+0x64>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000330 <MX_CAN_Init+0x64>)
 8000300:	2200      	movs	r2, #0
 8000302:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000304:	4b0a      	ldr	r3, [pc, #40]	@ (8000330 <MX_CAN_Init+0x64>)
 8000306:	2201      	movs	r2, #1
 8000308:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800030a:	4b09      	ldr	r3, [pc, #36]	@ (8000330 <MX_CAN_Init+0x64>)
 800030c:	2201      	movs	r2, #1
 800030e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000310:	4b07      	ldr	r3, [pc, #28]	@ (8000330 <MX_CAN_Init+0x64>)
 8000312:	2200      	movs	r2, #0
 8000314:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000316:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <MX_CAN_Init+0x64>)
 8000318:	2200      	movs	r2, #0
 800031a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800031c:	4804      	ldr	r0, [pc, #16]	@ (8000330 <MX_CAN_Init+0x64>)
 800031e:	f001 fa3e 	bl	800179e <HAL_CAN_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000328:	f000 fa27 	bl	800077a <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000058 	.word	0x20000058
 8000334:	40006400 	.word	0x40006400

08000338 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000340:	f107 0310 	add.w	r3, r7, #16
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a20      	ldr	r2, [pc, #128]	@ (80003d4 <HAL_CAN_MspInit+0x9c>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d139      	bne.n	80003cc <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000358:	4b1f      	ldr	r3, [pc, #124]	@ (80003d8 <HAL_CAN_MspInit+0xa0>)
 800035a:	69db      	ldr	r3, [r3, #28]
 800035c:	4a1e      	ldr	r2, [pc, #120]	@ (80003d8 <HAL_CAN_MspInit+0xa0>)
 800035e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000362:	61d3      	str	r3, [r2, #28]
 8000364:	4b1c      	ldr	r3, [pc, #112]	@ (80003d8 <HAL_CAN_MspInit+0xa0>)
 8000366:	69db      	ldr	r3, [r3, #28]
 8000368:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000370:	4b19      	ldr	r3, [pc, #100]	@ (80003d8 <HAL_CAN_MspInit+0xa0>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a18      	ldr	r2, [pc, #96]	@ (80003d8 <HAL_CAN_MspInit+0xa0>)
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b16      	ldr	r3, [pc, #88]	@ (80003d8 <HAL_CAN_MspInit+0xa0>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0304 	and.w	r3, r3, #4
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000388:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800038c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800038e:	2300      	movs	r3, #0
 8000390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	2300      	movs	r3, #0
 8000394:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	4619      	mov	r1, r3
 800039c:	480f      	ldr	r0, [pc, #60]	@ (80003dc <HAL_CAN_MspInit+0xa4>)
 800039e:	f002 fb3b 	bl	8002a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80003a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003a8:	2302      	movs	r3, #2
 80003aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ac:	2303      	movs	r3, #3
 80003ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b0:	f107 0310 	add.w	r3, r7, #16
 80003b4:	4619      	mov	r1, r3
 80003b6:	4809      	ldr	r0, [pc, #36]	@ (80003dc <HAL_CAN_MspInit+0xa4>)
 80003b8:	f002 fb2e 	bl	8002a18 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80003bc:	2200      	movs	r2, #0
 80003be:	2100      	movs	r1, #0
 80003c0:	2014      	movs	r0, #20
 80003c2:	f002 f904 	bl	80025ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80003c6:	2014      	movs	r0, #20
 80003c8:	f002 f91d 	bl	8002606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80003cc:	bf00      	nop
 80003ce:	3720      	adds	r7, #32
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40006400 	.word	0x40006400
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40010800 	.word	0x40010800

080003e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <MX_DMA_Init+0x38>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000418 <MX_DMA_Init+0x38>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6153      	str	r3, [r2, #20]
 80003f2:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <MX_DMA_Init+0x38>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80003fe:	2200      	movs	r2, #0
 8000400:	2100      	movs	r1, #0
 8000402:	200f      	movs	r0, #15
 8000404:	f002 f8e3 	bl	80025ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000408:	200f      	movs	r0, #15
 800040a:	f002 f8fc 	bl	8002606 <HAL_NVIC_EnableIRQ>

}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000

0800041c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	f107 0310 	add.w	r3, r7, #16
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000430:	4b4f      	ldr	r3, [pc, #316]	@ (8000570 <MX_GPIO_Init+0x154>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a4e      	ldr	r2, [pc, #312]	@ (8000570 <MX_GPIO_Init+0x154>)
 8000436:	f043 0310 	orr.w	r3, r3, #16
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b4c      	ldr	r3, [pc, #304]	@ (8000570 <MX_GPIO_Init+0x154>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0310 	and.w	r3, r3, #16
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000448:	4b49      	ldr	r3, [pc, #292]	@ (8000570 <MX_GPIO_Init+0x154>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a48      	ldr	r2, [pc, #288]	@ (8000570 <MX_GPIO_Init+0x154>)
 800044e:	f043 0320 	orr.w	r3, r3, #32
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b46      	ldr	r3, [pc, #280]	@ (8000570 <MX_GPIO_Init+0x154>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0320 	and.w	r3, r3, #32
 800045c:	60bb      	str	r3, [r7, #8]
 800045e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000460:	4b43      	ldr	r3, [pc, #268]	@ (8000570 <MX_GPIO_Init+0x154>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a42      	ldr	r2, [pc, #264]	@ (8000570 <MX_GPIO_Init+0x154>)
 8000466:	f043 0304 	orr.w	r3, r3, #4
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b40      	ldr	r3, [pc, #256]	@ (8000570 <MX_GPIO_Init+0x154>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0304 	and.w	r3, r3, #4
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000478:	4b3d      	ldr	r3, [pc, #244]	@ (8000570 <MX_GPIO_Init+0x154>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a3c      	ldr	r2, [pc, #240]	@ (8000570 <MX_GPIO_Init+0x154>)
 800047e:	f043 0308 	orr.w	r3, r3, #8
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b3a      	ldr	r3, [pc, #232]	@ (8000570 <MX_GPIO_Init+0x154>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0308 	and.w	r3, r3, #8
 800048c:	603b      	str	r3, [r7, #0]
 800048e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BEE_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000496:	4837      	ldr	r0, [pc, #220]	@ (8000574 <MX_GPIO_Init+0x158>)
 8000498:	f002 fc59 	bl	8002d4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DCF_Pin|ASLED_PWR_Pin|GPIO_PIN_4|GPIO_PIN_5
 800049c:	2200      	movs	r2, #0
 800049e:	f240 7132 	movw	r1, #1842	@ 0x732
 80004a2:	4835      	ldr	r0, [pc, #212]	@ (8000578 <MX_GPIO_Init+0x15c>)
 80004a4:	f002 fc53 	bl	8002d4e <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EBS_ERR_GPIO_Port, EBS_ERR_Pin, GPIO_PIN_SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004ae:	4832      	ldr	r0, [pc, #200]	@ (8000578 <MX_GPIO_Init+0x15c>)
 80004b0:	f002 fc4d 	bl	8002d4e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEE_Pin PC14 PC15 */
  GPIO_InitStruct.Pin = BEE_Pin|GPIO_PIN_14|GPIO_PIN_15;
 80004b4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80004b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ba:	2301      	movs	r3, #1
 80004bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	2300      	movs	r3, #0
 80004c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c2:	2302      	movs	r3, #2
 80004c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	4619      	mov	r1, r3
 80004cc:	4829      	ldr	r0, [pc, #164]	@ (8000574 <MX_GPIO_Init+0x158>)
 80004ce:	f002 faa3 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCF_Pin ASLED_PWR_Pin EBS_ERR_Pin PB4
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = DCF_Pin|ASLED_PWR_Pin|EBS_ERR_Pin|GPIO_PIN_4
 80004d2:	f640 7332 	movw	r3, #3890	@ 0xf32
 80004d6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	2301      	movs	r3, #1
 80004da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	2300      	movs	r3, #0
 80004de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e0:	2302      	movs	r3, #2
 80004e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	4823      	ldr	r0, [pc, #140]	@ (8000578 <MX_GPIO_Init+0x15c>)
 80004ec:	f002 fa94 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : JITING_Pin */
  GPIO_InitStruct.Pin = JITING_Pin;
 80004f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80004f6:	4b21      	ldr	r3, [pc, #132]	@ (800057c <MX_GPIO_Init+0x160>)
 80004f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(JITING_GPIO_Port, &GPIO_InitStruct);
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4619      	mov	r1, r3
 8000504:	481c      	ldr	r0, [pc, #112]	@ (8000578 <MX_GPIO_Init+0x15c>)
 8000506:	f002 fa87 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800050a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800050e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000514:	2301      	movs	r3, #1
 8000516:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	4619      	mov	r1, r3
 800051e:	4816      	ldr	r0, [pc, #88]	@ (8000578 <MX_GPIO_Init+0x15c>)
 8000520:	f002 fa7a 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3;
 8000524:	f24c 0308 	movw	r3, #49160	@ 0xc008
 8000528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000532:	f107 0310 	add.w	r3, r7, #16
 8000536:	4619      	mov	r1, r3
 8000538:	480f      	ldr	r0, [pc, #60]	@ (8000578 <MX_GPIO_Init+0x15c>)
 800053a:	f002 fa6d 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 800053e:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	4619      	mov	r1, r3
 8000552:	480b      	ldr	r0, [pc, #44]	@ (8000580 <MX_GPIO_Init+0x164>)
 8000554:	f002 fa60 	bl	8002a18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	2102      	movs	r1, #2
 800055c:	2028      	movs	r0, #40	@ 0x28
 800055e:	f002 f836 	bl	80025ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000562:	2028      	movs	r0, #40	@ 0x28
 8000564:	f002 f84f 	bl	8002606 <HAL_NVIC_EnableIRQ>

}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000
 8000574:	40011000 	.word	0x40011000
 8000578:	40010c00 	.word	0x40010c00
 800057c:	10310000 	.word	0x10310000
 8000580:	40010800 	.word	0x40010800

08000584 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000588:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <MX_I2C1_Init+0x50>)
 800058a:	4a13      	ldr	r2, [pc, #76]	@ (80005d8 <MX_I2C1_Init+0x54>)
 800058c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800058e:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <MX_I2C1_Init+0x50>)
 8000590:	4a12      	ldr	r2, [pc, #72]	@ (80005dc <MX_I2C1_Init+0x58>)
 8000592:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000594:	4b0f      	ldr	r3, [pc, #60]	@ (80005d4 <MX_I2C1_Init+0x50>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800059a:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <MX_I2C1_Init+0x50>)
 800059c:	2200      	movs	r2, #0
 800059e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <MX_I2C1_Init+0x50>)
 80005a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <MX_I2C1_Init+0x50>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ae:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <MX_I2C1_Init+0x50>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005b4:	4b07      	ldr	r3, [pc, #28]	@ (80005d4 <MX_I2C1_Init+0x50>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <MX_I2C1_Init+0x50>)
 80005bc:	2200      	movs	r2, #0
 80005be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005c0:	4804      	ldr	r0, [pc, #16]	@ (80005d4 <MX_I2C1_Init+0x50>)
 80005c2:	f002 fbf5 	bl	8002db0 <HAL_I2C_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005cc:	f000 f8d5 	bl	800077a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000080 	.word	0x20000080
 80005d8:	40005400 	.word	0x40005400
 80005dc:	000186a0 	.word	0x000186a0

080005e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a15      	ldr	r2, [pc, #84]	@ (8000650 <HAL_I2C_MspInit+0x70>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d123      	bne.n	8000648 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000600:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <HAL_I2C_MspInit+0x74>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a13      	ldr	r2, [pc, #76]	@ (8000654 <HAL_I2C_MspInit+0x74>)
 8000606:	f043 0308 	orr.w	r3, r3, #8
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <HAL_I2C_MspInit+0x74>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0308 	and.w	r3, r3, #8
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000618:	23c0      	movs	r3, #192	@ 0xc0
 800061a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800061c:	2312      	movs	r3, #18
 800061e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	4619      	mov	r1, r3
 800062a:	480b      	ldr	r0, [pc, #44]	@ (8000658 <HAL_I2C_MspInit+0x78>)
 800062c:	f002 f9f4 	bl	8002a18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <HAL_I2C_MspInit+0x74>)
 8000632:	69db      	ldr	r3, [r3, #28]
 8000634:	4a07      	ldr	r2, [pc, #28]	@ (8000654 <HAL_I2C_MspInit+0x74>)
 8000636:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800063a:	61d3      	str	r3, [r2, #28]
 800063c:	4b05      	ldr	r3, [pc, #20]	@ (8000654 <HAL_I2C_MspInit+0x74>)
 800063e:	69db      	ldr	r3, [r3, #28]
 8000640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40005400 	.word	0x40005400
 8000654:	40021000 	.word	0x40021000
 8000658:	40010c00 	.word	0x40010c00

0800065c <User_Init>:
void EBS_Detect()
{
	//if(JITING_State==1||)
}
void User_Init()
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	EBS_Error_LED_Activate();
 8000660:	f000 fc90 	bl	8000f84 <EBS_Error_LED_Activate>
	DCF_DeActivate();
 8000664:	f000 fc7c 	bl	8000f60 <DCF_DeActivate>
	BEE_DeActivate();
 8000668:	f000 fc66 	bl	8000f38 <BEE_DeActivate>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f000 fe20 	bl	80012b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f824 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f7ff fece 	bl	800041c <MX_GPIO_Init>
  MX_DMA_Init();
 8000680:	f7ff feae 	bl	80003e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000684:	f7ff fd62 	bl	800014c <MX_ADC1_Init>
  MX_CAN_Init();
 8000688:	f7ff fe20 	bl	80002cc <MX_CAN_Init>
  MX_I2C1_Init();
 800068c:	f7ff ff7a 	bl	8000584 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000690:	f000 f90e 	bl	80008b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000694:	f000 f980 	bl	8000998 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000698:	f000 f9cc 	bl	8000a34 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800069c:	f000 fac8 	bl	8000c30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  User_Init();
 80006a0:	f7ff ffdc 	bl	800065c <User_Init>
  CAN_Init();
 80006a4:	f000 fb3a 	bl	8000d1c <CAN_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 80006a8:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <main+0x50>)
 80006aa:	f003 f9db 	bl	8003a64 <HAL_TIM_Base_Start_IT>
  //DCF_Activate();
//  ASSI_Yellow_Stable();
 // ASSI_Yellow_Blink();
  ASSI_OFF();
 80006ae:	f000 fd71 	bl	8001194 <ASSI_OFF>
  CAN_SendMessage(100,101);
 80006b2:	2165      	movs	r1, #101	@ 0x65
 80006b4:	2064      	movs	r0, #100	@ 0x64
 80006b6:	f000 fbb7 	bl	8000e28 <CAN_SendMessage>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ba:	bf00      	nop
 80006bc:	e7fd      	b.n	80006ba <main+0x4a>
 80006be:	bf00      	nop
 80006c0:	20000120 	.word	0x20000120

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	@ 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006ce:	2228      	movs	r2, #40	@ 0x28
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 fcd6 	bl	8005084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000702:	2301      	movs	r3, #1
 8000704:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800070e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000710:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000714:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fc8c 	bl	8003038 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000726:	f000 f828 	bl	800077a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000736:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800073a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	2102      	movs	r1, #2
 8000746:	4618      	mov	r0, r3
 8000748:	f002 fef8 	bl	800353c <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000752:	f000 f812 	bl	800077a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000756:	2302      	movs	r3, #2
 8000758:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800075a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800075e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	4618      	mov	r0, r3
 8000764:	f003 f878 	bl	8003858 <HAL_RCCEx_PeriphCLKConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800076e:	f000 f804 	bl	800077a <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3750      	adds	r7, #80	@ 0x50
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077e:	b672      	cpsid	i
}
 8000780:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000782:	bf00      	nop
 8000784:	e7fd      	b.n	8000782 <Error_Handler+0x8>
	...

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800078e:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <HAL_MspInit+0x5c>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	4a14      	ldr	r2, [pc, #80]	@ (80007e4 <HAL_MspInit+0x5c>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6193      	str	r3, [r2, #24]
 800079a:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <HAL_MspInit+0x5c>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <HAL_MspInit+0x5c>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	4a0e      	ldr	r2, [pc, #56]	@ (80007e4 <HAL_MspInit+0x5c>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b0:	61d3      	str	r3, [r2, #28]
 80007b2:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <HAL_MspInit+0x5c>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007be:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <HAL_MspInit+0x60>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	4a04      	ldr	r2, [pc, #16]	@ (80007e8 <HAL_MspInit+0x60>)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40010000 	.word	0x40010000

080007ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <NMI_Handler+0x4>

080007f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <HardFault_Handler+0x4>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <MemManage_Handler+0x4>

08000804 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <BusFault_Handler+0x4>

0800080c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <UsageFault_Handler+0x4>

08000814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083c:	f000 fd82 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000848:	4802      	ldr	r0, [pc, #8]	@ (8000854 <DMA1_Channel5_IRQHandler+0x10>)
 800084a:	f001 ffb1 	bl	80027b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200001b0 	.word	0x200001b0

08000858 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800085c:	4802      	ldr	r0, [pc, #8]	@ (8000868 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800085e:	f001 fbbb 	bl	8001fd8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000058 	.word	0x20000058

0800086c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000870:	4802      	ldr	r0, [pc, #8]	@ (800087c <TIM3_IRQHandler+0x10>)
 8000872:	f003 fb43 	bl	8003efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000120 	.word	0x20000120

08000880 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000884:	4802      	ldr	r0, [pc, #8]	@ (8000890 <TIM4_IRQHandler+0x10>)
 8000886:	f003 fb39 	bl	8003efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000168 	.word	0x20000168

08000894 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JITING_Pin);
 8000898:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800089c:	f002 fa70 	bl	8002d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08e      	sub	sp, #56	@ 0x38
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c4:	f107 0320 	add.w	r3, r7, #32
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
 80008dc:	615a      	str	r2, [r3, #20]
 80008de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000994 <MX_TIM2_Init+0xe4>)
 80008e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000994 <MX_TIM2_Init+0xe4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ee:	4b29      	ldr	r3, [pc, #164]	@ (8000994 <MX_TIM2_Init+0xe4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 80008f4:	4b27      	ldr	r3, [pc, #156]	@ (8000994 <MX_TIM2_Init+0xe4>)
 80008f6:	2259      	movs	r2, #89	@ 0x59
 80008f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fa:	4b26      	ldr	r3, [pc, #152]	@ (8000994 <MX_TIM2_Init+0xe4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000900:	4b24      	ldr	r3, [pc, #144]	@ (8000994 <MX_TIM2_Init+0xe4>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000906:	4823      	ldr	r0, [pc, #140]	@ (8000994 <MX_TIM2_Init+0xe4>)
 8000908:	f003 f85c 	bl	80039c4 <HAL_TIM_Base_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000912:	f7ff ff32 	bl	800077a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000916:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800091c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000920:	4619      	mov	r1, r3
 8000922:	481c      	ldr	r0, [pc, #112]	@ (8000994 <MX_TIM2_Init+0xe4>)
 8000924:	f003 fc9c 	bl	8004260 <HAL_TIM_ConfigClockSource>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800092e:	f7ff ff24 	bl	800077a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000932:	4818      	ldr	r0, [pc, #96]	@ (8000994 <MX_TIM2_Init+0xe4>)
 8000934:	f003 f8e8 	bl	8003b08 <HAL_TIM_PWM_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800093e:	f7ff ff1c 	bl	800077a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	4619      	mov	r1, r3
 8000950:	4810      	ldr	r0, [pc, #64]	@ (8000994 <MX_TIM2_Init+0xe4>)
 8000952:	f004 f903 	bl	8004b5c <HAL_TIMEx_MasterConfigSynchronization>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800095c:	f7ff ff0d 	bl	800077a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000960:	2360      	movs	r3, #96	@ 0x60
 8000962:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	4619      	mov	r1, r3
 8000976:	4807      	ldr	r0, [pc, #28]	@ (8000994 <MX_TIM2_Init+0xe4>)
 8000978:	f003 fbb0 	bl	80040dc <HAL_TIM_PWM_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000982:	f7ff fefa 	bl	800077a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000986:	4803      	ldr	r0, [pc, #12]	@ (8000994 <MX_TIM2_Init+0xe4>)
 8000988:	f000 f922 	bl	8000bd0 <HAL_TIM_MspPostInit>

}
 800098c:	bf00      	nop
 800098e:	3738      	adds	r7, #56	@ 0x38
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200000d8 	.word	0x200000d8

08000998 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ac:	463b      	mov	r3, r7
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009b4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <MX_TIM3_Init+0x94>)
 80009b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a30 <MX_TIM3_Init+0x98>)
 80009b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	@ (8000a2c <MX_TIM3_Init+0x94>)
 80009bc:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80009c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <MX_TIM3_Init+0x94>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80009c8:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <MX_TIM3_Init+0x94>)
 80009ca:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80009ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d0:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <MX_TIM3_Init+0x94>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <MX_TIM3_Init+0x94>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009dc:	4813      	ldr	r0, [pc, #76]	@ (8000a2c <MX_TIM3_Init+0x94>)
 80009de:	f002 fff1 	bl	80039c4 <HAL_TIM_Base_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80009e8:	f7ff fec7 	bl	800077a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	4619      	mov	r1, r3
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <MX_TIM3_Init+0x94>)
 80009fa:	f003 fc31 	bl	8004260 <HAL_TIM_ConfigClockSource>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a04:	f7ff feb9 	bl	800077a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a10:	463b      	mov	r3, r7
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_TIM3_Init+0x94>)
 8000a16:	f004 f8a1 	bl	8004b5c <HAL_TIMEx_MasterConfigSynchronization>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a20:	f7ff feab 	bl	800077a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000120 	.word	0x20000120
 8000a30:	40000400 	.word	0x40000400

08000a34 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a48:	463b      	mov	r3, r7
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a50:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <MX_TIM4_Init+0x94>)
 8000a52:	4a1e      	ldr	r2, [pc, #120]	@ (8000acc <MX_TIM4_Init+0x98>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8000a56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac8 <MX_TIM4_Init+0x94>)
 8000a58:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000a5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <MX_TIM4_Init+0x94>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 8000a64:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <MX_TIM4_Init+0x94>)
 8000a66:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000a6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <MX_TIM4_Init+0x94>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <MX_TIM4_Init+0x94>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a78:	4813      	ldr	r0, [pc, #76]	@ (8000ac8 <MX_TIM4_Init+0x94>)
 8000a7a:	f002 ffa3 	bl	80039c4 <HAL_TIM_Base_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000a84:	f7ff fe79 	bl	800077a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	4619      	mov	r1, r3
 8000a94:	480c      	ldr	r0, [pc, #48]	@ (8000ac8 <MX_TIM4_Init+0x94>)
 8000a96:	f003 fbe3 	bl	8004260 <HAL_TIM_ConfigClockSource>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000aa0:	f7ff fe6b 	bl	800077a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000aac:	463b      	mov	r3, r7
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <MX_TIM4_Init+0x94>)
 8000ab2:	f004 f853 	bl	8004b5c <HAL_TIMEx_MasterConfigSynchronization>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000abc:	f7ff fe5d 	bl	800077a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000168 	.word	0x20000168
 8000acc:	40000800 	.word	0x40000800

08000ad0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ae0:	d135      	bne.n	8000b4e <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ae2:	4b36      	ldr	r3, [pc, #216]	@ (8000bbc <HAL_TIM_Base_MspInit+0xec>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	4a35      	ldr	r2, [pc, #212]	@ (8000bbc <HAL_TIM_Base_MspInit+0xec>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	61d3      	str	r3, [r2, #28]
 8000aee:	4b33      	ldr	r3, [pc, #204]	@ (8000bbc <HAL_TIM_Base_MspInit+0xec>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000afa:	4b31      	ldr	r3, [pc, #196]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xf0>)
 8000afc:	4a31      	ldr	r2, [pc, #196]	@ (8000bc4 <HAL_TIM_Base_MspInit+0xf4>)
 8000afe:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b00:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xf0>)
 8000b02:	2210      	movs	r2, #16
 8000b04:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b06:	4b2e      	ldr	r3, [pc, #184]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xf0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xf0>)
 8000b0e:	2280      	movs	r2, #128	@ 0x80
 8000b10:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b12:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xf0>)
 8000b14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b18:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b1a:	4b29      	ldr	r3, [pc, #164]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xf0>)
 8000b1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b20:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000b22:	4b27      	ldr	r3, [pc, #156]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xf0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000b28:	4b25      	ldr	r3, [pc, #148]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xf0>)
 8000b2a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b2e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000b30:	4823      	ldr	r0, [pc, #140]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xf0>)
 8000b32:	f001 fd83 	bl	800263c <HAL_DMA_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8000b3c:	f7ff fe1d 	bl	800077a <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a1f      	ldr	r2, [pc, #124]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xf0>)
 8000b44:	625a      	str	r2, [r3, #36]	@ 0x24
 8000b46:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xf0>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000b4c:	e032      	b.n	8000bb4 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a1d      	ldr	r2, [pc, #116]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xf8>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d114      	bne.n	8000b82 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b58:	4b18      	ldr	r3, [pc, #96]	@ (8000bbc <HAL_TIM_Base_MspInit+0xec>)
 8000b5a:	69db      	ldr	r3, [r3, #28]
 8000b5c:	4a17      	ldr	r2, [pc, #92]	@ (8000bbc <HAL_TIM_Base_MspInit+0xec>)
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	61d3      	str	r3, [r2, #28]
 8000b64:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <HAL_TIM_Base_MspInit+0xec>)
 8000b66:	69db      	ldr	r3, [r3, #28]
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2101      	movs	r1, #1
 8000b74:	201d      	movs	r0, #29
 8000b76:	f001 fd2a 	bl	80025ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b7a:	201d      	movs	r0, #29
 8000b7c:	f001 fd43 	bl	8002606 <HAL_NVIC_EnableIRQ>
}
 8000b80:	e018      	b.n	8000bb4 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM4)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a11      	ldr	r2, [pc, #68]	@ (8000bcc <HAL_TIM_Base_MspInit+0xfc>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d113      	bne.n	8000bb4 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <HAL_TIM_Base_MspInit+0xec>)
 8000b8e:	69db      	ldr	r3, [r3, #28]
 8000b90:	4a0a      	ldr	r2, [pc, #40]	@ (8000bbc <HAL_TIM_Base_MspInit+0xec>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	61d3      	str	r3, [r2, #28]
 8000b98:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <HAL_TIM_Base_MspInit+0xec>)
 8000b9a:	69db      	ldr	r3, [r3, #28]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2106      	movs	r1, #6
 8000ba8:	201e      	movs	r0, #30
 8000baa:	f001 fd10 	bl	80025ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000bae:	201e      	movs	r0, #30
 8000bb0:	f001 fd29 	bl	8002606 <HAL_NVIC_EnableIRQ>
}
 8000bb4:	bf00      	nop
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	200001b0 	.word	0x200001b0
 8000bc4:	40020058 	.word	0x40020058
 8000bc8:	40000400 	.word	0x40000400
 8000bcc:	40000800 	.word	0x40000800

08000bd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bee:	d117      	bne.n	8000c20 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <HAL_TIM_MspPostInit+0x58>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c28 <HAL_TIM_MspPostInit+0x58>)
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <HAL_TIM_MspPostInit+0x58>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ASLED_PWM_Pin;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ASLED_PWM_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <HAL_TIM_MspPostInit+0x5c>)
 8000c1c:	f001 fefc 	bl	8002a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010800 	.word	0x40010800

08000c30 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <MX_USART1_UART_Init+0x4c>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	@ (8000c80 <MX_USART1_UART_Init+0x50>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <MX_USART1_UART_Init+0x4c>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <MX_USART1_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <MX_USART1_UART_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <MX_USART1_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <MX_USART1_UART_Init+0x4c>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <MX_USART1_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <MX_USART1_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <MX_USART1_UART_Init+0x4c>)
 8000c68:	f003 ffe8 	bl	8004c3c <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c72:	f7ff fd82 	bl	800077a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200001f4 	.word	0x200001f4
 8000c80:	40013800 	.word	0x40013800

08000c84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d10 <HAL_UART_MspInit+0x8c>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d131      	bne.n	8000d08 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <HAL_UART_MspInit+0x90>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a1a      	ldr	r2, [pc, #104]	@ (8000d14 <HAL_UART_MspInit+0x90>)
 8000caa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <HAL_UART_MspInit+0x90>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbc:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <HAL_UART_MspInit+0x90>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a14      	ldr	r2, [pc, #80]	@ (8000d14 <HAL_UART_MspInit+0x90>)
 8000cc2:	f043 0304 	orr.w	r3, r3, #4
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <HAL_UART_MspInit+0x90>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 0310 	add.w	r3, r7, #16
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480b      	ldr	r0, [pc, #44]	@ (8000d18 <HAL_UART_MspInit+0x94>)
 8000cea:	f001 fe95 	bl	8002a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4619      	mov	r1, r3
 8000d02:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <HAL_UART_MspInit+0x94>)
 8000d04:	f001 fe88 	bl	8002a18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d08:	bf00      	nop
 8000d0a:	3720      	adds	r7, #32
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40013800 	.word	0x40013800
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010800 	.word	0x40010800

08000d1c <CAN_Init>:

const uint8_t CAN_AS_Emergency=20;
const uint8_t CAN_EBS_Disable=21;

void CAN_Init()
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	CAN_Filter0_Config();
 8000d20:	f000 f860 	bl	8000de4 <CAN_Filter0_Config>
	HAL_CAN_Start(&hcan);
 8000d24:	4804      	ldr	r0, [pc, #16]	@ (8000d38 <CAN_Init+0x1c>)
 8000d26:	f000 fefe 	bl	8001b26 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	4802      	ldr	r0, [pc, #8]	@ (8000d38 <CAN_Init+0x1c>)
 8000d2e:	f001 f92e 	bl	8001f8e <HAL_CAN_ActivateNotification>
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000058 	.word	0x20000058

08000d3c <HAL_CAN_RxFifo0MsgPendingCallback>:

//FIFO0回调重写
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	@ 0x30
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
   // HAL_UART_Transmit(&huart1, "CAN_ItMsg Succeed", 19, 10);

    //HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rx_header, rx_data);

   // HAL_UART_Transmit(&huart1, "CAN_ReadMsg Succeed", 19, 10);
    while (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
 8000d44:	e031      	b.n	8000daa <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
    {
if(rx_data[0]==0)
 8000d46:	7b3b      	ldrb	r3, [r7, #12]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d105      	bne.n	8000d58 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
{
	HAL_UART_Transmit(&huart1, "CAN_GetMsg00 Succeed", 20, 10);
 8000d4c:	230a      	movs	r3, #10
 8000d4e:	2214      	movs	r2, #20
 8000d50:	4920      	ldr	r1, [pc, #128]	@ (8000dd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000d52:	4821      	ldr	r0, [pc, #132]	@ (8000dd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000d54:	f003 ffc2 	bl	8004cdc <HAL_UART_Transmit>
}
    if (rx_header.StdId == 0x101)
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	f240 1201 	movw	r2, #257	@ 0x101
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d123      	bne.n	8000daa <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
    {
    	HAL_UART_Transmit(&huart1, "CAN_GetMsg Succeed", 18, 10);
 8000d62:	230a      	movs	r3, #10
 8000d64:	2212      	movs	r2, #18
 8000d66:	491d      	ldr	r1, [pc, #116]	@ (8000ddc <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000d68:	481b      	ldr	r0, [pc, #108]	@ (8000dd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000d6a:	f003 ffb7 	bl	8004cdc <HAL_UART_Transmit>
        if(rx_data[0]==30)//AS_Ready
 8000d6e:	7b3b      	ldrb	r3, [r7, #12]
 8000d70:	2b1e      	cmp	r3, #30
 8000d72:	d102      	bne.n	8000d7a <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
        {
        	AS_State=AS_Ready;
 8000d74:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
        }
        if(rx_data[0]==31)//AS_Driving
 8000d7a:	7b3b      	ldrb	r3, [r7, #12]
 8000d7c:	2b1f      	cmp	r3, #31
 8000d7e:	d102      	bne.n	8000d86 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
        {
            AS_State=AS_Driving;
 8000d80:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000d82:	2202      	movs	r2, #2
 8000d84:	701a      	strb	r2, [r3, #0]
        }
        if(rx_data[0]==32)//AS_Finished
 8000d86:	7b3b      	ldrb	r3, [r7, #12]
 8000d88:	2b20      	cmp	r3, #32
 8000d8a:	d102      	bne.n	8000d92 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
        {
        	AS_State=AS_Finished;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	701a      	strb	r2, [r3, #0]
        }
        if(rx_data[0]==33)//AS_Emergency
 8000d92:	7b3b      	ldrb	r3, [r7, #12]
 8000d94:	2b21      	cmp	r3, #33	@ 0x21
 8000d96:	d102      	bne.n	8000d9e <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
        {
        	AS_State=AS_Emergency;
 8000d98:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	701a      	strb	r2, [r3, #0]
        }
        if(rx_data[0]==34)//AS_Off
 8000d9e:	7b3b      	ldrb	r3, [r7, #12]
 8000da0:	2b22      	cmp	r3, #34	@ 0x22
 8000da2:	d102      	bne.n	8000daa <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
        {
            AS_State=AS_Off;
 8000da4:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
    while (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	f107 0214 	add.w	r2, r7, #20
 8000db4:	2100      	movs	r1, #0
 8000db6:	f000 ffc9 	bl	8001d4c <HAL_CAN_GetRxMessage>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d0c2      	beq.n	8000d46 <HAL_CAN_RxFifo0MsgPendingCallback+0xa>
    }
    }
    //CAN_SendBack(rx_data);

    // 重新激活中断
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2102      	movs	r1, #2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 f8e2 	bl	8001f8e <HAL_CAN_ActivateNotification>
}
 8000dca:	bf00      	nop
 8000dcc:	3730      	adds	r7, #48	@ 0x30
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	080050f4 	.word	0x080050f4
 8000dd8:	200001f4 	.word	0x200001f4
 8000ddc:	0800510c 	.word	0x0800510c
 8000de0:	200000d5 	.word	0x200000d5

08000de4 <CAN_Filter0_Config>:


void CAN_Filter0_Config(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	@ 0x28
 8000de8:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef canFilter;

    // 基本参数
    canFilter.FilterBank = 0;               // 使用过滤器组0
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
    canFilter.FilterMode = CAN_FILTERMODE_IDMASK;   // 屏蔽位模式
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
    canFilter.FilterScale = CAN_FILTERSCALE_32BIT;  // 32位精度
 8000df2:	2301      	movs	r3, #1
 8000df4:	61fb      	str	r3, [r7, #28]
    canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0; // 数据存入FIFO0
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
    canFilter.FilterActivation = ENABLE;     // 启用过滤器
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	623b      	str	r3, [r7, #32]

    // ID与掩码计算（标准帧ID=0x101）
    canFilter.FilterIdHigh = 0x101 << 5;     // ID左移5位对齐寄存器高位
 8000dfe:	f242 0320 	movw	r3, #8224	@ 0x2020
 8000e02:	603b      	str	r3, [r7, #0]
    canFilter.FilterIdLow = 0x0000;          // 低16位未使用
 8000e04:	2300      	movs	r3, #0
 8000e06:	607b      	str	r3, [r7, #4]
    canFilter.FilterMaskIdHigh = 0x7FF << 5; // 掩码高11位全匹配（0x7FF=11位全1）  即屏蔽码
 8000e08:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000e0c:	60bb      	str	r3, [r7, #8]
    canFilter.FilterMaskIdLow = 0x0006;      // 强制IDE=0（标准帧）+ RTR=0（数据帧）
 8000e0e:	2306      	movs	r3, #6
 8000e10:	60fb      	str	r3, [r7, #12]

    // 应用配置
    HAL_CAN_ConfigFilter(&hcan, &canFilter);
 8000e12:	463b      	mov	r3, r7
 8000e14:	4619      	mov	r1, r3
 8000e16:	4803      	ldr	r0, [pc, #12]	@ (8000e24 <CAN_Filter0_Config+0x40>)
 8000e18:	f000 fdbc 	bl	8001994 <HAL_CAN_ConfigFilter>
}
 8000e1c:	bf00      	nop
 8000e1e:	3728      	adds	r7, #40	@ 0x28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000058 	.word	0x20000058

08000e28 <CAN_SendMessage>:
	        {
	            // 发送失败处理
	        }
}

void CAN_SendMessage(uint8_t Send_Id,uint16_t Value){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	@ 0x30
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	460a      	mov	r2, r1
 8000e32:	71fb      	strb	r3, [r7, #7]
 8000e34:	4613      	mov	r3, r2
 8000e36:	80bb      	strh	r3, [r7, #4]

    CAN_TxHeaderTypeDef TxHeader;
    uint8_t TxData[8];
    uint32_t TxMailbox;
    TxHeader.StdId = 0x101;      // 标准CAN ID
 8000e38:	f240 1301 	movw	r3, #257	@ 0x101
 8000e3c:	61bb      	str	r3, [r7, #24]
    TxHeader.RTR = CAN_RTR_DATA; 		// 数据帧
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.IDE = CAN_ID_STD;   		// 使用标准ID
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
    TxHeader.DLC = 8;            		// 数据长度码，表示8字节数据
 8000e46:	2308      	movs	r3, #8
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.TransmitGlobalTime = DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    TxData[0] = Send_Id;
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	743b      	strb	r3, [r7, #16]
    TxData[1] = (Value >> 8);
 8000e54:	88bb      	ldrh	r3, [r7, #4]
 8000e56:	0a1b      	lsrs	r3, r3, #8
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	747b      	strb	r3, [r7, #17]
    TxData[2] = (Value & 0xFF);
 8000e5e:	88bb      	ldrh	r3, [r7, #4]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	74bb      	strb	r3, [r7, #18]
    TxData[3] = 0x00;
 8000e64:	2300      	movs	r3, #0
 8000e66:	74fb      	strb	r3, [r7, #19]
    TxData[4] = 0x00;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	753b      	strb	r3, [r7, #20]
    TxData[5] = 0x00;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	757b      	strb	r3, [r7, #21]
    TxData[6] = 0x00;
 8000e70:	2300      	movs	r3, #0
 8000e72:	75bb      	strb	r3, [r7, #22]
    TxData[7] = 0x00;
 8000e74:	2300      	movs	r3, #0
 8000e76:	75fb      	strb	r3, [r7, #23]
    if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	f107 0210 	add.w	r2, r7, #16
 8000e80:	f107 0118 	add.w	r1, r7, #24
 8000e84:	480b      	ldr	r0, [pc, #44]	@ (8000eb4 <CAN_SendMessage+0x8c>)
 8000e86:	f000 fe92 	bl	8001bae <HAL_CAN_AddTxMessage>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d006      	beq.n	8000e9e <CAN_SendMessage+0x76>
    {
    	 HAL_UART_Transmit(&huart1, "CAN_Send Error", 14, 10);
 8000e90:	230a      	movs	r3, #10
 8000e92:	220e      	movs	r2, #14
 8000e94:	4908      	ldr	r1, [pc, #32]	@ (8000eb8 <CAN_SendMessage+0x90>)
 8000e96:	4809      	ldr	r0, [pc, #36]	@ (8000ebc <CAN_SendMessage+0x94>)
 8000e98:	f003 ff20 	bl	8004cdc <HAL_UART_Transmit>
    {
    	// HAL_Delay(50);
    	 HAL_UART_Transmit(&huart1, "CAN_Send Succeed", 16, 10);

    }
}
 8000e9c:	e005      	b.n	8000eaa <CAN_SendMessage+0x82>
    	 HAL_UART_Transmit(&huart1, "CAN_Send Succeed", 16, 10);
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	2210      	movs	r2, #16
 8000ea2:	4907      	ldr	r1, [pc, #28]	@ (8000ec0 <CAN_SendMessage+0x98>)
 8000ea4:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <CAN_SendMessage+0x94>)
 8000ea6:	f003 ff19 	bl	8004cdc <HAL_UART_Transmit>
}
 8000eaa:	bf00      	nop
 8000eac:	3730      	adds	r7, #48	@ 0x30
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000058 	.word	0x20000058
 8000eb8:	08005120 	.word	0x08005120
 8000ebc:	200001f4 	.word	0x200001f4
 8000ec0:	08005130 	.word	0x08005130

08000ec4 <CAN_Send_AS_Emergency>:

void CAN_Send_AS_Emergency(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	CAN_SendMessage(CAN_AS_Emergency,0);
 8000ec8:	2314      	movs	r3, #20
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ffab 	bl	8000e28 <CAN_SendMessage>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <CAN_Send_EBS_Disable>:
void CAN_Send_EBS_Disable(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0
	CAN_SendMessage(CAN_EBS_Disable,0);
 8000eda:	2315      	movs	r3, #21
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ffa2 	bl	8000e28 <CAN_SendMessage>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_GPIO_EXTI_Callback>:

}

//安全回路急停检测的中断重写
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==JITING_Pin)
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ef8:	d113      	bne.n	8000f22 <HAL_GPIO_EXTI_Callback+0x3a>
	{
		if(HAL_GPIO_ReadPin(JITING_GPIO_Port, JITING_Pin)==GPIO_PIN_RESET)//检测到低电平说明断开
 8000efa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000efe:	480b      	ldr	r0, [pc, #44]	@ (8000f2c <HAL_GPIO_EXTI_Callback+0x44>)
 8000f00:	f001 ff0e 	bl	8002d20 <HAL_GPIO_ReadPin>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d107      	bne.n	8000f1a <HAL_GPIO_EXTI_Callback+0x32>
		{
			 __HAL_GPIO_EXTI_CLEAR_IT(JITING_Pin);
 8000f0a:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <HAL_GPIO_EXTI_Callback+0x48>)
 8000f0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f10:	615a      	str	r2, [r3, #20]
		    AS_State=AS_Emergency;
 8000f12:	4b08      	ldr	r3, [pc, #32]	@ (8000f34 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f14:	2203      	movs	r2, #3
 8000f16:	701a      	strb	r2, [r3, #0]
		{
			 __HAL_GPIO_EXTI_CLEAR_IT(JITING_Pin);
			//JITING_State=1;
		}
	}
}
 8000f18:	e003      	b.n	8000f22 <HAL_GPIO_EXTI_Callback+0x3a>
			 __HAL_GPIO_EXTI_CLEAR_IT(JITING_Pin);
 8000f1a:	4b05      	ldr	r3, [pc, #20]	@ (8000f30 <HAL_GPIO_EXTI_Callback+0x48>)
 8000f1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f20:	615a      	str	r2, [r3, #20]
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40010c00 	.word	0x40010c00
 8000f30:	40010400 	.word	0x40010400
 8000f34:	200000d5 	.word	0x200000d5

08000f38 <BEE_DeActivate>:
		HAL_GPIO_WritePin(BEE_GPIO_Port, BEE_Pin, GPIO_PIN_SET);
	}
}

void BEE_DeActivate(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BEE_GPIO_Port, BEE_Pin)==GPIO_PIN_SET)
 8000f3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f40:	4806      	ldr	r0, [pc, #24]	@ (8000f5c <BEE_DeActivate+0x24>)
 8000f42:	f001 feed 	bl	8002d20 <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d105      	bne.n	8000f58 <BEE_DeActivate+0x20>
	{
		HAL_GPIO_WritePin(BEE_GPIO_Port, BEE_Pin, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f52:	4802      	ldr	r0, [pc, #8]	@ (8000f5c <BEE_DeActivate+0x24>)
 8000f54:	f001 fefb 	bl	8002d4e <HAL_GPIO_WritePin>
	}
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40011000 	.word	0x40011000

08000f60 <DCF_DeActivate>:
		HAL_GPIO_WritePin(DCF_GPIO_Port, DCF_Pin, GPIO_PIN_SET);
	}
}

void DCF_DeActivate(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(DCF_GPIO_Port, DCF_Pin)==GPIO_PIN_SET)
 8000f64:	2102      	movs	r1, #2
 8000f66:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <DCF_DeActivate+0x20>)
 8000f68:	f001 feda 	bl	8002d20 <HAL_GPIO_ReadPin>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d104      	bne.n	8000f7c <DCF_DeActivate+0x1c>
	{
		HAL_GPIO_WritePin(DCF_GPIO_Port, DCF_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2102      	movs	r1, #2
 8000f76:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <DCF_DeActivate+0x20>)
 8000f78:	f001 fee9 	bl	8002d4e <HAL_GPIO_WritePin>
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40010c00 	.word	0x40010c00

08000f84 <EBS_Error_LED_Activate>:

//EBS故障灯
void EBS_Error_LED_Activate(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0

		HAL_GPIO_WritePin(EBS_ERR_GPIO_Port, EBS_ERR_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f8e:	4802      	ldr	r0, [pc, #8]	@ (8000f98 <EBS_Error_LED_Activate+0x14>)
 8000f90:	f001 fedd 	bl	8002d4e <HAL_GPIO_WritePin>

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40010c00 	.word	0x40010c00

08000f9c <Reset_Load>:
/*
功能：最后一行装在24个0，输出24个周期占空比为0的PWM波，作为最后reset延时，这里总时长为24*1.25=37.5us > 24us(要求大于24us)
//如果出现无法复位的情况，只需要在增加数组Pixel_Buf[Pixel_NUM+1][24]的行数，并改写Reset_Load即可，这里不做演示了，
*/
 void Reset_Load(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i=0;i<24;i++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	e009      	b.n	8000fbc <Reset_Load+0x20>
	{
		Pixel_Buf[Pixel_NUM][i] = 0;
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	4a09      	ldr	r2, [pc, #36]	@ (8000fd0 <Reset_Load+0x34>)
 8000fac:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i=0;i<24;i++)
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	71fb      	strb	r3, [r7, #7]
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2b17      	cmp	r3, #23
 8000fc0:	d9f2      	bls.n	8000fa8 <Reset_Load+0xc>

	}
}
 8000fc2:	bf00      	nop
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	2000023c 	.word	0x2000023c

08000fd4 <RGB_SendArray>:
功能：发送数组Pixel_Buf[Pixel_NUM+1][24]内的数据，发送的数据被存储到定时器1通道1的CCR寄存器，用于控制PWM占空比
参数：(&htim1)定时器1，(TIM_CHANNEL_1)通道1，((uint32_t *)Pixel_Buf)待发送数组，
			(Pixel_NUM+1)*24)发送个数，数组行列相乘
*/
  void RGB_SendArray(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)Pixel_Buf,(Pixel_NUM+1)*24);
 8000fd8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8000fdc:	4a03      	ldr	r2, [pc, #12]	@ (8000fec <RGB_SendArray+0x18>)
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4803      	ldr	r0, [pc, #12]	@ (8000ff0 <RGB_SendArray+0x1c>)
 8000fe2:	f002 fde9 	bl	8003bb8 <HAL_TIM_PWM_Start_DMA>
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000023c 	.word	0x2000023c
 8000ff0:	200000d8 	.word	0x200000d8

08000ff4 <RGB_Flush>:


 //刷新WS2812B灯板显示函数
 void RGB_Flush(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    Reset_Load();     //复位
 8000ff8:	f7ff ffd0 	bl	8000f9c <Reset_Load>
    RGB_SendArray();  //发送数据
 8000ffc:	f7ff ffea 	bl	8000fd4 <RGB_SendArray>


}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <ASSI_Set_Black>:
    {
        RGB_SetOne_Color(i,color) ;
    }
}
void ASSI_Set_Black(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
	 for(int j=0;j<Pixel_NUM;j++)
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	e016      	b.n	800103e <ASSI_Set_Black+0x3a>
	    {
	    	for(int i=0;i<24;i++)
 8001010:	2300      	movs	r3, #0
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	e00d      	b.n	8001032 <ASSI_Set_Black+0x2e>
	    		{
	    			Pixel_Buf[j][i] = Code0;
 8001016:	490e      	ldr	r1, [pc, #56]	@ (8001050 <ASSI_Set_Black+0x4c>)
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4413      	add	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	4413      	add	r3, r2
 8001026:	221e      	movs	r2, #30
 8001028:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	    	for(int i=0;i<24;i++)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b17      	cmp	r3, #23
 8001036:	ddee      	ble.n	8001016 <ASSI_Set_Black+0x12>
	 for(int j=0;j<Pixel_NUM;j++)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3301      	adds	r3, #1
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b3f      	cmp	r3, #63	@ 0x3f
 8001042:	dde5      	ble.n	8001010 <ASSI_Set_Black+0xc>

	    		}
	    }
	 RGB_Flush();
 8001044:	f7ff ffd6 	bl	8000ff4 <RGB_Flush>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	2000023c 	.word	0x2000023c

08001054 <ASSI_Set_Blue>:
void ASSI_Set_Blue(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0

	for(int j=0;j<Pixel_NUM;j++)
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	e03e      	b.n	80010de <ASSI_Set_Blue+0x8a>
	    {
	    	for(int i=0;i<8;i++)
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	e00d      	b.n	8001082 <ASSI_Set_Blue+0x2e>
	    		{
	    			Pixel_Buf[j][i] = Code0;
 8001066:	4922      	ldr	r1, [pc, #136]	@ (80010f0 <ASSI_Set_Blue+0x9c>)
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	4413      	add	r3, r2
 8001076:	221e      	movs	r2, #30
 8001078:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	    	for(int i=0;i<8;i++)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	3301      	adds	r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	2b07      	cmp	r3, #7
 8001086:	ddee      	ble.n	8001066 <ASSI_Set_Blue+0x12>

	    		}
	    	for(int i=8;i<16;i++)
 8001088:	2308      	movs	r3, #8
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	e00d      	b.n	80010aa <ASSI_Set_Blue+0x56>
	    		{
	    		    			Pixel_Buf[j][i] = Code1;
 800108e:	4918      	ldr	r1, [pc, #96]	@ (80010f0 <ASSI_Set_Blue+0x9c>)
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4613      	mov	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4413      	add	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	223c      	movs	r2, #60	@ 0x3c
 80010a0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	    	for(int i=8;i<16;i++)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3301      	adds	r3, #1
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	ddee      	ble.n	800108e <ASSI_Set_Blue+0x3a>

	    		}
	    	for(int i=16;i<24;i++)
 80010b0:	2310      	movs	r3, #16
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	e00d      	b.n	80010d2 <ASSI_Set_Blue+0x7e>
	    	{
	    		Pixel_Buf[j][i] = Code0;
 80010b6:	490e      	ldr	r1, [pc, #56]	@ (80010f0 <ASSI_Set_Blue+0x9c>)
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	4613      	mov	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	4413      	add	r3, r2
 80010c6:	221e      	movs	r2, #30
 80010c8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	    	for(int i=16;i<24;i++)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	3301      	adds	r3, #1
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	2b17      	cmp	r3, #23
 80010d6:	ddee      	ble.n	80010b6 <ASSI_Set_Blue+0x62>
	for(int j=0;j<Pixel_NUM;j++)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	3301      	adds	r3, #1
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80010e2:	ddbd      	ble.n	8001060 <ASSI_Set_Blue+0xc>
	    	}
	    }
	 RGB_Flush();
 80010e4:	f7ff ff86 	bl	8000ff4 <RGB_Flush>

}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2000023c 	.word	0x2000023c

080010f4 <ASSI_Set_Yellow>:
void ASSI_Set_Yellow(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0

	for(int j=0;j<Pixel_NUM;j++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	e03e      	b.n	800117e <ASSI_Set_Yellow+0x8a>
	    {

	    	for(int i=0;i<8;i++)
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	e00d      	b.n	8001122 <ASSI_Set_Yellow+0x2e>
	    		{
	    			Pixel_Buf[j][i] = Code1;
 8001106:	4922      	ldr	r1, [pc, #136]	@ (8001190 <ASSI_Set_Yellow+0x9c>)
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	4413      	add	r3, r2
 8001116:	223c      	movs	r2, #60	@ 0x3c
 8001118:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	    	for(int i=0;i<8;i++)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	3301      	adds	r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	2b07      	cmp	r3, #7
 8001126:	ddee      	ble.n	8001106 <ASSI_Set_Yellow+0x12>

	    		}
	    	for(int i=8;i<16;i++)
 8001128:	2308      	movs	r3, #8
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	e00d      	b.n	800114a <ASSI_Set_Yellow+0x56>
	    	{
	    		Pixel_Buf[j][i] = Code0;
 800112e:	4918      	ldr	r1, [pc, #96]	@ (8001190 <ASSI_Set_Yellow+0x9c>)
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	221e      	movs	r2, #30
 8001140:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	    	for(int i=8;i<16;i++)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3301      	adds	r3, #1
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	ddee      	ble.n	800112e <ASSI_Set_Yellow+0x3a>
	    	}
	    	for(int i=16;i<24;i++)
 8001150:	2310      	movs	r3, #16
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	e00d      	b.n	8001172 <ASSI_Set_Yellow+0x7e>
	    	{
	    		    		Pixel_Buf[j][i] = Code1;
 8001156:	490e      	ldr	r1, [pc, #56]	@ (8001190 <ASSI_Set_Yellow+0x9c>)
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	4413      	add	r3, r2
 8001166:	223c      	movs	r2, #60	@ 0x3c
 8001168:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	    	for(int i=16;i<24;i++)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	3301      	adds	r3, #1
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2b17      	cmp	r3, #23
 8001176:	ddee      	ble.n	8001156 <ASSI_Set_Yellow+0x62>
	for(int j=0;j<Pixel_NUM;j++)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3301      	adds	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2b3f      	cmp	r3, #63	@ 0x3f
 8001182:	ddbd      	ble.n	8001100 <ASSI_Set_Yellow+0xc>
	    	}
	    }
	 RGB_Flush();
 8001184:	f7ff ff36 	bl	8000ff4 <RGB_Flush>

}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2000023c 	.word	0x2000023c

08001194 <ASSI_OFF>:
void ASSI_OFF(void)//无人系统指示灯熄灭
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	 blink_enabled=0;
 8001198:	4b03      	ldr	r3, [pc, #12]	@ (80011a8 <ASSI_OFF+0x14>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
	 ASSI_Set_Black();
 800119e:	f7ff ff31 	bl	8001004 <ASSI_Set_Black>

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200000d6 	.word	0x200000d6

080011ac <HAL_TIM_PeriodElapsedCallback>:
{
	blink_enabled=2;
}
//TIM中断的重写
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)//控制ASSI闪烁
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a26      	ldr	r2, [pc, #152]	@ (8001254 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d135      	bne.n	800122a <HAL_TIM_PeriodElapsedCallback+0x7e>
	{
		if(blink_enabled==1)//蓝灯闪烁
 80011be:	4b26      	ldr	r3, [pc, #152]	@ (8001258 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d115      	bne.n	80011f4 <HAL_TIM_PeriodElapsedCallback+0x48>
		{
			led_state ^= 1;
 80011c8:	4b24      	ldr	r3, [pc, #144]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f083 0301 	eor.w	r3, r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b21      	ldr	r3, [pc, #132]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80011d6:	701a      	strb	r2, [r3, #0]
		    if(led_state)
 80011d8:	4b20      	ldr	r3, [pc, #128]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_TIM_PeriodElapsedCallback+0x3a>
		    {
		    	 ASSI_Set_Blue();
 80011e2:	f7ff ff37 	bl	8001054 <ASSI_Set_Blue>
		    }
		    if(!led_state)
 80011e6:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <HAL_TIM_PeriodElapsedCallback+0x48>
		    {
		    	 ASSI_Set_Black();
 80011f0:	f7ff ff08 	bl	8001004 <ASSI_Set_Black>
		    }

		}
		if(blink_enabled==2)//黄灯闪烁
 80011f4:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d115      	bne.n	800122a <HAL_TIM_PeriodElapsedCallback+0x7e>
		{
		    led_state ^= 1;
 80011fe:	4b17      	ldr	r3, [pc, #92]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f083 0301 	eor.w	r3, r3, #1
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b14      	ldr	r3, [pc, #80]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800120c:	701a      	strb	r2, [r3, #0]
		    if(led_state)
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_TIM_PeriodElapsedCallback+0x70>
		   	 {
		   		  ASSI_Set_Yellow();
 8001218:	f7ff ff6c 	bl	80010f4 <ASSI_Set_Yellow>
		     }
		    if(!led_state)
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_TIM_PeriodElapsedCallback+0x7e>
		     {
		   		  ASSI_Set_Black();
 8001226:	f7ff feed 	bl	8001004 <ASSI_Set_Black>
		     }
		}
	}
	if(htim->Instance == TIM4)//发送CAN消息
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a0c      	ldr	r2, [pc, #48]	@ (8001260 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d10b      	bne.n	800124c <HAL_TIM_PeriodElapsedCallback+0xa0>
	{
		if(AS_State==AS_Emergency)
 8001234:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b03      	cmp	r3, #3
 800123a:	d101      	bne.n	8001240 <HAL_TIM_PeriodElapsedCallback+0x94>
		{
			CAN_Send_AS_Emergency();
 800123c:	f7ff fe42 	bl	8000ec4 <CAN_Send_AS_Emergency>
		}
		if(EBS_Able_State==EBS_Disable)
 8001240:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d101      	bne.n	800124c <HAL_TIM_PeriodElapsedCallback+0xa0>
		{
			CAN_Send_EBS_Disable();
 8001248:	f7ff fe45 	bl	8000ed6 <CAN_Send_EBS_Disable>
		}
	}
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40000400 	.word	0x40000400
 8001258:	200000d6 	.word	0x200000d6
 800125c:	200000d7 	.word	0x200000d7
 8001260:	40000800 	.word	0x40000800
 8001264:	200000d5 	.word	0x200000d5
 8001268:	200000d4 	.word	0x200000d4

0800126c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800126c:	f7ff fb1a 	bl	80008a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001270:	480b      	ldr	r0, [pc, #44]	@ (80012a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001272:	490c      	ldr	r1, [pc, #48]	@ (80012a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001274:	4a0c      	ldr	r2, [pc, #48]	@ (80012a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001278:	e002      	b.n	8001280 <LoopCopyDataInit>

0800127a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800127c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127e:	3304      	adds	r3, #4

08001280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001284:	d3f9      	bcc.n	800127a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001286:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001288:	4c09      	ldr	r4, [pc, #36]	@ (80012b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800128c:	e001      	b.n	8001292 <LoopFillZerobss>

0800128e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001290:	3204      	adds	r2, #4

08001292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001294:	d3fb      	bcc.n	800128e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001296:	f003 fefd 	bl	8005094 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800129a:	f7ff f9e9 	bl	8000670 <main>
  bx lr
 800129e:	4770      	bx	lr
  ldr r0, =_sdata
 80012a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012a8:	08005178 	.word	0x08005178
  ldr r2, =_sbss
 80012ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012b0:	20000e70 	.word	0x20000e70

080012b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <ADC1_2_IRQHandler>
	...

080012b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012bc:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <HAL_Init+0x28>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a07      	ldr	r2, [pc, #28]	@ (80012e0 <HAL_Init+0x28>)
 80012c2:	f043 0310 	orr.w	r3, r3, #16
 80012c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f001 f975 	bl	80025b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ce:	200f      	movs	r0, #15
 80012d0:	f000 f808 	bl	80012e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d4:	f7ff fa58 	bl	8000788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40022000 	.word	0x40022000

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_InitTick+0x54>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <HAL_InitTick+0x58>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f001 f98d 	bl	8002622 <HAL_SYSTICK_Config>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00e      	b.n	8001330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d80a      	bhi.n	800132e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f001 f955 	bl	80025ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001324:	4a06      	ldr	r2, [pc, #24]	@ (8001340 <HAL_InitTick+0x5c>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000000 	.word	0x20000000
 800133c:	20000008 	.word	0x20000008
 8001340:	20000004 	.word	0x20000004

08001344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <HAL_IncTick+0x1c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <HAL_IncTick+0x20>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a03      	ldr	r2, [pc, #12]	@ (8001364 <HAL_IncTick+0x20>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	20000008 	.word	0x20000008
 8001364:	20000e6c 	.word	0x20000e6c

08001368 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b02      	ldr	r3, [pc, #8]	@ (8001378 <HAL_GetTick+0x10>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	20000e6c 	.word	0x20000e6c

0800137c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e0be      	b.n	800151c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d109      	bne.n	80013c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7fe ff32 	bl	8000224 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f9ab 	bl	800171c <ADC_ConversionStop_Disable>
 80013c6:	4603      	mov	r3, r0
 80013c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f040 8099 	bne.w	800150a <HAL_ADC_Init+0x18e>
 80013d8:	7dfb      	ldrb	r3, [r7, #23]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f040 8095 	bne.w	800150a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013e8:	f023 0302 	bic.w	r3, r3, #2
 80013ec:	f043 0202 	orr.w	r2, r3, #2
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7b1b      	ldrb	r3, [r3, #12]
 8001402:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001404:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	4313      	orrs	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001414:	d003      	beq.n	800141e <HAL_ADC_Init+0xa2>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d102      	bne.n	8001424 <HAL_ADC_Init+0xa8>
 800141e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001422:	e000      	b.n	8001426 <HAL_ADC_Init+0xaa>
 8001424:	2300      	movs	r3, #0
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7d1b      	ldrb	r3, [r3, #20]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d119      	bne.n	8001468 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	7b1b      	ldrb	r3, [r3, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d109      	bne.n	8001450 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	3b01      	subs	r3, #1
 8001442:	035a      	lsls	r2, r3, #13
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	e00b      	b.n	8001468 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001454:	f043 0220 	orr.w	r2, r3, #32
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001460:	f043 0201 	orr.w	r2, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	430a      	orrs	r2, r1
 800147a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	4b28      	ldr	r3, [pc, #160]	@ (8001524 <HAL_ADC_Init+0x1a8>)
 8001484:	4013      	ands	r3, r2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	68b9      	ldr	r1, [r7, #8]
 800148c:	430b      	orrs	r3, r1
 800148e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001498:	d003      	beq.n	80014a2 <HAL_ADC_Init+0x126>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d104      	bne.n	80014ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	051b      	lsls	r3, r3, #20
 80014aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	430a      	orrs	r2, r1
 80014be:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <HAL_ADC_Init+0x1ac>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d10b      	bne.n	80014e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014da:	f023 0303 	bic.w	r3, r3, #3
 80014de:	f043 0201 	orr.w	r2, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014e6:	e018      	b.n	800151a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ec:	f023 0312 	bic.w	r3, r3, #18
 80014f0:	f043 0210 	orr.w	r2, r3, #16
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fc:	f043 0201 	orr.w	r2, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001508:	e007      	b.n	800151a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150e:	f043 0210 	orr.w	r2, r3, #16
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800151a:	7dfb      	ldrb	r3, [r7, #23]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	ffe1f7fd 	.word	0xffe1f7fd
 8001528:	ff1f0efe 	.word	0xff1f0efe

0800152c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_ADC_ConfigChannel+0x20>
 8001548:	2302      	movs	r3, #2
 800154a:	e0dc      	b.n	8001706 <HAL_ADC_ConfigChannel+0x1da>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b06      	cmp	r3, #6
 800155a:	d81c      	bhi.n	8001596 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	3b05      	subs	r3, #5
 800156e:	221f      	movs	r2, #31
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	4019      	ands	r1, r3
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	3b05      	subs	r3, #5
 8001588:	fa00 f203 	lsl.w	r2, r0, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	635a      	str	r2, [r3, #52]	@ 0x34
 8001594:	e03c      	b.n	8001610 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b0c      	cmp	r3, #12
 800159c:	d81c      	bhi.n	80015d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	3b23      	subs	r3, #35	@ 0x23
 80015b0:	221f      	movs	r2, #31
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	4019      	ands	r1, r3
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	3b23      	subs	r3, #35	@ 0x23
 80015ca:	fa00 f203 	lsl.w	r2, r0, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80015d6:	e01b      	b.n	8001610 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	3b41      	subs	r3, #65	@ 0x41
 80015ea:	221f      	movs	r2, #31
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	4019      	ands	r1, r3
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	6818      	ldr	r0, [r3, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	3b41      	subs	r3, #65	@ 0x41
 8001604:	fa00 f203 	lsl.w	r2, r0, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b09      	cmp	r3, #9
 8001616:	d91c      	bls.n	8001652 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68d9      	ldr	r1, [r3, #12]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	3b1e      	subs	r3, #30
 800162a:	2207      	movs	r2, #7
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	4019      	ands	r1, r3
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	6898      	ldr	r0, [r3, #8]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	3b1e      	subs	r3, #30
 8001644:	fa00 f203 	lsl.w	r2, r0, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	e019      	b.n	8001686 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6919      	ldr	r1, [r3, #16]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	2207      	movs	r2, #7
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	4019      	ands	r1, r3
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	6898      	ldr	r0, [r3, #8]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4613      	mov	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4413      	add	r3, r2
 800167a:	fa00 f203 	lsl.w	r2, r0, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b10      	cmp	r3, #16
 800168c:	d003      	beq.n	8001696 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001692:	2b11      	cmp	r3, #17
 8001694:	d132      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a1d      	ldr	r2, [pc, #116]	@ (8001710 <HAL_ADC_ConfigChannel+0x1e4>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d125      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d126      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80016bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b10      	cmp	r3, #16
 80016c4:	d11a      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016c6:	4b13      	ldr	r3, [pc, #76]	@ (8001714 <HAL_ADC_ConfigChannel+0x1e8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a13      	ldr	r2, [pc, #76]	@ (8001718 <HAL_ADC_ConfigChannel+0x1ec>)
 80016cc:	fba2 2303 	umull	r2, r3, r2, r3
 80016d0:	0c9a      	lsrs	r2, r3, #18
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016dc:	e002      	b.n	80016e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f9      	bne.n	80016de <HAL_ADC_ConfigChannel+0x1b2>
 80016ea:	e007      	b.n	80016fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f0:	f043 0220 	orr.w	r2, r3, #32
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	40012400 	.word	0x40012400
 8001714:	20000000 	.word	0x20000000
 8001718:	431bde83 	.word	0x431bde83

0800171c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b01      	cmp	r3, #1
 8001734:	d12e      	bne.n	8001794 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0201 	bic.w	r2, r2, #1
 8001744:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001746:	f7ff fe0f 	bl	8001368 <HAL_GetTick>
 800174a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800174c:	e01b      	b.n	8001786 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800174e:	f7ff fe0b 	bl	8001368 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d914      	bls.n	8001786 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b01      	cmp	r3, #1
 8001768:	d10d      	bne.n	8001786 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176e:	f043 0210 	orr.w	r2, r3, #16
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800177a:	f043 0201 	orr.w	r2, r3, #1
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e007      	b.n	8001796 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b01      	cmp	r3, #1
 8001792:	d0dc      	beq.n	800174e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0ed      	b.n	800198c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7fe fdbb 	bl	8000338 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 0201 	orr.w	r2, r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017d2:	f7ff fdc9 	bl	8001368 <HAL_GetTick>
 80017d6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017d8:	e012      	b.n	8001800 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017da:	f7ff fdc5 	bl	8001368 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b0a      	cmp	r3, #10
 80017e6:	d90b      	bls.n	8001800 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ec:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2205      	movs	r2, #5
 80017f8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0c5      	b.n	800198c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0e5      	beq.n	80017da <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0202 	bic.w	r2, r2, #2
 800181c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800181e:	f7ff fda3 	bl	8001368 <HAL_GetTick>
 8001822:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001824:	e012      	b.n	800184c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001826:	f7ff fd9f 	bl	8001368 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b0a      	cmp	r3, #10
 8001832:	d90b      	bls.n	800184c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001838:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2205      	movs	r2, #5
 8001844:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e09f      	b.n	800198c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1e5      	bne.n	8001826 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	7e1b      	ldrb	r3, [r3, #24]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d108      	bne.n	8001874 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	e007      	b.n	8001884 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001882:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7e5b      	ldrb	r3, [r3, #25]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d108      	bne.n	800189e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	e007      	b.n	80018ae <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	7e9b      	ldrb	r3, [r3, #26]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d108      	bne.n	80018c8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f042 0220 	orr.w	r2, r2, #32
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	e007      	b.n	80018d8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0220 	bic.w	r2, r2, #32
 80018d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7edb      	ldrb	r3, [r3, #27]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d108      	bne.n	80018f2 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0210 	bic.w	r2, r2, #16
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	e007      	b.n	8001902 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f042 0210 	orr.w	r2, r2, #16
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7f1b      	ldrb	r3, [r3, #28]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d108      	bne.n	800191c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f042 0208 	orr.w	r2, r2, #8
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	e007      	b.n	800192c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0208 	bic.w	r2, r2, #8
 800192a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7f5b      	ldrb	r3, [r3, #29]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d108      	bne.n	8001946 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0204 	orr.w	r2, r2, #4
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	e007      	b.n	8001956 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0204 	bic.w	r2, r2, #4
 8001954:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	ea42 0103 	orr.w	r1, r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	1e5a      	subs	r2, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019aa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80019ac:	7cfb      	ldrb	r3, [r7, #19]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d003      	beq.n	80019ba <HAL_CAN_ConfigFilter+0x26>
 80019b2:	7cfb      	ldrb	r3, [r7, #19]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	f040 80aa 	bne.w	8001b0e <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019c0:	f043 0201 	orr.w	r2, r3, #1
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	2201      	movs	r2, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	401a      	ands	r2, r3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d123      	bne.n	8001a3c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a16:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3248      	adds	r2, #72	@ 0x48
 8001a1c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a30:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a32:	6979      	ldr	r1, [r7, #20]
 8001a34:	3348      	adds	r3, #72	@ 0x48
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d122      	bne.n	8001a8a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a64:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3248      	adds	r2, #72	@ 0x48
 8001a6a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a7e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a80:	6979      	ldr	r1, [r7, #20]
 8001a82:	3348      	adds	r3, #72	@ 0x48
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	440b      	add	r3, r1
 8001a88:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001aa4:	e007      	b.n	8001ab6 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	401a      	ands	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001ad0:	e007      	b.n	8001ae2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	431a      	orrs	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d107      	bne.n	8001afa <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b00:	f023 0201 	bic.w	r2, r3, #1
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e006      	b.n	8001b1c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b12:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
  }
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d12e      	bne.n	8001b98 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0201 	bic.w	r2, r2, #1
 8001b50:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b52:	f7ff fc09 	bl	8001368 <HAL_GetTick>
 8001b56:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b58:	e012      	b.n	8001b80 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b5a:	f7ff fc05 	bl	8001368 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b0a      	cmp	r3, #10
 8001b66:	d90b      	bls.n	8001b80 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2205      	movs	r2, #5
 8001b78:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e012      	b.n	8001ba6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1e5      	bne.n	8001b5a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	e006      	b.n	8001ba6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
  }
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b089      	sub	sp, #36	@ 0x24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bcc:	7ffb      	ldrb	r3, [r7, #31]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d003      	beq.n	8001bda <HAL_CAN_AddTxMessage+0x2c>
 8001bd2:	7ffb      	ldrb	r3, [r7, #31]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	f040 80ad 	bne.w	8001d34 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10a      	bne.n	8001bfa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d105      	bne.n	8001bfa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 8095 	beq.w	8001d24 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	0e1b      	lsrs	r3, r3, #24
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c04:	2201      	movs	r2, #1
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10d      	bne.n	8001c32 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c20:	68f9      	ldr	r1, [r7, #12]
 8001c22:	6809      	ldr	r1, [r1, #0]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3318      	adds	r3, #24
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	440b      	add	r3, r1
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	e00f      	b.n	8001c52 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c3c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c42:	68f9      	ldr	r1, [r7, #12]
 8001c44:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c46:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	3318      	adds	r3, #24
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	440b      	add	r3, r1
 8001c50:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6819      	ldr	r1, [r3, #0]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3318      	adds	r3, #24
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	440b      	add	r3, r1
 8001c62:	3304      	adds	r3, #4
 8001c64:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	7d1b      	ldrb	r3, [r3, #20]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d111      	bne.n	8001c92 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3318      	adds	r3, #24
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	4413      	add	r3, r2
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	6811      	ldr	r1, [r2, #0]
 8001c82:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3318      	adds	r3, #24
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	440b      	add	r3, r1
 8001c8e:	3304      	adds	r3, #4
 8001c90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3307      	adds	r3, #7
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	061a      	lsls	r2, r3, #24
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3306      	adds	r3, #6
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	041b      	lsls	r3, r3, #16
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3305      	adds	r3, #5
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	4313      	orrs	r3, r2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	3204      	adds	r2, #4
 8001cb2:	7812      	ldrb	r2, [r2, #0]
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	6811      	ldr	r1, [r2, #0]
 8001cba:	ea43 0200 	orr.w	r2, r3, r0
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001cc8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3303      	adds	r3, #3
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	061a      	lsls	r2, r3, #24
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	041b      	lsls	r3, r3, #16
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	7812      	ldrb	r2, [r2, #0]
 8001cea:	4610      	mov	r0, r2
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	6811      	ldr	r1, [r2, #0]
 8001cf0:	ea43 0200 	orr.w	r2, r3, r0
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	440b      	add	r3, r1
 8001cfa:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001cfe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	3318      	adds	r3, #24
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	4413      	add	r3, r2
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	6811      	ldr	r1, [r2, #0]
 8001d12:	f043 0201 	orr.w	r2, r3, #1
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3318      	adds	r3, #24
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	440b      	add	r3, r1
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	e00e      	b.n	8001d42 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d28:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e006      	b.n	8001d42 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d38:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
  }
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3724      	adds	r7, #36	@ 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d60:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d62:	7dfb      	ldrb	r3, [r7, #23]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d003      	beq.n	8001d70 <HAL_CAN_GetRxMessage+0x24>
 8001d68:	7dfb      	ldrb	r3, [r7, #23]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	f040 8103 	bne.w	8001f76 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10e      	bne.n	8001d94 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d116      	bne.n	8001db2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d88:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0f7      	b.n	8001f84 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d107      	bne.n	8001db2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e0e8      	b.n	8001f84 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	331b      	adds	r3, #27
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	4413      	add	r3, r2
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0204 	and.w	r2, r3, #4
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10c      	bne.n	8001dea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	331b      	adds	r3, #27
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	4413      	add	r3, r2
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	0d5b      	lsrs	r3, r3, #21
 8001de0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e00b      	b.n	8001e02 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	331b      	adds	r3, #27
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	4413      	add	r3, r2
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	08db      	lsrs	r3, r3, #3
 8001dfa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	331b      	adds	r3, #27
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	4413      	add	r3, r2
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0202 	and.w	r2, r3, #2
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	331b      	adds	r3, #27
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	4413      	add	r3, r2
 8001e24:	3304      	adds	r3, #4
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2208      	movs	r2, #8
 8001e34:	611a      	str	r2, [r3, #16]
 8001e36:	e00b      	b.n	8001e50 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	331b      	adds	r3, #27
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	4413      	add	r3, r2
 8001e44:	3304      	adds	r3, #4
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 020f 	and.w	r2, r3, #15
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	331b      	adds	r3, #27
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	0a1b      	lsrs	r3, r3, #8
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	331b      	adds	r3, #27
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	4413      	add	r3, r2
 8001e74:	3304      	adds	r3, #4
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	0c1b      	lsrs	r3, r3, #16
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	0a1a      	lsrs	r2, r3, #8
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	0c1a      	lsrs	r2, r3, #16
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	0e1a      	lsrs	r2, r3, #24
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	3303      	adds	r3, #3
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0a1a      	lsrs	r2, r3, #8
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	3305      	adds	r3, #5
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	0c1a      	lsrs	r2, r3, #16
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	3306      	adds	r3, #6
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	0e1a      	lsrs	r2, r3, #24
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	3307      	adds	r3, #7
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d108      	bne.n	8001f62 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0220 	orr.w	r2, r2, #32
 8001f5e:	60da      	str	r2, [r3, #12]
 8001f60:	e007      	b.n	8001f72 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0220 	orr.w	r2, r2, #32
 8001f70:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e006      	b.n	8001f84 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
  }
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	371c      	adds	r7, #28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b085      	sub	sp, #20
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f9e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d002      	beq.n	8001fac <HAL_CAN_ActivateNotification+0x1e>
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d109      	bne.n	8001fc0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6959      	ldr	r1, [r3, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	e006      	b.n	8001fce <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
  }
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	@ 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d07c      	beq.n	8002118 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d023      	beq.n	8002070 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2201      	movs	r2, #1
 800202e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f983 	bl	8002346 <HAL_CAN_TxMailbox0CompleteCallback>
 8002040:	e016      	b.n	8002070 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d004      	beq.n	8002056 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002052:	627b      	str	r3, [r7, #36]	@ 0x24
 8002054:	e00c      	b.n	8002070 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d004      	beq.n	800206a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24
 8002068:	e002      	b.n	8002070 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f986 	bl	800237c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d024      	beq.n	80020c4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002082:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f962 	bl	8002358 <HAL_CAN_TxMailbox1CompleteCallback>
 8002094:	e016      	b.n	80020c4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800209c:	2b00      	cmp	r3, #0
 800209e:	d004      	beq.n	80020aa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80020a8:	e00c      	b.n	80020c4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d004      	beq.n	80020be <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80020b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80020bc:	e002      	b.n	80020c4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f965 	bl	800238e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d024      	beq.n	8002118 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80020d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f941 	bl	800236a <HAL_CAN_TxMailbox2CompleteCallback>
 80020e8:	e016      	b.n	8002118 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d004      	beq.n	80020fe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80020f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80020fc:	e00c      	b.n	8002118 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800210e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002110:	e002      	b.n	8002118 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f944 	bl	80023a0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00c      	beq.n	800213c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2210      	movs	r2, #16
 800213a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00b      	beq.n	800215e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d006      	beq.n	800215e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2208      	movs	r2, #8
 8002156:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f92a 	bl	80023b2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d009      	beq.n	800217c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7fe fde0 	bl	8000d3c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00c      	beq.n	80021a0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b00      	cmp	r3, #0
 800218e:	d007      	beq.n	80021a0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002196:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2210      	movs	r2, #16
 800219e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00b      	beq.n	80021c2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2208      	movs	r2, #8
 80021ba:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f90a 	bl	80023d6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d009      	beq.n	80021e0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f8f2 	bl	80023c4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00b      	beq.n	8002202 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d006      	beq.n	8002202 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2210      	movs	r2, #16
 80021fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f8f3 	bl	80023e8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00b      	beq.n	8002224 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d006      	beq.n	8002224 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2208      	movs	r2, #8
 800221c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f8eb 	bl	80023fa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d07b      	beq.n	8002326 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d072      	beq.n	800231e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223e:	2b00      	cmp	r3, #0
 8002240:	d008      	beq.n	8002254 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800225a:	2b00      	cmp	r3, #0
 800225c:	d008      	beq.n	8002270 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226a:	f043 0302 	orr.w	r3, r3, #2
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002276:	2b00      	cmp	r3, #0
 8002278:	d008      	beq.n	800228c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002286:	f043 0304 	orr.w	r3, r3, #4
 800228a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002292:	2b00      	cmp	r3, #0
 8002294:	d043      	beq.n	800231e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800229c:	2b00      	cmp	r3, #0
 800229e:	d03e      	beq.n	800231e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022a6:	2b60      	cmp	r3, #96	@ 0x60
 80022a8:	d02b      	beq.n	8002302 <HAL_CAN_IRQHandler+0x32a>
 80022aa:	2b60      	cmp	r3, #96	@ 0x60
 80022ac:	d82e      	bhi.n	800230c <HAL_CAN_IRQHandler+0x334>
 80022ae:	2b50      	cmp	r3, #80	@ 0x50
 80022b0:	d022      	beq.n	80022f8 <HAL_CAN_IRQHandler+0x320>
 80022b2:	2b50      	cmp	r3, #80	@ 0x50
 80022b4:	d82a      	bhi.n	800230c <HAL_CAN_IRQHandler+0x334>
 80022b6:	2b40      	cmp	r3, #64	@ 0x40
 80022b8:	d019      	beq.n	80022ee <HAL_CAN_IRQHandler+0x316>
 80022ba:	2b40      	cmp	r3, #64	@ 0x40
 80022bc:	d826      	bhi.n	800230c <HAL_CAN_IRQHandler+0x334>
 80022be:	2b30      	cmp	r3, #48	@ 0x30
 80022c0:	d010      	beq.n	80022e4 <HAL_CAN_IRQHandler+0x30c>
 80022c2:	2b30      	cmp	r3, #48	@ 0x30
 80022c4:	d822      	bhi.n	800230c <HAL_CAN_IRQHandler+0x334>
 80022c6:	2b10      	cmp	r3, #16
 80022c8:	d002      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x2f8>
 80022ca:	2b20      	cmp	r3, #32
 80022cc:	d005      	beq.n	80022da <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80022ce:	e01d      	b.n	800230c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d2:	f043 0308 	orr.w	r3, r3, #8
 80022d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022d8:	e019      	b.n	800230e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80022da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022dc:	f043 0310 	orr.w	r3, r3, #16
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022e2:	e014      	b.n	800230e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80022e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e6:	f043 0320 	orr.w	r3, r3, #32
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022ec:	e00f      	b.n	800230e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022f6:	e00a      	b.n	800230e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002300:	e005      	b.n	800230e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800230a:	e000      	b.n	800230e <HAL_CAN_IRQHandler+0x336>
            break;
 800230c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699a      	ldr	r2, [r3, #24]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800231c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2204      	movs	r2, #4
 8002324:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f867 	bl	800240c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800233e:	bf00      	nop
 8002340:	3728      	adds	r7, #40	@ 0x28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr

0800236a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr

0800238e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr

080023b2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
	...

08002420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002430:	4b0c      	ldr	r3, [pc, #48]	@ (8002464 <__NVIC_SetPriorityGrouping+0x44>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800243c:	4013      	ands	r3, r2
 800243e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002448:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800244c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002452:	4a04      	ldr	r2, [pc, #16]	@ (8002464 <__NVIC_SetPriorityGrouping+0x44>)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	60d3      	str	r3, [r2, #12]
}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800246c:	4b04      	ldr	r3, [pc, #16]	@ (8002480 <__NVIC_GetPriorityGrouping+0x18>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	f003 0307 	and.w	r3, r3, #7
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	2b00      	cmp	r3, #0
 8002494:	db0b      	blt.n	80024ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	f003 021f 	and.w	r2, r3, #31
 800249c:	4906      	ldr	r1, [pc, #24]	@ (80024b8 <__NVIC_EnableIRQ+0x34>)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	2001      	movs	r0, #1
 80024a6:	fa00 f202 	lsl.w	r2, r0, r2
 80024aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	e000e100 	.word	0xe000e100

080024bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	db0a      	blt.n	80024e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	490c      	ldr	r1, [pc, #48]	@ (8002508 <__NVIC_SetPriority+0x4c>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	0112      	lsls	r2, r2, #4
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	440b      	add	r3, r1
 80024e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e4:	e00a      	b.n	80024fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4908      	ldr	r1, [pc, #32]	@ (800250c <__NVIC_SetPriority+0x50>)
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	3b04      	subs	r3, #4
 80024f4:	0112      	lsls	r2, r2, #4
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	440b      	add	r3, r1
 80024fa:	761a      	strb	r2, [r3, #24]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000e100 	.word	0xe000e100
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	@ 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f1c3 0307 	rsb	r3, r3, #7
 800252a:	2b04      	cmp	r3, #4
 800252c:	bf28      	it	cs
 800252e:	2304      	movcs	r3, #4
 8002530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3304      	adds	r3, #4
 8002536:	2b06      	cmp	r3, #6
 8002538:	d902      	bls.n	8002540 <NVIC_EncodePriority+0x30>
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3b03      	subs	r3, #3
 800253e:	e000      	b.n	8002542 <NVIC_EncodePriority+0x32>
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002544:	f04f 32ff 	mov.w	r2, #4294967295
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43da      	mvns	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	401a      	ands	r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002558:	f04f 31ff 	mov.w	r1, #4294967295
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	43d9      	mvns	r1, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	4313      	orrs	r3, r2
         );
}
 800256a:	4618      	mov	r0, r3
 800256c:	3724      	adds	r7, #36	@ 0x24
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3b01      	subs	r3, #1
 8002580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002584:	d301      	bcc.n	800258a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002586:	2301      	movs	r3, #1
 8002588:	e00f      	b.n	80025aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800258a:	4a0a      	ldr	r2, [pc, #40]	@ (80025b4 <SysTick_Config+0x40>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002592:	210f      	movs	r1, #15
 8002594:	f04f 30ff 	mov.w	r0, #4294967295
 8002598:	f7ff ff90 	bl	80024bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800259c:	4b05      	ldr	r3, [pc, #20]	@ (80025b4 <SysTick_Config+0x40>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025a2:	4b04      	ldr	r3, [pc, #16]	@ (80025b4 <SysTick_Config+0x40>)
 80025a4:	2207      	movs	r2, #7
 80025a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	e000e010 	.word	0xe000e010

080025b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ff2d 	bl	8002420 <__NVIC_SetPriorityGrouping>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b086      	sub	sp, #24
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	4603      	mov	r3, r0
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025e0:	f7ff ff42 	bl	8002468 <__NVIC_GetPriorityGrouping>
 80025e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	6978      	ldr	r0, [r7, #20]
 80025ec:	f7ff ff90 	bl	8002510 <NVIC_EncodePriority>
 80025f0:	4602      	mov	r2, r0
 80025f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff5f 	bl	80024bc <__NVIC_SetPriority>
}
 80025fe:	bf00      	nop
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	4603      	mov	r3, r0
 800260e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff35 	bl	8002484 <__NVIC_EnableIRQ>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff ffa2 	bl	8002574 <SysTick_Config>
 8002630:	4603      	mov	r3, r0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e043      	b.n	80026da <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	4b22      	ldr	r3, [pc, #136]	@ (80026e4 <HAL_DMA_Init+0xa8>)
 800265a:	4413      	add	r3, r2
 800265c:	4a22      	ldr	r2, [pc, #136]	@ (80026e8 <HAL_DMA_Init+0xac>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	091b      	lsrs	r3, r3, #4
 8002664:	009a      	lsls	r2, r3, #2
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a1f      	ldr	r2, [pc, #124]	@ (80026ec <HAL_DMA_Init+0xb0>)
 800266e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002686:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800268a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002694:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr
 80026e4:	bffdfff8 	.word	0xbffdfff8
 80026e8:	cccccccd 	.word	0xcccccccd
 80026ec:	40020000 	.word	0x40020000

080026f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_DMA_Start_IT+0x20>
 800270c:	2302      	movs	r3, #2
 800270e:	e04b      	b.n	80027a8 <HAL_DMA_Start_IT+0xb8>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d13a      	bne.n	800279a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0201 	bic.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f937 	bl	80029bc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002752:	2b00      	cmp	r3, #0
 8002754:	d008      	beq.n	8002768 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 020e 	orr.w	r2, r2, #14
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	e00f      	b.n	8002788 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0204 	bic.w	r2, r2, #4
 8002776:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 020a 	orr.w	r2, r2, #10
 8002786:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e005      	b.n	80027a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027a2:	2302      	movs	r3, #2
 80027a4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	2204      	movs	r2, #4
 80027ce:	409a      	lsls	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d04f      	beq.n	8002878 <HAL_DMA_IRQHandler+0xc8>
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d04a      	beq.n	8002878 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0320 	and.w	r3, r3, #32
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d107      	bne.n	8002800 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0204 	bic.w	r2, r2, #4
 80027fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a66      	ldr	r2, [pc, #408]	@ (80029a0 <HAL_DMA_IRQHandler+0x1f0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d029      	beq.n	800285e <HAL_DMA_IRQHandler+0xae>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a65      	ldr	r2, [pc, #404]	@ (80029a4 <HAL_DMA_IRQHandler+0x1f4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d022      	beq.n	800285a <HAL_DMA_IRQHandler+0xaa>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a63      	ldr	r2, [pc, #396]	@ (80029a8 <HAL_DMA_IRQHandler+0x1f8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d01a      	beq.n	8002854 <HAL_DMA_IRQHandler+0xa4>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a62      	ldr	r2, [pc, #392]	@ (80029ac <HAL_DMA_IRQHandler+0x1fc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d012      	beq.n	800284e <HAL_DMA_IRQHandler+0x9e>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a60      	ldr	r2, [pc, #384]	@ (80029b0 <HAL_DMA_IRQHandler+0x200>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00a      	beq.n	8002848 <HAL_DMA_IRQHandler+0x98>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a5f      	ldr	r2, [pc, #380]	@ (80029b4 <HAL_DMA_IRQHandler+0x204>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d102      	bne.n	8002842 <HAL_DMA_IRQHandler+0x92>
 800283c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002840:	e00e      	b.n	8002860 <HAL_DMA_IRQHandler+0xb0>
 8002842:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002846:	e00b      	b.n	8002860 <HAL_DMA_IRQHandler+0xb0>
 8002848:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800284c:	e008      	b.n	8002860 <HAL_DMA_IRQHandler+0xb0>
 800284e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002852:	e005      	b.n	8002860 <HAL_DMA_IRQHandler+0xb0>
 8002854:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002858:	e002      	b.n	8002860 <HAL_DMA_IRQHandler+0xb0>
 800285a:	2340      	movs	r3, #64	@ 0x40
 800285c:	e000      	b.n	8002860 <HAL_DMA_IRQHandler+0xb0>
 800285e:	2304      	movs	r3, #4
 8002860:	4a55      	ldr	r2, [pc, #340]	@ (80029b8 <HAL_DMA_IRQHandler+0x208>)
 8002862:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8094 	beq.w	8002996 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002876:	e08e      	b.n	8002996 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	2202      	movs	r2, #2
 800287e:	409a      	lsls	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d056      	beq.n	8002936 <HAL_DMA_IRQHandler+0x186>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d051      	beq.n	8002936 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10b      	bne.n	80028b8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 020a 	bic.w	r2, r2, #10
 80028ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a38      	ldr	r2, [pc, #224]	@ (80029a0 <HAL_DMA_IRQHandler+0x1f0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d029      	beq.n	8002916 <HAL_DMA_IRQHandler+0x166>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a37      	ldr	r2, [pc, #220]	@ (80029a4 <HAL_DMA_IRQHandler+0x1f4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d022      	beq.n	8002912 <HAL_DMA_IRQHandler+0x162>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a35      	ldr	r2, [pc, #212]	@ (80029a8 <HAL_DMA_IRQHandler+0x1f8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d01a      	beq.n	800290c <HAL_DMA_IRQHandler+0x15c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a34      	ldr	r2, [pc, #208]	@ (80029ac <HAL_DMA_IRQHandler+0x1fc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d012      	beq.n	8002906 <HAL_DMA_IRQHandler+0x156>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a32      	ldr	r2, [pc, #200]	@ (80029b0 <HAL_DMA_IRQHandler+0x200>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00a      	beq.n	8002900 <HAL_DMA_IRQHandler+0x150>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a31      	ldr	r2, [pc, #196]	@ (80029b4 <HAL_DMA_IRQHandler+0x204>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d102      	bne.n	80028fa <HAL_DMA_IRQHandler+0x14a>
 80028f4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80028f8:	e00e      	b.n	8002918 <HAL_DMA_IRQHandler+0x168>
 80028fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028fe:	e00b      	b.n	8002918 <HAL_DMA_IRQHandler+0x168>
 8002900:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002904:	e008      	b.n	8002918 <HAL_DMA_IRQHandler+0x168>
 8002906:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800290a:	e005      	b.n	8002918 <HAL_DMA_IRQHandler+0x168>
 800290c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002910:	e002      	b.n	8002918 <HAL_DMA_IRQHandler+0x168>
 8002912:	2320      	movs	r3, #32
 8002914:	e000      	b.n	8002918 <HAL_DMA_IRQHandler+0x168>
 8002916:	2302      	movs	r3, #2
 8002918:	4a27      	ldr	r2, [pc, #156]	@ (80029b8 <HAL_DMA_IRQHandler+0x208>)
 800291a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002928:	2b00      	cmp	r3, #0
 800292a:	d034      	beq.n	8002996 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002934:	e02f      	b.n	8002996 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	2208      	movs	r2, #8
 800293c:	409a      	lsls	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d028      	beq.n	8002998 <HAL_DMA_IRQHandler+0x1e8>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d023      	beq.n	8002998 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 020e 	bic.w	r2, r2, #14
 800295e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002968:	2101      	movs	r1, #1
 800296a:	fa01 f202 	lsl.w	r2, r1, r2
 800296e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	2b00      	cmp	r3, #0
 800298c:	d004      	beq.n	8002998 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
    }
  }
  return;
 8002996:	bf00      	nop
 8002998:	bf00      	nop
}
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40020008 	.word	0x40020008
 80029a4:	4002001c 	.word	0x4002001c
 80029a8:	40020030 	.word	0x40020030
 80029ac:	40020044 	.word	0x40020044
 80029b0:	40020058 	.word	0x40020058
 80029b4:	4002006c 	.word	0x4002006c
 80029b8:	40020000 	.word	0x40020000

080029bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d2:	2101      	movs	r1, #1
 80029d4:	fa01 f202 	lsl.w	r2, r1, r2
 80029d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	d108      	bne.n	80029fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029fa:	e007      	b.n	8002a0c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	60da      	str	r2, [r3, #12]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b08b      	sub	sp, #44	@ 0x2c
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a22:	2300      	movs	r3, #0
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2a:	e169      	b.n	8002d00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	f040 8158 	bne.w	8002cfa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4a9a      	ldr	r2, [pc, #616]	@ (8002cb8 <HAL_GPIO_Init+0x2a0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d05e      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a54:	4a98      	ldr	r2, [pc, #608]	@ (8002cb8 <HAL_GPIO_Init+0x2a0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d875      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a5a:	4a98      	ldr	r2, [pc, #608]	@ (8002cbc <HAL_GPIO_Init+0x2a4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d058      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a60:	4a96      	ldr	r2, [pc, #600]	@ (8002cbc <HAL_GPIO_Init+0x2a4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d86f      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a66:	4a96      	ldr	r2, [pc, #600]	@ (8002cc0 <HAL_GPIO_Init+0x2a8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d052      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a6c:	4a94      	ldr	r2, [pc, #592]	@ (8002cc0 <HAL_GPIO_Init+0x2a8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d869      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a72:	4a94      	ldr	r2, [pc, #592]	@ (8002cc4 <HAL_GPIO_Init+0x2ac>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d04c      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a78:	4a92      	ldr	r2, [pc, #584]	@ (8002cc4 <HAL_GPIO_Init+0x2ac>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d863      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a7e:	4a92      	ldr	r2, [pc, #584]	@ (8002cc8 <HAL_GPIO_Init+0x2b0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d046      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a84:	4a90      	ldr	r2, [pc, #576]	@ (8002cc8 <HAL_GPIO_Init+0x2b0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d85d      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a8a:	2b12      	cmp	r3, #18
 8002a8c:	d82a      	bhi.n	8002ae4 <HAL_GPIO_Init+0xcc>
 8002a8e:	2b12      	cmp	r3, #18
 8002a90:	d859      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a92:	a201      	add	r2, pc, #4	@ (adr r2, 8002a98 <HAL_GPIO_Init+0x80>)
 8002a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a98:	08002b13 	.word	0x08002b13
 8002a9c:	08002aed 	.word	0x08002aed
 8002aa0:	08002aff 	.word	0x08002aff
 8002aa4:	08002b41 	.word	0x08002b41
 8002aa8:	08002b47 	.word	0x08002b47
 8002aac:	08002b47 	.word	0x08002b47
 8002ab0:	08002b47 	.word	0x08002b47
 8002ab4:	08002b47 	.word	0x08002b47
 8002ab8:	08002b47 	.word	0x08002b47
 8002abc:	08002b47 	.word	0x08002b47
 8002ac0:	08002b47 	.word	0x08002b47
 8002ac4:	08002b47 	.word	0x08002b47
 8002ac8:	08002b47 	.word	0x08002b47
 8002acc:	08002b47 	.word	0x08002b47
 8002ad0:	08002b47 	.word	0x08002b47
 8002ad4:	08002b47 	.word	0x08002b47
 8002ad8:	08002b47 	.word	0x08002b47
 8002adc:	08002af5 	.word	0x08002af5
 8002ae0:	08002b09 	.word	0x08002b09
 8002ae4:	4a79      	ldr	r2, [pc, #484]	@ (8002ccc <HAL_GPIO_Init+0x2b4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002aea:	e02c      	b.n	8002b46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	623b      	str	r3, [r7, #32]
          break;
 8002af2:	e029      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	3304      	adds	r3, #4
 8002afa:	623b      	str	r3, [r7, #32]
          break;
 8002afc:	e024      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	3308      	adds	r3, #8
 8002b04:	623b      	str	r3, [r7, #32]
          break;
 8002b06:	e01f      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	330c      	adds	r3, #12
 8002b0e:	623b      	str	r3, [r7, #32]
          break;
 8002b10:	e01a      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d102      	bne.n	8002b20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b1a:	2304      	movs	r3, #4
 8002b1c:	623b      	str	r3, [r7, #32]
          break;
 8002b1e:	e013      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d105      	bne.n	8002b34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b28:	2308      	movs	r3, #8
 8002b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	611a      	str	r2, [r3, #16]
          break;
 8002b32:	e009      	b.n	8002b48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b34:	2308      	movs	r3, #8
 8002b36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	615a      	str	r2, [r3, #20]
          break;
 8002b3e:	e003      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b40:	2300      	movs	r3, #0
 8002b42:	623b      	str	r3, [r7, #32]
          break;
 8002b44:	e000      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          break;
 8002b46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2bff      	cmp	r3, #255	@ 0xff
 8002b4c:	d801      	bhi.n	8002b52 <HAL_GPIO_Init+0x13a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	e001      	b.n	8002b56 <HAL_GPIO_Init+0x13e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3304      	adds	r3, #4
 8002b56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2bff      	cmp	r3, #255	@ 0xff
 8002b5c:	d802      	bhi.n	8002b64 <HAL_GPIO_Init+0x14c>
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	e002      	b.n	8002b6a <HAL_GPIO_Init+0x152>
 8002b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b66:	3b08      	subs	r3, #8
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	210f      	movs	r1, #15
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	fa01 f303 	lsl.w	r3, r1, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	6a39      	ldr	r1, [r7, #32]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	431a      	orrs	r2, r3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 80b1 	beq.w	8002cfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b98:	4b4d      	ldr	r3, [pc, #308]	@ (8002cd0 <HAL_GPIO_Init+0x2b8>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	4a4c      	ldr	r2, [pc, #304]	@ (8002cd0 <HAL_GPIO_Init+0x2b8>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6193      	str	r3, [r2, #24]
 8002ba4:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd0 <HAL_GPIO_Init+0x2b8>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bb0:	4a48      	ldr	r2, [pc, #288]	@ (8002cd4 <HAL_GPIO_Init+0x2bc>)
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	089b      	lsrs	r3, r3, #2
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	220f      	movs	r2, #15
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a40      	ldr	r2, [pc, #256]	@ (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d013      	beq.n	8002c04 <HAL_GPIO_Init+0x1ec>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a3f      	ldr	r2, [pc, #252]	@ (8002cdc <HAL_GPIO_Init+0x2c4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00d      	beq.n	8002c00 <HAL_GPIO_Init+0x1e8>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a3e      	ldr	r2, [pc, #248]	@ (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d007      	beq.n	8002bfc <HAL_GPIO_Init+0x1e4>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a3d      	ldr	r2, [pc, #244]	@ (8002ce4 <HAL_GPIO_Init+0x2cc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d101      	bne.n	8002bf8 <HAL_GPIO_Init+0x1e0>
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e006      	b.n	8002c06 <HAL_GPIO_Init+0x1ee>
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	e004      	b.n	8002c06 <HAL_GPIO_Init+0x1ee>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e002      	b.n	8002c06 <HAL_GPIO_Init+0x1ee>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <HAL_GPIO_Init+0x1ee>
 8002c04:	2300      	movs	r3, #0
 8002c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c08:	f002 0203 	and.w	r2, r2, #3
 8002c0c:	0092      	lsls	r2, r2, #2
 8002c0e:	4093      	lsls	r3, r2
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c16:	492f      	ldr	r1, [pc, #188]	@ (8002cd4 <HAL_GPIO_Init+0x2bc>)
 8002c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d006      	beq.n	8002c3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c30:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	492c      	ldr	r1, [pc, #176]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	608b      	str	r3, [r1, #8]
 8002c3c:	e006      	b.n	8002c4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	4928      	ldr	r1, [pc, #160]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d006      	beq.n	8002c66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c58:	4b23      	ldr	r3, [pc, #140]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	4922      	ldr	r1, [pc, #136]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60cb      	str	r3, [r1, #12]
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c66:	4b20      	ldr	r3, [pc, #128]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	491e      	ldr	r1, [pc, #120]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d006      	beq.n	8002c8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c80:	4b19      	ldr	r3, [pc, #100]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	4918      	ldr	r1, [pc, #96]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	604b      	str	r3, [r1, #4]
 8002c8c:	e006      	b.n	8002c9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c8e:	4b16      	ldr	r3, [pc, #88]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	4914      	ldr	r1, [pc, #80]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d021      	beq.n	8002cec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	490e      	ldr	r1, [pc, #56]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	600b      	str	r3, [r1, #0]
 8002cb4:	e021      	b.n	8002cfa <HAL_GPIO_Init+0x2e2>
 8002cb6:	bf00      	nop
 8002cb8:	10320000 	.word	0x10320000
 8002cbc:	10310000 	.word	0x10310000
 8002cc0:	10220000 	.word	0x10220000
 8002cc4:	10210000 	.word	0x10210000
 8002cc8:	10120000 	.word	0x10120000
 8002ccc:	10110000 	.word	0x10110000
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40010000 	.word	0x40010000
 8002cd8:	40010800 	.word	0x40010800
 8002cdc:	40010c00 	.word	0x40010c00
 8002ce0:	40011000 	.word	0x40011000
 8002ce4:	40011400 	.word	0x40011400
 8002ce8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cec:	4b0b      	ldr	r3, [pc, #44]	@ (8002d1c <HAL_GPIO_Init+0x304>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	4909      	ldr	r1, [pc, #36]	@ (8002d1c <HAL_GPIO_Init+0x304>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d06:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f47f ae8e 	bne.w	8002a2c <HAL_GPIO_Init+0x14>
  }
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	372c      	adds	r7, #44	@ 0x2c
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr
 8002d1c:	40010400 	.word	0x40010400

08002d20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	887b      	ldrh	r3, [r7, #2]
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
 8002d3c:	e001      	b.n	8002d42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	460b      	mov	r3, r1
 8002d58:	807b      	strh	r3, [r7, #2]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d5e:	787b      	ldrb	r3, [r7, #1]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d64:	887a      	ldrh	r2, [r7, #2]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d6a:	e003      	b.n	8002d74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d6c:	887b      	ldrh	r3, [r7, #2]
 8002d6e:	041a      	lsls	r2, r3, #16
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	611a      	str	r2, [r3, #16]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
	...

08002d80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d8a:	4b08      	ldr	r3, [pc, #32]	@ (8002dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d006      	beq.n	8002da4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d96:	4a05      	ldr	r2, [pc, #20]	@ (8002dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe f8a2 	bl	8000ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40010400 	.word	0x40010400

08002db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e12b      	b.n	800301a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fd fc02 	bl	80005e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2224      	movs	r2, #36	@ 0x24
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0201 	bic.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e14:	f000 fcda 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 8002e18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4a81      	ldr	r2, [pc, #516]	@ (8003024 <HAL_I2C_Init+0x274>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d807      	bhi.n	8002e34 <HAL_I2C_Init+0x84>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a80      	ldr	r2, [pc, #512]	@ (8003028 <HAL_I2C_Init+0x278>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	bf94      	ite	ls
 8002e2c:	2301      	movls	r3, #1
 8002e2e:	2300      	movhi	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	e006      	b.n	8002e42 <HAL_I2C_Init+0x92>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4a7d      	ldr	r2, [pc, #500]	@ (800302c <HAL_I2C_Init+0x27c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	bf94      	ite	ls
 8002e3c:	2301      	movls	r3, #1
 8002e3e:	2300      	movhi	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e0e7      	b.n	800301a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4a78      	ldr	r2, [pc, #480]	@ (8003030 <HAL_I2C_Init+0x280>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	0c9b      	lsrs	r3, r3, #18
 8002e54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	4a6a      	ldr	r2, [pc, #424]	@ (8003024 <HAL_I2C_Init+0x274>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d802      	bhi.n	8002e84 <HAL_I2C_Init+0xd4>
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	3301      	adds	r3, #1
 8002e82:	e009      	b.n	8002e98 <HAL_I2C_Init+0xe8>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e8a:	fb02 f303 	mul.w	r3, r2, r3
 8002e8e:	4a69      	ldr	r2, [pc, #420]	@ (8003034 <HAL_I2C_Init+0x284>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	099b      	lsrs	r3, r3, #6
 8002e96:	3301      	adds	r3, #1
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002eaa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	495c      	ldr	r1, [pc, #368]	@ (8003024 <HAL_I2C_Init+0x274>)
 8002eb4:	428b      	cmp	r3, r1
 8002eb6:	d819      	bhi.n	8002eec <HAL_I2C_Init+0x13c>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1e59      	subs	r1, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec6:	1c59      	adds	r1, r3, #1
 8002ec8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ecc:	400b      	ands	r3, r1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_I2C_Init+0x138>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1e59      	subs	r1, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee6:	e051      	b.n	8002f8c <HAL_I2C_Init+0x1dc>
 8002ee8:	2304      	movs	r3, #4
 8002eea:	e04f      	b.n	8002f8c <HAL_I2C_Init+0x1dc>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d111      	bne.n	8002f18 <HAL_I2C_Init+0x168>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1e58      	subs	r0, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6859      	ldr	r1, [r3, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	440b      	add	r3, r1
 8002f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf0c      	ite	eq
 8002f10:	2301      	moveq	r3, #1
 8002f12:	2300      	movne	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	e012      	b.n	8002f3e <HAL_I2C_Init+0x18e>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1e58      	subs	r0, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	0099      	lsls	r1, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf0c      	ite	eq
 8002f38:	2301      	moveq	r3, #1
 8002f3a:	2300      	movne	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Init+0x196>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e022      	b.n	8002f8c <HAL_I2C_Init+0x1dc>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10e      	bne.n	8002f6c <HAL_I2C_Init+0x1bc>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1e58      	subs	r0, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6859      	ldr	r1, [r3, #4]
 8002f56:	460b      	mov	r3, r1
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	440b      	add	r3, r1
 8002f5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f60:	3301      	adds	r3, #1
 8002f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f6a:	e00f      	b.n	8002f8c <HAL_I2C_Init+0x1dc>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1e58      	subs	r0, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	0099      	lsls	r1, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f82:	3301      	adds	r3, #1
 8002f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	6809      	ldr	r1, [r1, #0]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69da      	ldr	r2, [r3, #28]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002fba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6911      	ldr	r1, [r2, #16]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68d2      	ldr	r2, [r2, #12]
 8002fc6:	4311      	orrs	r1, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	000186a0 	.word	0x000186a0
 8003028:	001e847f 	.word	0x001e847f
 800302c:	003d08ff 	.word	0x003d08ff
 8003030:	431bde83 	.word	0x431bde83
 8003034:	10624dd3 	.word	0x10624dd3

08003038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e272      	b.n	8003530 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 8087 	beq.w	8003166 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003058:	4b92      	ldr	r3, [pc, #584]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 030c 	and.w	r3, r3, #12
 8003060:	2b04      	cmp	r3, #4
 8003062:	d00c      	beq.n	800307e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003064:	4b8f      	ldr	r3, [pc, #572]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b08      	cmp	r3, #8
 800306e:	d112      	bne.n	8003096 <HAL_RCC_OscConfig+0x5e>
 8003070:	4b8c      	ldr	r3, [pc, #560]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800307c:	d10b      	bne.n	8003096 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307e:	4b89      	ldr	r3, [pc, #548]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d06c      	beq.n	8003164 <HAL_RCC_OscConfig+0x12c>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d168      	bne.n	8003164 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e24c      	b.n	8003530 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800309e:	d106      	bne.n	80030ae <HAL_RCC_OscConfig+0x76>
 80030a0:	4b80      	ldr	r3, [pc, #512]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a7f      	ldr	r2, [pc, #508]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	e02e      	b.n	800310c <HAL_RCC_OscConfig+0xd4>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCC_OscConfig+0x98>
 80030b6:	4b7b      	ldr	r3, [pc, #492]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a7a      	ldr	r2, [pc, #488]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b78      	ldr	r3, [pc, #480]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a77      	ldr	r2, [pc, #476]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e01d      	b.n	800310c <HAL_RCC_OscConfig+0xd4>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCC_OscConfig+0xbc>
 80030da:	4b72      	ldr	r3, [pc, #456]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a71      	ldr	r2, [pc, #452]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	4b6f      	ldr	r3, [pc, #444]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a6e      	ldr	r2, [pc, #440]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e00b      	b.n	800310c <HAL_RCC_OscConfig+0xd4>
 80030f4:	4b6b      	ldr	r3, [pc, #428]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a6a      	ldr	r2, [pc, #424]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80030fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	4b68      	ldr	r3, [pc, #416]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a67      	ldr	r2, [pc, #412]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800310a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d013      	beq.n	800313c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fe f928 	bl	8001368 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800311c:	f7fe f924 	bl	8001368 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b64      	cmp	r3, #100	@ 0x64
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e200      	b.n	8003530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	4b5d      	ldr	r3, [pc, #372]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0xe4>
 800313a:	e014      	b.n	8003166 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fe f914 	bl	8001368 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003144:	f7fe f910 	bl	8001368 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	@ 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e1ec      	b.n	8003530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003156:	4b53      	ldr	r3, [pc, #332]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x10c>
 8003162:	e000      	b.n	8003166 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d063      	beq.n	800323a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003172:	4b4c      	ldr	r3, [pc, #304]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00b      	beq.n	8003196 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800317e:	4b49      	ldr	r3, [pc, #292]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b08      	cmp	r3, #8
 8003188:	d11c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x18c>
 800318a:	4b46      	ldr	r3, [pc, #280]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d116      	bne.n	80031c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003196:	4b43      	ldr	r3, [pc, #268]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_RCC_OscConfig+0x176>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d001      	beq.n	80031ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e1c0      	b.n	8003530 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ae:	4b3d      	ldr	r3, [pc, #244]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4939      	ldr	r1, [pc, #228]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c2:	e03a      	b.n	800323a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d020      	beq.n	800320e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031cc:	4b36      	ldr	r3, [pc, #216]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7fe f8c9 	bl	8001368 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031da:	f7fe f8c5 	bl	8001368 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e1a1      	b.n	8003530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ec:	4b2d      	ldr	r3, [pc, #180]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f8:	4b2a      	ldr	r3, [pc, #168]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4927      	ldr	r1, [pc, #156]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003208:	4313      	orrs	r3, r2
 800320a:	600b      	str	r3, [r1, #0]
 800320c:	e015      	b.n	800323a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800320e:	4b26      	ldr	r3, [pc, #152]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fe f8a8 	bl	8001368 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800321c:	f7fe f8a4 	bl	8001368 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e180      	b.n	8003530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322e:	4b1d      	ldr	r3, [pc, #116]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d03a      	beq.n	80032bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d019      	beq.n	8003282 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800324e:	4b17      	ldr	r3, [pc, #92]	@ (80032ac <HAL_RCC_OscConfig+0x274>)
 8003250:	2201      	movs	r2, #1
 8003252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003254:	f7fe f888 	bl	8001368 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325c:	f7fe f884 	bl	8001368 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e160      	b.n	8003530 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326e:	4b0d      	ldr	r3, [pc, #52]	@ (80032a4 <HAL_RCC_OscConfig+0x26c>)
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800327a:	2001      	movs	r0, #1
 800327c:	f000 face 	bl	800381c <RCC_Delay>
 8003280:	e01c      	b.n	80032bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003282:	4b0a      	ldr	r3, [pc, #40]	@ (80032ac <HAL_RCC_OscConfig+0x274>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003288:	f7fe f86e 	bl	8001368 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328e:	e00f      	b.n	80032b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003290:	f7fe f86a 	bl	8001368 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d908      	bls.n	80032b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e146      	b.n	8003530 <HAL_RCC_OscConfig+0x4f8>
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	42420000 	.word	0x42420000
 80032ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b0:	4b92      	ldr	r3, [pc, #584]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e9      	bne.n	8003290 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80a6 	beq.w	8003416 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ca:	2300      	movs	r3, #0
 80032cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ce:	4b8b      	ldr	r3, [pc, #556]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10d      	bne.n	80032f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032da:	4b88      	ldr	r3, [pc, #544]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	4a87      	ldr	r2, [pc, #540]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	61d3      	str	r3, [r2, #28]
 80032e6:	4b85      	ldr	r3, [pc, #532]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f2:	2301      	movs	r3, #1
 80032f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f6:	4b82      	ldr	r3, [pc, #520]	@ (8003500 <HAL_RCC_OscConfig+0x4c8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d118      	bne.n	8003334 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003302:	4b7f      	ldr	r3, [pc, #508]	@ (8003500 <HAL_RCC_OscConfig+0x4c8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a7e      	ldr	r2, [pc, #504]	@ (8003500 <HAL_RCC_OscConfig+0x4c8>)
 8003308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800330c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330e:	f7fe f82b 	bl	8001368 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003316:	f7fe f827 	bl	8001368 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b64      	cmp	r3, #100	@ 0x64
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e103      	b.n	8003530 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003328:	4b75      	ldr	r3, [pc, #468]	@ (8003500 <HAL_RCC_OscConfig+0x4c8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f0      	beq.n	8003316 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d106      	bne.n	800334a <HAL_RCC_OscConfig+0x312>
 800333c:	4b6f      	ldr	r3, [pc, #444]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	4a6e      	ldr	r2, [pc, #440]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6213      	str	r3, [r2, #32]
 8003348:	e02d      	b.n	80033a6 <HAL_RCC_OscConfig+0x36e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10c      	bne.n	800336c <HAL_RCC_OscConfig+0x334>
 8003352:	4b6a      	ldr	r3, [pc, #424]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	4a69      	ldr	r2, [pc, #420]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	6213      	str	r3, [r2, #32]
 800335e:	4b67      	ldr	r3, [pc, #412]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	4a66      	ldr	r2, [pc, #408]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 8003364:	f023 0304 	bic.w	r3, r3, #4
 8003368:	6213      	str	r3, [r2, #32]
 800336a:	e01c      	b.n	80033a6 <HAL_RCC_OscConfig+0x36e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b05      	cmp	r3, #5
 8003372:	d10c      	bne.n	800338e <HAL_RCC_OscConfig+0x356>
 8003374:	4b61      	ldr	r3, [pc, #388]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	4a60      	ldr	r2, [pc, #384]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 800337a:	f043 0304 	orr.w	r3, r3, #4
 800337e:	6213      	str	r3, [r2, #32]
 8003380:	4b5e      	ldr	r3, [pc, #376]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	4a5d      	ldr	r2, [pc, #372]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6213      	str	r3, [r2, #32]
 800338c:	e00b      	b.n	80033a6 <HAL_RCC_OscConfig+0x36e>
 800338e:	4b5b      	ldr	r3, [pc, #364]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	4a5a      	ldr	r2, [pc, #360]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	6213      	str	r3, [r2, #32]
 800339a:	4b58      	ldr	r3, [pc, #352]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	4a57      	ldr	r2, [pc, #348]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	f023 0304 	bic.w	r3, r3, #4
 80033a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d015      	beq.n	80033da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ae:	f7fd ffdb 	bl	8001368 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b4:	e00a      	b.n	80033cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b6:	f7fd ffd7 	bl	8001368 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e0b1      	b.n	8003530 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033cc:	4b4b      	ldr	r3, [pc, #300]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0ee      	beq.n	80033b6 <HAL_RCC_OscConfig+0x37e>
 80033d8:	e014      	b.n	8003404 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033da:	f7fd ffc5 	bl	8001368 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e0:	e00a      	b.n	80033f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e2:	f7fd ffc1 	bl	8001368 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e09b      	b.n	8003530 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f8:	4b40      	ldr	r3, [pc, #256]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1ee      	bne.n	80033e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003404:	7dfb      	ldrb	r3, [r7, #23]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d105      	bne.n	8003416 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800340a:	4b3c      	ldr	r3, [pc, #240]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4a3b      	ldr	r2, [pc, #236]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 8003410:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003414:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 8087 	beq.w	800352e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003420:	4b36      	ldr	r3, [pc, #216]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 030c 	and.w	r3, r3, #12
 8003428:	2b08      	cmp	r3, #8
 800342a:	d061      	beq.n	80034f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	2b02      	cmp	r3, #2
 8003432:	d146      	bne.n	80034c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003434:	4b33      	ldr	r3, [pc, #204]	@ (8003504 <HAL_RCC_OscConfig+0x4cc>)
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343a:	f7fd ff95 	bl	8001368 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003442:	f7fd ff91 	bl	8001368 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e06d      	b.n	8003530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003454:	4b29      	ldr	r3, [pc, #164]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f0      	bne.n	8003442 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003468:	d108      	bne.n	800347c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800346a:	4b24      	ldr	r3, [pc, #144]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	4921      	ldr	r1, [pc, #132]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 8003478:	4313      	orrs	r3, r2
 800347a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800347c:	4b1f      	ldr	r3, [pc, #124]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a19      	ldr	r1, [r3, #32]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	430b      	orrs	r3, r1
 800348e:	491b      	ldr	r1, [pc, #108]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 8003490:	4313      	orrs	r3, r2
 8003492:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003494:	4b1b      	ldr	r3, [pc, #108]	@ (8003504 <HAL_RCC_OscConfig+0x4cc>)
 8003496:	2201      	movs	r2, #1
 8003498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349a:	f7fd ff65 	bl	8001368 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a2:	f7fd ff61 	bl	8001368 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e03d      	b.n	8003530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034b4:	4b11      	ldr	r3, [pc, #68]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x46a>
 80034c0:	e035      	b.n	800352e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c2:	4b10      	ldr	r3, [pc, #64]	@ (8003504 <HAL_RCC_OscConfig+0x4cc>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c8:	f7fd ff4e 	bl	8001368 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d0:	f7fd ff4a 	bl	8001368 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e026      	b.n	8003530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e2:	4b06      	ldr	r3, [pc, #24]	@ (80034fc <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x498>
 80034ee:	e01e      	b.n	800352e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d107      	bne.n	8003508 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e019      	b.n	8003530 <HAL_RCC_OscConfig+0x4f8>
 80034fc:	40021000 	.word	0x40021000
 8003500:	40007000 	.word	0x40007000
 8003504:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003508:	4b0b      	ldr	r3, [pc, #44]	@ (8003538 <HAL_RCC_OscConfig+0x500>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	429a      	cmp	r2, r3
 800351a:	d106      	bne.n	800352a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d001      	beq.n	800352e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40021000 	.word	0x40021000

0800353c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e0d0      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003550:	4b6a      	ldr	r3, [pc, #424]	@ (80036fc <HAL_RCC_ClockConfig+0x1c0>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d910      	bls.n	8003580 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355e:	4b67      	ldr	r3, [pc, #412]	@ (80036fc <HAL_RCC_ClockConfig+0x1c0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f023 0207 	bic.w	r2, r3, #7
 8003566:	4965      	ldr	r1, [pc, #404]	@ (80036fc <HAL_RCC_ClockConfig+0x1c0>)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	4313      	orrs	r3, r2
 800356c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800356e:	4b63      	ldr	r3, [pc, #396]	@ (80036fc <HAL_RCC_ClockConfig+0x1c0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d001      	beq.n	8003580 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0b8      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d020      	beq.n	80035ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003598:	4b59      	ldr	r3, [pc, #356]	@ (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4a58      	ldr	r2, [pc, #352]	@ (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 800359e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80035a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035b0:	4b53      	ldr	r3, [pc, #332]	@ (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	4a52      	ldr	r2, [pc, #328]	@ (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 80035b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80035ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035bc:	4b50      	ldr	r3, [pc, #320]	@ (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	494d      	ldr	r1, [pc, #308]	@ (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d040      	beq.n	800365c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d107      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e2:	4b47      	ldr	r3, [pc, #284]	@ (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d115      	bne.n	800361a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e07f      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d107      	bne.n	800360a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fa:	4b41      	ldr	r3, [pc, #260]	@ (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d109      	bne.n	800361a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e073      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360a:	4b3d      	ldr	r3, [pc, #244]	@ (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e06b      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800361a:	4b39      	ldr	r3, [pc, #228]	@ (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f023 0203 	bic.w	r2, r3, #3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	4936      	ldr	r1, [pc, #216]	@ (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800362c:	f7fd fe9c 	bl	8001368 <HAL_GetTick>
 8003630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003632:	e00a      	b.n	800364a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003634:	f7fd fe98 	bl	8001368 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e053      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364a:	4b2d      	ldr	r3, [pc, #180]	@ (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 020c 	and.w	r2, r3, #12
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	429a      	cmp	r2, r3
 800365a:	d1eb      	bne.n	8003634 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800365c:	4b27      	ldr	r3, [pc, #156]	@ (80036fc <HAL_RCC_ClockConfig+0x1c0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d210      	bcs.n	800368c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366a:	4b24      	ldr	r3, [pc, #144]	@ (80036fc <HAL_RCC_ClockConfig+0x1c0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 0207 	bic.w	r2, r3, #7
 8003672:	4922      	ldr	r1, [pc, #136]	@ (80036fc <HAL_RCC_ClockConfig+0x1c0>)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	4313      	orrs	r3, r2
 8003678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800367a:	4b20      	ldr	r3, [pc, #128]	@ (80036fc <HAL_RCC_ClockConfig+0x1c0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d001      	beq.n	800368c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e032      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003698:	4b19      	ldr	r3, [pc, #100]	@ (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	4916      	ldr	r1, [pc, #88]	@ (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036b6:	4b12      	ldr	r3, [pc, #72]	@ (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	490e      	ldr	r1, [pc, #56]	@ (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036ca:	f000 f821 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 80036ce:	4602      	mov	r2, r0
 80036d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	490a      	ldr	r1, [pc, #40]	@ (8003704 <HAL_RCC_ClockConfig+0x1c8>)
 80036dc:	5ccb      	ldrb	r3, [r1, r3]
 80036de:	fa22 f303 	lsr.w	r3, r2, r3
 80036e2:	4a09      	ldr	r2, [pc, #36]	@ (8003708 <HAL_RCC_ClockConfig+0x1cc>)
 80036e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036e6:	4b09      	ldr	r3, [pc, #36]	@ (800370c <HAL_RCC_ClockConfig+0x1d0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fd fdfa 	bl	80012e4 <HAL_InitTick>

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40022000 	.word	0x40022000
 8003700:	40021000 	.word	0x40021000
 8003704:	08005144 	.word	0x08005144
 8003708:	20000000 	.word	0x20000000
 800370c:	20000004 	.word	0x20000004

08003710 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	2300      	movs	r3, #0
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	2300      	movs	r3, #0
 8003724:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800372a:	4b1e      	ldr	r3, [pc, #120]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	2b04      	cmp	r3, #4
 8003738:	d002      	beq.n	8003740 <HAL_RCC_GetSysClockFreq+0x30>
 800373a:	2b08      	cmp	r3, #8
 800373c:	d003      	beq.n	8003746 <HAL_RCC_GetSysClockFreq+0x36>
 800373e:	e027      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003740:	4b19      	ldr	r3, [pc, #100]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003742:	613b      	str	r3, [r7, #16]
      break;
 8003744:	e027      	b.n	8003796 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	0c9b      	lsrs	r3, r3, #18
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	4a17      	ldr	r2, [pc, #92]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8003750:	5cd3      	ldrb	r3, [r2, r3]
 8003752:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d010      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800375e:	4b11      	ldr	r3, [pc, #68]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	0c5b      	lsrs	r3, r3, #17
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	4a11      	ldr	r2, [pc, #68]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800376a:	5cd3      	ldrb	r3, [r2, r3]
 800376c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a0d      	ldr	r2, [pc, #52]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003772:	fb03 f202 	mul.w	r2, r3, r2
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	fbb2 f3f3 	udiv	r3, r2, r3
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e004      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a0c      	ldr	r2, [pc, #48]	@ (80037b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003784:	fb02 f303 	mul.w	r3, r2, r3
 8003788:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	613b      	str	r3, [r7, #16]
      break;
 800378e:	e002      	b.n	8003796 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003790:	4b05      	ldr	r3, [pc, #20]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003792:	613b      	str	r3, [r7, #16]
      break;
 8003794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003796:	693b      	ldr	r3, [r7, #16]
}
 8003798:	4618      	mov	r0, r3
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000
 80037a8:	007a1200 	.word	0x007a1200
 80037ac:	0800515c 	.word	0x0800515c
 80037b0:	0800516c 	.word	0x0800516c
 80037b4:	003d0900 	.word	0x003d0900

080037b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037bc:	4b02      	ldr	r3, [pc, #8]	@ (80037c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80037be:	681b      	ldr	r3, [r3, #0]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr
 80037c8:	20000000 	.word	0x20000000

080037cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037d0:	f7ff fff2 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 80037d4:	4602      	mov	r2, r0
 80037d6:	4b05      	ldr	r3, [pc, #20]	@ (80037ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	0a1b      	lsrs	r3, r3, #8
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	4903      	ldr	r1, [pc, #12]	@ (80037f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037e2:	5ccb      	ldrb	r3, [r1, r3]
 80037e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000
 80037f0:	08005154 	.word	0x08005154

080037f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037f8:	f7ff ffde 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 80037fc:	4602      	mov	r2, r0
 80037fe:	4b05      	ldr	r3, [pc, #20]	@ (8003814 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	0adb      	lsrs	r3, r3, #11
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	4903      	ldr	r1, [pc, #12]	@ (8003818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800380a:	5ccb      	ldrb	r3, [r1, r3]
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003810:	4618      	mov	r0, r3
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40021000 	.word	0x40021000
 8003818:	08005154 	.word	0x08005154

0800381c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003824:	4b0a      	ldr	r3, [pc, #40]	@ (8003850 <RCC_Delay+0x34>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a0a      	ldr	r2, [pc, #40]	@ (8003854 <RCC_Delay+0x38>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	0a5b      	lsrs	r3, r3, #9
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	fb02 f303 	mul.w	r3, r2, r3
 8003836:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003838:	bf00      	nop
  }
  while (Delay --);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1e5a      	subs	r2, r3, #1
 800383e:	60fa      	str	r2, [r7, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f9      	bne.n	8003838 <RCC_Delay+0x1c>
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr
 8003850:	20000000 	.word	0x20000000
 8003854:	10624dd3 	.word	0x10624dd3

08003858 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d07d      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003874:	2300      	movs	r3, #0
 8003876:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003878:	4b4f      	ldr	r3, [pc, #316]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10d      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003884:	4b4c      	ldr	r3, [pc, #304]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	4a4b      	ldr	r2, [pc, #300]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800388e:	61d3      	str	r3, [r2, #28]
 8003890:	4b49      	ldr	r3, [pc, #292]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800389c:	2301      	movs	r3, #1
 800389e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a0:	4b46      	ldr	r3, [pc, #280]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d118      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ac:	4b43      	ldr	r3, [pc, #268]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a42      	ldr	r2, [pc, #264]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b8:	f7fd fd56 	bl	8001368 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038be:	e008      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c0:	f7fd fd52 	bl	8001368 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	@ 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e06d      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d2:	4b3a      	ldr	r3, [pc, #232]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038de:	4b36      	ldr	r3, [pc, #216]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d02e      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d027      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038fc:	4b2e      	ldr	r3, [pc, #184]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003904:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003906:	4b2e      	ldr	r3, [pc, #184]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003908:	2201      	movs	r2, #1
 800390a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800390c:	4b2c      	ldr	r3, [pc, #176]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003912:	4a29      	ldr	r2, [pc, #164]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d014      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003922:	f7fd fd21 	bl	8001368 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003928:	e00a      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392a:	f7fd fd1d 	bl	8001368 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003938:	4293      	cmp	r3, r2
 800393a:	d901      	bls.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e036      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003940:	4b1d      	ldr	r3, [pc, #116]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0ee      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800394c:	4b1a      	ldr	r3, [pc, #104]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4917      	ldr	r1, [pc, #92]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800395a:	4313      	orrs	r3, r2
 800395c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800395e:	7dfb      	ldrb	r3, [r7, #23]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d105      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003964:	4b14      	ldr	r3, [pc, #80]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	4a13      	ldr	r2, [pc, #76]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800396e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800397c:	4b0e      	ldr	r3, [pc, #56]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	490b      	ldr	r1, [pc, #44]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398a:	4313      	orrs	r3, r2
 800398c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0310 	and.w	r3, r3, #16
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800399a:	4b07      	ldr	r3, [pc, #28]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	4904      	ldr	r1, [pc, #16]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40007000 	.word	0x40007000
 80039c0:	42420440 	.word	0x42420440

080039c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e041      	b.n	8003a5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd f870 	bl	8000ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f000 fdfa 	bl	80045fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d001      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e03a      	b.n	8003af2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a18      	ldr	r2, [pc, #96]	@ (8003afc <HAL_TIM_Base_Start_IT+0x98>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00e      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x58>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa6:	d009      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x58>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a14      	ldr	r2, [pc, #80]	@ (8003b00 <HAL_TIM_Base_Start_IT+0x9c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d004      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x58>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a13      	ldr	r2, [pc, #76]	@ (8003b04 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d111      	bne.n	8003ae0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d010      	beq.n	8003af0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ade:	e007      	b.n	8003af0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40000800 	.word	0x40000800

08003b08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e041      	b.n	8003b9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f839 	bl	8003ba6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3304      	adds	r3, #4
 8003b44:	4619      	mov	r1, r3
 8003b46:	4610      	mov	r0, r2
 8003b48:	f000 fd58 	bl	80045fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d109      	bne.n	8003be4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	e022      	b.n	8003c2a <HAL_TIM_PWM_Start_DMA+0x72>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d109      	bne.n	8003bfe <HAL_TIM_PWM_Start_DMA+0x46>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	bf0c      	ite	eq
 8003bf6:	2301      	moveq	r3, #1
 8003bf8:	2300      	movne	r3, #0
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	e015      	b.n	8003c2a <HAL_TIM_PWM_Start_DMA+0x72>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d109      	bne.n	8003c18 <HAL_TIM_PWM_Start_DMA+0x60>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	bf0c      	ite	eq
 8003c10:	2301      	moveq	r3, #1
 8003c12:	2300      	movne	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	e008      	b.n	8003c2a <HAL_TIM_PWM_Start_DMA+0x72>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e153      	b.n	8003eda <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d109      	bne.n	8003c4c <HAL_TIM_PWM_Start_DMA+0x94>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	e022      	b.n	8003c92 <HAL_TIM_PWM_Start_DMA+0xda>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d109      	bne.n	8003c66 <HAL_TIM_PWM_Start_DMA+0xae>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	bf0c      	ite	eq
 8003c5e:	2301      	moveq	r3, #1
 8003c60:	2300      	movne	r3, #0
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	e015      	b.n	8003c92 <HAL_TIM_PWM_Start_DMA+0xda>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d109      	bne.n	8003c80 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	bf0c      	ite	eq
 8003c78:	2301      	moveq	r3, #1
 8003c7a:	2300      	movne	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	e008      	b.n	8003c92 <HAL_TIM_PWM_Start_DMA+0xda>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2301      	moveq	r3, #1
 8003c8e:	2300      	movne	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d024      	beq.n	8003ce0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <HAL_TIM_PWM_Start_DMA+0xea>
 8003c9c:	887b      	ldrh	r3, [r7, #2]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e119      	b.n	8003eda <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d104      	bne.n	8003cb6 <HAL_TIM_PWM_Start_DMA+0xfe>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cb4:	e016      	b.n	8003ce4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d104      	bne.n	8003cc6 <HAL_TIM_PWM_Start_DMA+0x10e>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cc4:	e00e      	b.n	8003ce4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d104      	bne.n	8003cd6 <HAL_TIM_PWM_Start_DMA+0x11e>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cd4:	e006      	b.n	8003ce4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cde:	e001      	b.n	8003ce4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0fa      	b.n	8003eda <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b0c      	cmp	r3, #12
 8003ce8:	f200 80ae 	bhi.w	8003e48 <HAL_TIM_PWM_Start_DMA+0x290>
 8003cec:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf2:	bf00      	nop
 8003cf4:	08003d29 	.word	0x08003d29
 8003cf8:	08003e49 	.word	0x08003e49
 8003cfc:	08003e49 	.word	0x08003e49
 8003d00:	08003e49 	.word	0x08003e49
 8003d04:	08003d71 	.word	0x08003d71
 8003d08:	08003e49 	.word	0x08003e49
 8003d0c:	08003e49 	.word	0x08003e49
 8003d10:	08003e49 	.word	0x08003e49
 8003d14:	08003db9 	.word	0x08003db9
 8003d18:	08003e49 	.word	0x08003e49
 8003d1c:	08003e49 	.word	0x08003e49
 8003d20:	08003e49 	.word	0x08003e49
 8003d24:	08003e01 	.word	0x08003e01
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	4a6d      	ldr	r2, [pc, #436]	@ (8003ee4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003d2e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	4a6c      	ldr	r2, [pc, #432]	@ (8003ee8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003d36:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3c:	4a6b      	ldr	r2, [pc, #428]	@ (8003eec <HAL_TIM_PWM_Start_DMA+0x334>)
 8003d3e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3334      	adds	r3, #52	@ 0x34
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	887b      	ldrh	r3, [r7, #2]
 8003d50:	f7fe fcce 	bl	80026f0 <HAL_DMA_Start_IT>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0bd      	b.n	8003eda <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d6c:	60da      	str	r2, [r3, #12]
      break;
 8003d6e:	e06e      	b.n	8003e4e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d74:	4a5b      	ldr	r2, [pc, #364]	@ (8003ee4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003d76:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7c:	4a5a      	ldr	r2, [pc, #360]	@ (8003ee8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d84:	4a59      	ldr	r2, [pc, #356]	@ (8003eec <HAL_TIM_PWM_Start_DMA+0x334>)
 8003d86:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3338      	adds	r3, #56	@ 0x38
 8003d94:	461a      	mov	r2, r3
 8003d96:	887b      	ldrh	r3, [r7, #2]
 8003d98:	f7fe fcaa 	bl	80026f0 <HAL_DMA_Start_IT>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e099      	b.n	8003eda <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003db4:	60da      	str	r2, [r3, #12]
      break;
 8003db6:	e04a      	b.n	8003e4e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbc:	4a49      	ldr	r2, [pc, #292]	@ (8003ee4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003dbe:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc4:	4a48      	ldr	r2, [pc, #288]	@ (8003ee8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003dc6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dcc:	4a47      	ldr	r2, [pc, #284]	@ (8003eec <HAL_TIM_PWM_Start_DMA+0x334>)
 8003dce:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	333c      	adds	r3, #60	@ 0x3c
 8003ddc:	461a      	mov	r2, r3
 8003dde:	887b      	ldrh	r3, [r7, #2]
 8003de0:	f7fe fc86 	bl	80026f0 <HAL_DMA_Start_IT>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e075      	b.n	8003eda <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dfc:	60da      	str	r2, [r3, #12]
      break;
 8003dfe:	e026      	b.n	8003e4e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e04:	4a37      	ldr	r2, [pc, #220]	@ (8003ee4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003e06:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0c:	4a36      	ldr	r2, [pc, #216]	@ (8003ee8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e14:	4a35      	ldr	r2, [pc, #212]	@ (8003eec <HAL_TIM_PWM_Start_DMA+0x334>)
 8003e16:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3340      	adds	r3, #64	@ 0x40
 8003e24:	461a      	mov	r2, r3
 8003e26:	887b      	ldrh	r3, [r7, #2]
 8003e28:	f7fe fc62 	bl	80026f0 <HAL_DMA_Start_IT>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e051      	b.n	8003eda <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e44:	60da      	str	r2, [r3, #12]
      break;
 8003e46:	e002      	b.n	8003e4e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e4e:	7dfb      	ldrb	r3, [r7, #23]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d141      	bne.n	8003ed8 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fe59 	bl	8004b14 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a22      	ldr	r2, [pc, #136]	@ (8003ef0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d107      	bne.n	8003e7c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e7a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1b      	ldr	r2, [pc, #108]	@ (8003ef0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00e      	beq.n	8003ea4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e8e:	d009      	beq.n	8003ea4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a17      	ldr	r2, [pc, #92]	@ (8003ef4 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a16      	ldr	r2, [pc, #88]	@ (8003ef8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d111      	bne.n	8003ec8 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	2b06      	cmp	r3, #6
 8003eb4:	d010      	beq.n	8003ed8 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0201 	orr.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec6:	e007      	b.n	8003ed8 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	080044ed 	.word	0x080044ed
 8003ee8:	08004595 	.word	0x08004595
 8003eec:	0800445b 	.word	0x0800445b
 8003ef0:	40012c00 	.word	0x40012c00
 8003ef4:	40000400 	.word	0x40000400
 8003ef8:	40000800 	.word	0x40000800

08003efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d020      	beq.n	8003f60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01b      	beq.n	8003f60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0202 	mvn.w	r2, #2
 8003f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fa5a 	bl	8004400 <HAL_TIM_IC_CaptureCallback>
 8003f4c:	e005      	b.n	8003f5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fa4d 	bl	80043ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fa5c 	bl	8004412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d020      	beq.n	8003fac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d01b      	beq.n	8003fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f06f 0204 	mvn.w	r2, #4
 8003f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2202      	movs	r2, #2
 8003f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fa34 	bl	8004400 <HAL_TIM_IC_CaptureCallback>
 8003f98:	e005      	b.n	8003fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fa27 	bl	80043ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fa36 	bl	8004412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d020      	beq.n	8003ff8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d01b      	beq.n	8003ff8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f06f 0208 	mvn.w	r2, #8
 8003fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2204      	movs	r2, #4
 8003fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fa0e 	bl	8004400 <HAL_TIM_IC_CaptureCallback>
 8003fe4:	e005      	b.n	8003ff2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fa01 	bl	80043ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 fa10 	bl	8004412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d020      	beq.n	8004044 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01b      	beq.n	8004044 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f06f 0210 	mvn.w	r2, #16
 8004014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2208      	movs	r2, #8
 800401a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f9e8 	bl	8004400 <HAL_TIM_IC_CaptureCallback>
 8004030:	e005      	b.n	800403e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f9db 	bl	80043ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f9ea 	bl	8004412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00c      	beq.n	8004068 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d007      	beq.n	8004068 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0201 	mvn.w	r2, #1
 8004060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fd f8a2 	bl	80011ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00c      	beq.n	800408c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004078:	2b00      	cmp	r3, #0
 800407a:	d007      	beq.n	800408c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fdcf 	bl	8004c2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00c      	beq.n	80040b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800409c:	2b00      	cmp	r3, #0
 800409e:	d007      	beq.n	80040b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f9c3 	bl	8004436 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00c      	beq.n	80040d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d007      	beq.n	80040d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0220 	mvn.w	r2, #32
 80040cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fda2 	bl	8004c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e8:	2300      	movs	r3, #0
 80040ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040f6:	2302      	movs	r3, #2
 80040f8:	e0ae      	b.n	8004258 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b0c      	cmp	r3, #12
 8004106:	f200 809f 	bhi.w	8004248 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800410a:	a201      	add	r2, pc, #4	@ (adr r2, 8004110 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800410c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004110:	08004145 	.word	0x08004145
 8004114:	08004249 	.word	0x08004249
 8004118:	08004249 	.word	0x08004249
 800411c:	08004249 	.word	0x08004249
 8004120:	08004185 	.word	0x08004185
 8004124:	08004249 	.word	0x08004249
 8004128:	08004249 	.word	0x08004249
 800412c:	08004249 	.word	0x08004249
 8004130:	080041c7 	.word	0x080041c7
 8004134:	08004249 	.word	0x08004249
 8004138:	08004249 	.word	0x08004249
 800413c:	08004249 	.word	0x08004249
 8004140:	08004207 	.word	0x08004207
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fac4 	bl	80046d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0208 	orr.w	r2, r2, #8
 800415e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0204 	bic.w	r2, r2, #4
 800416e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6999      	ldr	r1, [r3, #24]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	619a      	str	r2, [r3, #24]
      break;
 8004182:	e064      	b.n	800424e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fb0a 	bl	80047a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800419e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6999      	ldr	r1, [r3, #24]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	021a      	lsls	r2, r3, #8
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	619a      	str	r2, [r3, #24]
      break;
 80041c4:	e043      	b.n	800424e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68b9      	ldr	r1, [r7, #8]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fb53 	bl	8004878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 0208 	orr.w	r2, r2, #8
 80041e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0204 	bic.w	r2, r2, #4
 80041f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69d9      	ldr	r1, [r3, #28]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	61da      	str	r2, [r3, #28]
      break;
 8004204:	e023      	b.n	800424e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fb9d 	bl	800494c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69da      	ldr	r2, [r3, #28]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69d9      	ldr	r1, [r3, #28]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	021a      	lsls	r2, r3, #8
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	61da      	str	r2, [r3, #28]
      break;
 8004246:	e002      	b.n	800424e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	75fb      	strb	r3, [r7, #23]
      break;
 800424c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004256:	7dfb      	ldrb	r3, [r7, #23]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_TIM_ConfigClockSource+0x1c>
 8004278:	2302      	movs	r3, #2
 800427a:	e0b4      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x186>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800429a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042b4:	d03e      	beq.n	8004334 <HAL_TIM_ConfigClockSource+0xd4>
 80042b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ba:	f200 8087 	bhi.w	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042c2:	f000 8086 	beq.w	80043d2 <HAL_TIM_ConfigClockSource+0x172>
 80042c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ca:	d87f      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042cc:	2b70      	cmp	r3, #112	@ 0x70
 80042ce:	d01a      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0xa6>
 80042d0:	2b70      	cmp	r3, #112	@ 0x70
 80042d2:	d87b      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042d4:	2b60      	cmp	r3, #96	@ 0x60
 80042d6:	d050      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x11a>
 80042d8:	2b60      	cmp	r3, #96	@ 0x60
 80042da:	d877      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042dc:	2b50      	cmp	r3, #80	@ 0x50
 80042de:	d03c      	beq.n	800435a <HAL_TIM_ConfigClockSource+0xfa>
 80042e0:	2b50      	cmp	r3, #80	@ 0x50
 80042e2:	d873      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042e4:	2b40      	cmp	r3, #64	@ 0x40
 80042e6:	d058      	beq.n	800439a <HAL_TIM_ConfigClockSource+0x13a>
 80042e8:	2b40      	cmp	r3, #64	@ 0x40
 80042ea:	d86f      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042ec:	2b30      	cmp	r3, #48	@ 0x30
 80042ee:	d064      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x15a>
 80042f0:	2b30      	cmp	r3, #48	@ 0x30
 80042f2:	d86b      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d060      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x15a>
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	d867      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d05c      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x15a>
 8004300:	2b10      	cmp	r3, #16
 8004302:	d05a      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x15a>
 8004304:	e062      	b.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004316:	f000 fbde 	bl	8004ad6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004328:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	609a      	str	r2, [r3, #8]
      break;
 8004332:	e04f      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004344:	f000 fbc7 	bl	8004ad6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004356:	609a      	str	r2, [r3, #8]
      break;
 8004358:	e03c      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004366:	461a      	mov	r2, r3
 8004368:	f000 fb3e 	bl	80049e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2150      	movs	r1, #80	@ 0x50
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fb95 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 8004378:	e02c      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004386:	461a      	mov	r2, r3
 8004388:	f000 fb5c 	bl	8004a44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2160      	movs	r1, #96	@ 0x60
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fb85 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 8004398:	e01c      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a6:	461a      	mov	r2, r3
 80043a8:	f000 fb1e 	bl	80049e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2140      	movs	r1, #64	@ 0x40
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fb75 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 80043b8:	e00c      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4619      	mov	r1, r3
 80043c4:	4610      	mov	r0, r2
 80043c6:	f000 fb6c 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 80043ca:	e003      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	73fb      	strb	r3, [r7, #15]
      break;
 80043d0:	e000      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr

08004400 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr

08004412 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr

08004424 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr

08004436 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr

08004448 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr

0800445a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	429a      	cmp	r2, r3
 8004470:	d107      	bne.n	8004482 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2201      	movs	r2, #1
 8004476:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004480:	e02a      	b.n	80044d8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	429a      	cmp	r2, r3
 800448a:	d107      	bne.n	800449c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2202      	movs	r2, #2
 8004490:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800449a:	e01d      	b.n	80044d8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d107      	bne.n	80044b6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2204      	movs	r2, #4
 80044aa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044b4:	e010      	b.n	80044d8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d107      	bne.n	80044d0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2208      	movs	r2, #8
 80044c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044ce:	e003      	b.n	80044d8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7ff ffb5 	bl	8004448 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	771a      	strb	r2, [r3, #28]
}
 80044e4:	bf00      	nop
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	429a      	cmp	r2, r3
 8004502:	d10b      	bne.n	800451c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2201      	movs	r2, #1
 8004508:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d136      	bne.n	8004580 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800451a:	e031      	b.n	8004580 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	429a      	cmp	r2, r3
 8004524:	d10b      	bne.n	800453e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2202      	movs	r2, #2
 800452a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d125      	bne.n	8004580 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800453c:	e020      	b.n	8004580 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d10b      	bne.n	8004560 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2204      	movs	r2, #4
 800454c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d114      	bne.n	8004580 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800455e:	e00f      	b.n	8004580 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	429a      	cmp	r2, r3
 8004568:	d10a      	bne.n	8004580 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2208      	movs	r2, #8
 800456e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d103      	bne.n	8004580 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f7ff ff46 	bl	8004412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	771a      	strb	r2, [r3, #28]
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d103      	bne.n	80045b4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2201      	movs	r2, #1
 80045b0:	771a      	strb	r2, [r3, #28]
 80045b2:	e019      	b.n	80045e8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d103      	bne.n	80045c6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2202      	movs	r2, #2
 80045c2:	771a      	strb	r2, [r3, #28]
 80045c4:	e010      	b.n	80045e8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d103      	bne.n	80045d8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2204      	movs	r2, #4
 80045d4:	771a      	strb	r2, [r3, #28]
 80045d6:	e007      	b.n	80045e8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d102      	bne.n	80045e8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2208      	movs	r2, #8
 80045e6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7ff ff1b 	bl	8004424 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	771a      	strb	r2, [r3, #28]
}
 80045f4:	bf00      	nop
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a2f      	ldr	r2, [pc, #188]	@ (80046cc <TIM_Base_SetConfig+0xd0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00b      	beq.n	800462c <TIM_Base_SetConfig+0x30>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800461a:	d007      	beq.n	800462c <TIM_Base_SetConfig+0x30>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a2c      	ldr	r2, [pc, #176]	@ (80046d0 <TIM_Base_SetConfig+0xd4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d003      	beq.n	800462c <TIM_Base_SetConfig+0x30>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a2b      	ldr	r2, [pc, #172]	@ (80046d4 <TIM_Base_SetConfig+0xd8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d108      	bne.n	800463e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a22      	ldr	r2, [pc, #136]	@ (80046cc <TIM_Base_SetConfig+0xd0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00b      	beq.n	800465e <TIM_Base_SetConfig+0x62>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800464c:	d007      	beq.n	800465e <TIM_Base_SetConfig+0x62>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1f      	ldr	r2, [pc, #124]	@ (80046d0 <TIM_Base_SetConfig+0xd4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d003      	beq.n	800465e <TIM_Base_SetConfig+0x62>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a1e      	ldr	r2, [pc, #120]	@ (80046d4 <TIM_Base_SetConfig+0xd8>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d108      	bne.n	8004670 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4313      	orrs	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a0d      	ldr	r2, [pc, #52]	@ (80046cc <TIM_Base_SetConfig+0xd0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d103      	bne.n	80046a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f023 0201 	bic.w	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	611a      	str	r2, [r3, #16]
  }
}
 80046c2:	bf00      	nop
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr
 80046cc:	40012c00 	.word	0x40012c00
 80046d0:	40000400 	.word	0x40000400
 80046d4:	40000800 	.word	0x40000800

080046d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	f023 0201 	bic.w	r2, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0303 	bic.w	r3, r3, #3
 800470e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f023 0302 	bic.w	r3, r3, #2
 8004720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	4313      	orrs	r3, r2
 800472a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a1c      	ldr	r2, [pc, #112]	@ (80047a0 <TIM_OC1_SetConfig+0xc8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d10c      	bne.n	800474e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f023 0308 	bic.w	r3, r3, #8
 800473a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f023 0304 	bic.w	r3, r3, #4
 800474c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a13      	ldr	r2, [pc, #76]	@ (80047a0 <TIM_OC1_SetConfig+0xc8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d111      	bne.n	800477a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800475c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	621a      	str	r2, [r3, #32]
}
 8004794:	bf00      	nop
 8004796:	371c      	adds	r7, #28
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40012c00 	.word	0x40012c00

080047a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	f023 0210 	bic.w	r2, r3, #16
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	021b      	lsls	r3, r3, #8
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f023 0320 	bic.w	r3, r3, #32
 80047ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004874 <TIM_OC2_SetConfig+0xd0>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d10d      	bne.n	8004820 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800480a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800481e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a14      	ldr	r2, [pc, #80]	@ (8004874 <TIM_OC2_SetConfig+0xd0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d113      	bne.n	8004850 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800482e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004836:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	621a      	str	r2, [r3, #32]
}
 800486a:	bf00      	nop
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr
 8004874:	40012c00 	.word	0x40012c00

08004878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0303 	bic.w	r3, r3, #3
 80048ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	021b      	lsls	r3, r3, #8
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004948 <TIM_OC3_SetConfig+0xd0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d10d      	bne.n	80048f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	021b      	lsls	r3, r3, #8
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a14      	ldr	r2, [pc, #80]	@ (8004948 <TIM_OC3_SetConfig+0xd0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d113      	bne.n	8004922 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	621a      	str	r2, [r3, #32]
}
 800493c:	bf00      	nop
 800493e:	371c      	adds	r7, #28
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40012c00 	.word	0x40012c00

0800494c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800497a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	021b      	lsls	r3, r3, #8
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	031b      	lsls	r3, r3, #12
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a0f      	ldr	r2, [pc, #60]	@ (80049e4 <TIM_OC4_SetConfig+0x98>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d109      	bne.n	80049c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	019b      	lsls	r3, r3, #6
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	621a      	str	r2, [r3, #32]
}
 80049da:	bf00      	nop
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr
 80049e4:	40012c00 	.word	0x40012c00

080049e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f023 0201 	bic.w	r2, r3, #1
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f023 030a 	bic.w	r3, r3, #10
 8004a24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	621a      	str	r2, [r3, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr

08004a44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	f023 0210 	bic.w	r2, r3, #16
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	031b      	lsls	r3, r3, #12
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	621a      	str	r2, [r3, #32]
}
 8004a98:	bf00      	nop
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr

08004aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b085      	sub	sp, #20
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f043 0307 	orr.w	r3, r3, #7
 8004ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	609a      	str	r2, [r3, #8]
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr

08004ad6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b087      	sub	sp, #28
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	60b9      	str	r1, [r7, #8]
 8004ae0:	607a      	str	r2, [r7, #4]
 8004ae2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004af0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	021a      	lsls	r2, r3, #8
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	431a      	orrs	r2, r3
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	609a      	str	r2, [r3, #8]
}
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr

08004b14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f003 031f 	and.w	r3, r3, #31
 8004b26:	2201      	movs	r2, #1
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a1a      	ldr	r2, [r3, #32]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	43db      	mvns	r3, r3
 8004b36:	401a      	ands	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a1a      	ldr	r2, [r3, #32]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 031f 	and.w	r3, r3, #31
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	621a      	str	r2, [r3, #32]
}
 8004b52:	bf00      	nop
 8004b54:	371c      	adds	r7, #28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr

08004b5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e046      	b.n	8004c02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a16      	ldr	r2, [pc, #88]	@ (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00e      	beq.n	8004bd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc0:	d009      	beq.n	8004bd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a12      	ldr	r2, [pc, #72]	@ (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d004      	beq.n	8004bd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a10      	ldr	r2, [pc, #64]	@ (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40000800 	.word	0x40000800

08004c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr

08004c2a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr

08004c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e042      	b.n	8004cd4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fc f80e 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2224      	movs	r2, #36	@ 0x24
 8004c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f971 	bl	8004f68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695a      	ldr	r2, [r3, #20]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08a      	sub	sp, #40	@ 0x28
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	603b      	str	r3, [r7, #0]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	d175      	bne.n	8004de8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_UART_Transmit+0x2c>
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e06e      	b.n	8004dea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2221      	movs	r2, #33	@ 0x21
 8004d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d1a:	f7fc fb25 	bl	8001368 <HAL_GetTick>
 8004d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	88fa      	ldrh	r2, [r7, #6]
 8004d2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d34:	d108      	bne.n	8004d48 <HAL_UART_Transmit+0x6c>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d104      	bne.n	8004d48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	e003      	b.n	8004d50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d50:	e02e      	b.n	8004db0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2180      	movs	r1, #128	@ 0x80
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 f848 	bl	8004df2 <UART_WaitOnFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e03a      	b.n	8004dea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10b      	bne.n	8004d92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	3302      	adds	r3, #2
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	e007      	b.n	8004da2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	781a      	ldrb	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1cb      	bne.n	8004d52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2140      	movs	r1, #64	@ 0x40
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f814 	bl	8004df2 <UART_WaitOnFlagUntilTimeout>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e006      	b.n	8004dea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e000      	b.n	8004dea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004de8:	2302      	movs	r3, #2
  }
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3720      	adds	r7, #32
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b086      	sub	sp, #24
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	603b      	str	r3, [r7, #0]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e02:	e03b      	b.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0a:	d037      	beq.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0c:	f7fc faac 	bl	8001368 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	6a3a      	ldr	r2, [r7, #32]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d302      	bcc.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e03a      	b.n	8004e9c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d023      	beq.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b80      	cmp	r3, #128	@ 0x80
 8004e38:	d020      	beq.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b40      	cmp	r3, #64	@ 0x40
 8004e3e:	d01d      	beq.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d116      	bne.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f81d 	bl	8004ea4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2208      	movs	r2, #8
 8004e6e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e00f      	b.n	8004e9c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	4013      	ands	r3, r2
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	bf0c      	ite	eq
 8004e8c:	2301      	moveq	r3, #1
 8004e8e:	2300      	movne	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	461a      	mov	r2, r3
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d0b4      	beq.n	8004e04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b095      	sub	sp, #84	@ 0x54
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	330c      	adds	r3, #12
 8004eb2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb6:	e853 3f00 	ldrex	r3, [r3]
 8004eba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	330c      	adds	r3, #12
 8004eca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ecc:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ed2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ed4:	e841 2300 	strex	r3, r2, [r1]
 8004ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e5      	bne.n	8004eac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3314      	adds	r3, #20
 8004ee6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3314      	adds	r3, #20
 8004efe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f08:	e841 2300 	strex	r3, r2, [r1]
 8004f0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1e5      	bne.n	8004ee0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d119      	bne.n	8004f50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	330c      	adds	r3, #12
 8004f22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f023 0310 	bic.w	r3, r3, #16
 8004f32:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	330c      	adds	r3, #12
 8004f3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f3c:	61ba      	str	r2, [r7, #24]
 8004f3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	6979      	ldr	r1, [r7, #20]
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	613b      	str	r3, [r7, #16]
   return(result);
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e5      	bne.n	8004f1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f5e:	bf00      	nop
 8004f60:	3754      	adds	r7, #84	@ 0x54
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bc80      	pop	{r7}
 8004f66:	4770      	bx	lr

08004f68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004fa2:	f023 030c 	bic.w	r3, r3, #12
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6812      	ldr	r2, [r2, #0]
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	430b      	orrs	r3, r1
 8004fae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a2c      	ldr	r2, [pc, #176]	@ (800507c <UART_SetConfig+0x114>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d103      	bne.n	8004fd8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004fd0:	f7fe fc10 	bl	80037f4 <HAL_RCC_GetPCLK2Freq>
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	e002      	b.n	8004fde <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004fd8:	f7fe fbf8 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 8004fdc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009a      	lsls	r2, r3, #2
 8004fe8:	441a      	add	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff4:	4a22      	ldr	r2, [pc, #136]	@ (8005080 <UART_SetConfig+0x118>)
 8004ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffa:	095b      	lsrs	r3, r3, #5
 8004ffc:	0119      	lsls	r1, r3, #4
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	009a      	lsls	r2, r3, #2
 8005008:	441a      	add	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	fbb2 f2f3 	udiv	r2, r2, r3
 8005014:	4b1a      	ldr	r3, [pc, #104]	@ (8005080 <UART_SetConfig+0x118>)
 8005016:	fba3 0302 	umull	r0, r3, r3, r2
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	2064      	movs	r0, #100	@ 0x64
 800501e:	fb00 f303 	mul.w	r3, r0, r3
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	3332      	adds	r3, #50	@ 0x32
 8005028:	4a15      	ldr	r2, [pc, #84]	@ (8005080 <UART_SetConfig+0x118>)
 800502a:	fba2 2303 	umull	r2, r3, r2, r3
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005034:	4419      	add	r1, r3
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4613      	mov	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	009a      	lsls	r2, r3, #2
 8005040:	441a      	add	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	fbb2 f2f3 	udiv	r2, r2, r3
 800504c:	4b0c      	ldr	r3, [pc, #48]	@ (8005080 <UART_SetConfig+0x118>)
 800504e:	fba3 0302 	umull	r0, r3, r3, r2
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	2064      	movs	r0, #100	@ 0x64
 8005056:	fb00 f303 	mul.w	r3, r0, r3
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	3332      	adds	r3, #50	@ 0x32
 8005060:	4a07      	ldr	r2, [pc, #28]	@ (8005080 <UART_SetConfig+0x118>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	f003 020f 	and.w	r2, r3, #15
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	440a      	add	r2, r1
 8005072:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005074:	bf00      	nop
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40013800 	.word	0x40013800
 8005080:	51eb851f 	.word	0x51eb851f

08005084 <memset>:
 8005084:	4603      	mov	r3, r0
 8005086:	4402      	add	r2, r0
 8005088:	4293      	cmp	r3, r2
 800508a:	d100      	bne.n	800508e <memset+0xa>
 800508c:	4770      	bx	lr
 800508e:	f803 1b01 	strb.w	r1, [r3], #1
 8005092:	e7f9      	b.n	8005088 <memset+0x4>

08005094 <__libc_init_array>:
 8005094:	b570      	push	{r4, r5, r6, lr}
 8005096:	2600      	movs	r6, #0
 8005098:	4d0c      	ldr	r5, [pc, #48]	@ (80050cc <__libc_init_array+0x38>)
 800509a:	4c0d      	ldr	r4, [pc, #52]	@ (80050d0 <__libc_init_array+0x3c>)
 800509c:	1b64      	subs	r4, r4, r5
 800509e:	10a4      	asrs	r4, r4, #2
 80050a0:	42a6      	cmp	r6, r4
 80050a2:	d109      	bne.n	80050b8 <__libc_init_array+0x24>
 80050a4:	f000 f81a 	bl	80050dc <_init>
 80050a8:	2600      	movs	r6, #0
 80050aa:	4d0a      	ldr	r5, [pc, #40]	@ (80050d4 <__libc_init_array+0x40>)
 80050ac:	4c0a      	ldr	r4, [pc, #40]	@ (80050d8 <__libc_init_array+0x44>)
 80050ae:	1b64      	subs	r4, r4, r5
 80050b0:	10a4      	asrs	r4, r4, #2
 80050b2:	42a6      	cmp	r6, r4
 80050b4:	d105      	bne.n	80050c2 <__libc_init_array+0x2e>
 80050b6:	bd70      	pop	{r4, r5, r6, pc}
 80050b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050bc:	4798      	blx	r3
 80050be:	3601      	adds	r6, #1
 80050c0:	e7ee      	b.n	80050a0 <__libc_init_array+0xc>
 80050c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c6:	4798      	blx	r3
 80050c8:	3601      	adds	r6, #1
 80050ca:	e7f2      	b.n	80050b2 <__libc_init_array+0x1e>
 80050cc:	08005170 	.word	0x08005170
 80050d0:	08005170 	.word	0x08005170
 80050d4:	08005170 	.word	0x08005170
 80050d8:	08005174 	.word	0x08005174

080050dc <_init>:
 80050dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050de:	bf00      	nop
 80050e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e2:	bc08      	pop	{r3}
 80050e4:	469e      	mov	lr, r3
 80050e6:	4770      	bx	lr

080050e8 <_fini>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	bf00      	nop
 80050ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ee:	bc08      	pop	{r3}
 80050f0:	469e      	mov	lr, r3
 80050f2:	4770      	bx	lr
