
EBS_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053cc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080054d8  080054d8  000064d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800553c  0800553c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  0800553c  0800553c  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800553c  0800553c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800553c  0800553c  0000653c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005540  08005540  00006540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005544  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e24  2000000c  08005550  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e30  08005550  00007e30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f0a  00000000  00000000  00007035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034b1  00000000  00000000  00018f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  0001c3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d94  00000000  00000000  0001d5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad5d  00000000  00000000  0001e334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178d4  00000000  00000000  00039091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000928c0  00000000  00000000  00050965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3225  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004618  00000000  00000000  000e3268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000e7880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080054c0 	.word	0x080054c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080054c0 	.word	0x080054c0

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b2f      	ldr	r3, [pc, #188]	@ (800021c <MX_ADC1_Init+0xd0>)
 800015e:	4a30      	ldr	r2, [pc, #192]	@ (8000220 <MX_ADC1_Init+0xd4>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000162:	4b2e      	ldr	r3, [pc, #184]	@ (800021c <MX_ADC1_Init+0xd0>)
 8000164:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800016a:	4b2c      	ldr	r3, [pc, #176]	@ (800021c <MX_ADC1_Init+0xd0>)
 800016c:	2200      	movs	r2, #0
 800016e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000170:	4b2a      	ldr	r3, [pc, #168]	@ (800021c <MX_ADC1_Init+0xd0>)
 8000172:	2201      	movs	r2, #1
 8000174:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000176:	4b29      	ldr	r3, [pc, #164]	@ (800021c <MX_ADC1_Init+0xd0>)
 8000178:	2201      	movs	r2, #1
 800017a:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800017c:	4b27      	ldr	r3, [pc, #156]	@ (800021c <MX_ADC1_Init+0xd0>)
 800017e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000182:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000184:	4b25      	ldr	r3, [pc, #148]	@ (800021c <MX_ADC1_Init+0xd0>)
 8000186:	2200      	movs	r2, #0
 8000188:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 800018a:	4b24      	ldr	r3, [pc, #144]	@ (800021c <MX_ADC1_Init+0xd0>)
 800018c:	2204      	movs	r2, #4
 800018e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000190:	4822      	ldr	r0, [pc, #136]	@ (800021c <MX_ADC1_Init+0xd0>)
 8000192:	f001 f959 	bl	8001448 <HAL_ADC_Init>
 8000196:	4603      	mov	r3, r0
 8000198:	2b00      	cmp	r3, #0
 800019a:	d001      	beq.n	80001a0 <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 800019c:	f000 fa6f 	bl	800067e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80001a0:	2301      	movs	r3, #1
 80001a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001a4:	2301      	movs	r3, #1
 80001a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a8:	2300      	movs	r3, #0
 80001aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4619      	mov	r1, r3
 80001b0:	481a      	ldr	r0, [pc, #104]	@ (800021c <MX_ADC1_Init+0xd0>)
 80001b2:	f001 fbe1 	bl	8001978 <HAL_ADC_ConfigChannel>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d001      	beq.n	80001c0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80001bc:	f000 fa5f 	bl	800067e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80001c0:	2302      	movs	r3, #2
 80001c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001c4:	2302      	movs	r3, #2
 80001c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	4619      	mov	r1, r3
 80001cc:	4813      	ldr	r0, [pc, #76]	@ (800021c <MX_ADC1_Init+0xd0>)
 80001ce:	f001 fbd3 	bl	8001978 <HAL_ADC_ConfigChannel>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d001      	beq.n	80001dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80001d8:	f000 fa51 	bl	800067e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80001dc:	2303      	movs	r3, #3
 80001de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001e0:	2303      	movs	r3, #3
 80001e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	4619      	mov	r1, r3
 80001e8:	480c      	ldr	r0, [pc, #48]	@ (800021c <MX_ADC1_Init+0xd0>)
 80001ea:	f001 fbc5 	bl	8001978 <HAL_ADC_ConfigChannel>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80001f4:	f000 fa43 	bl	800067e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80001f8:	2304      	movs	r3, #4
 80001fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80001fc:	2304      	movs	r3, #4
 80001fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	4619      	mov	r1, r3
 8000204:	4805      	ldr	r0, [pc, #20]	@ (800021c <MX_ADC1_Init+0xd0>)
 8000206:	f001 fbb7 	bl	8001978 <HAL_ADC_ConfigChannel>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000210:	f000 fa35 	bl	800067e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000214:	bf00      	nop
 8000216:	3710      	adds	r7, #16
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}
 800021c:	20000028 	.word	0x20000028
 8000220:	40012400 	.word	0x40012400

08000224 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022c:	f107 0310 	add.w	r3, r7, #16
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a14      	ldr	r2, [pc, #80]	@ (8000290 <HAL_ADC_MspInit+0x6c>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d121      	bne.n	8000288 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000244:	4b13      	ldr	r3, [pc, #76]	@ (8000294 <HAL_ADC_MspInit+0x70>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	4a12      	ldr	r2, [pc, #72]	@ (8000294 <HAL_ADC_MspInit+0x70>)
 800024a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800024e:	6193      	str	r3, [r2, #24]
 8000250:	4b10      	ldr	r3, [pc, #64]	@ (8000294 <HAL_ADC_MspInit+0x70>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000258:	60fb      	str	r3, [r7, #12]
 800025a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800025c:	4b0d      	ldr	r3, [pc, #52]	@ (8000294 <HAL_ADC_MspInit+0x70>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a0c      	ldr	r2, [pc, #48]	@ (8000294 <HAL_ADC_MspInit+0x70>)
 8000262:	f043 0304 	orr.w	r3, r3, #4
 8000266:	6193      	str	r3, [r2, #24]
 8000268:	4b0a      	ldr	r3, [pc, #40]	@ (8000294 <HAL_ADC_MspInit+0x70>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	f003 0304 	and.w	r3, r3, #4
 8000270:	60bb      	str	r3, [r7, #8]
 8000272:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|QIYA_ADC_Pin|YOUYA_ADC_Pin|GPIO_PIN_4;
 8000274:	231e      	movs	r3, #30
 8000276:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000278:	2303      	movs	r3, #3
 800027a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800027c:	f107 0310 	add.w	r3, r7, #16
 8000280:	4619      	mov	r1, r3
 8000282:	4805      	ldr	r0, [pc, #20]	@ (8000298 <HAL_ADC_MspInit+0x74>)
 8000284:	f002 fe48 	bl	8002f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000288:	bf00      	nop
 800028a:	3720      	adds	r7, #32
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	40012400 	.word	0x40012400
 8000294:	40021000 	.word	0x40021000
 8000298:	40010800 	.word	0x40010800

0800029c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002a0:	4b17      	ldr	r3, [pc, #92]	@ (8000300 <MX_CAN_Init+0x64>)
 80002a2:	4a18      	ldr	r2, [pc, #96]	@ (8000304 <MX_CAN_Init+0x68>)
 80002a4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 80002a6:	4b16      	ldr	r3, [pc, #88]	@ (8000300 <MX_CAN_Init+0x64>)
 80002a8:	2203      	movs	r2, #3
 80002aa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002ac:	4b14      	ldr	r3, [pc, #80]	@ (8000300 <MX_CAN_Init+0x64>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002b2:	4b13      	ldr	r3, [pc, #76]	@ (8000300 <MX_CAN_Init+0x64>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80002b8:	4b11      	ldr	r3, [pc, #68]	@ (8000300 <MX_CAN_Init+0x64>)
 80002ba:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80002be:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 80002c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000300 <MX_CAN_Init+0x64>)
 80002c2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80002c6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000300 <MX_CAN_Init+0x64>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000300 <MX_CAN_Init+0x64>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 80002d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000300 <MX_CAN_Init+0x64>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80002da:	4b09      	ldr	r3, [pc, #36]	@ (8000300 <MX_CAN_Init+0x64>)
 80002dc:	2201      	movs	r2, #1
 80002de:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002e0:	4b07      	ldr	r3, [pc, #28]	@ (8000300 <MX_CAN_Init+0x64>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002e6:	4b06      	ldr	r3, [pc, #24]	@ (8000300 <MX_CAN_Init+0x64>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002ec:	4804      	ldr	r0, [pc, #16]	@ (8000300 <MX_CAN_Init+0x64>)
 80002ee:	f001 fcd6 	bl	8001c9e <HAL_CAN_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80002f8:	f000 f9c1 	bl	800067e <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000058 	.word	0x20000058
 8000304:	40006400 	.word	0x40006400

08000308 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000310:	f107 0310 	add.w	r3, r7, #16
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a20      	ldr	r2, [pc, #128]	@ (80003a4 <HAL_CAN_MspInit+0x9c>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d139      	bne.n	800039c <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000328:	4b1f      	ldr	r3, [pc, #124]	@ (80003a8 <HAL_CAN_MspInit+0xa0>)
 800032a:	69db      	ldr	r3, [r3, #28]
 800032c:	4a1e      	ldr	r2, [pc, #120]	@ (80003a8 <HAL_CAN_MspInit+0xa0>)
 800032e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000332:	61d3      	str	r3, [r2, #28]
 8000334:	4b1c      	ldr	r3, [pc, #112]	@ (80003a8 <HAL_CAN_MspInit+0xa0>)
 8000336:	69db      	ldr	r3, [r3, #28]
 8000338:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000340:	4b19      	ldr	r3, [pc, #100]	@ (80003a8 <HAL_CAN_MspInit+0xa0>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a18      	ldr	r2, [pc, #96]	@ (80003a8 <HAL_CAN_MspInit+0xa0>)
 8000346:	f043 0304 	orr.w	r3, r3, #4
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b16      	ldr	r3, [pc, #88]	@ (80003a8 <HAL_CAN_MspInit+0xa0>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0304 	and.w	r3, r3, #4
 8000354:	60bb      	str	r3, [r7, #8]
 8000356:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000358:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800035c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000366:	f107 0310 	add.w	r3, r7, #16
 800036a:	4619      	mov	r1, r3
 800036c:	480f      	ldr	r0, [pc, #60]	@ (80003ac <HAL_CAN_MspInit+0xa4>)
 800036e:	f002 fdd3 	bl	8002f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000372:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000376:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000378:	2302      	movs	r3, #2
 800037a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800037c:	2303      	movs	r3, #3
 800037e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000380:	f107 0310 	add.w	r3, r7, #16
 8000384:	4619      	mov	r1, r3
 8000386:	4809      	ldr	r0, [pc, #36]	@ (80003ac <HAL_CAN_MspInit+0xa4>)
 8000388:	f002 fdc6 	bl	8002f18 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 800038c:	2200      	movs	r2, #0
 800038e:	2101      	movs	r1, #1
 8000390:	2014      	movs	r0, #20
 8000392:	f002 fb9c 	bl	8002ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000396:	2014      	movs	r0, #20
 8000398:	f002 fbb5 	bl	8002b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800039c:	bf00      	nop
 800039e:	3720      	adds	r7, #32
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40006400 	.word	0x40006400
 80003a8:	40021000 	.word	0x40021000
 80003ac:	40010800 	.word	0x40010800

080003b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003b6:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <MX_DMA_Init+0x38>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a0b      	ldr	r2, [pc, #44]	@ (80003e8 <MX_DMA_Init+0x38>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6153      	str	r3, [r2, #20]
 80003c2:	4b09      	ldr	r3, [pc, #36]	@ (80003e8 <MX_DMA_Init+0x38>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2100      	movs	r1, #0
 80003d2:	200b      	movs	r0, #11
 80003d4:	f002 fb7b 	bl	8002ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003d8:	200b      	movs	r0, #11
 80003da:	f002 fb94 	bl	8002b06 <HAL_NVIC_EnableIRQ>

}
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000

080003ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 0310 	add.w	r3, r7, #16
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000400:	4b45      	ldr	r3, [pc, #276]	@ (8000518 <MX_GPIO_Init+0x12c>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a44      	ldr	r2, [pc, #272]	@ (8000518 <MX_GPIO_Init+0x12c>)
 8000406:	f043 0310 	orr.w	r3, r3, #16
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b42      	ldr	r3, [pc, #264]	@ (8000518 <MX_GPIO_Init+0x12c>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0310 	and.w	r3, r3, #16
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000418:	4b3f      	ldr	r3, [pc, #252]	@ (8000518 <MX_GPIO_Init+0x12c>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a3e      	ldr	r2, [pc, #248]	@ (8000518 <MX_GPIO_Init+0x12c>)
 800041e:	f043 0320 	orr.w	r3, r3, #32
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b3c      	ldr	r3, [pc, #240]	@ (8000518 <MX_GPIO_Init+0x12c>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0320 	and.w	r3, r3, #32
 800042c:	60bb      	str	r3, [r7, #8]
 800042e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000430:	4b39      	ldr	r3, [pc, #228]	@ (8000518 <MX_GPIO_Init+0x12c>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a38      	ldr	r2, [pc, #224]	@ (8000518 <MX_GPIO_Init+0x12c>)
 8000436:	f043 0304 	orr.w	r3, r3, #4
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b36      	ldr	r3, [pc, #216]	@ (8000518 <MX_GPIO_Init+0x12c>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0304 	and.w	r3, r3, #4
 8000444:	607b      	str	r3, [r7, #4]
 8000446:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000448:	4b33      	ldr	r3, [pc, #204]	@ (8000518 <MX_GPIO_Init+0x12c>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a32      	ldr	r2, [pc, #200]	@ (8000518 <MX_GPIO_Init+0x12c>)
 800044e:	f043 0308 	orr.w	r3, r3, #8
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b30      	ldr	r3, [pc, #192]	@ (8000518 <MX_GPIO_Init+0x12c>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0308 	and.w	r3, r3, #8
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BEE_JDQ_Pin|OUTPUT5_Pin|OUTPUT6_Pin, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000466:	482d      	ldr	r0, [pc, #180]	@ (800051c <MX_GPIO_Init+0x130>)
 8000468:	f002 fef1 	bl	800324e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TS_JDQ_Pin|DCF_JDQ_Pin|OUTPUT1_Pin|WDOG_Pin
 800046c:	2200      	movs	r2, #0
 800046e:	f240 3133 	movw	r1, #819	@ 0x333
 8000472:	482b      	ldr	r0, [pc, #172]	@ (8000520 <MX_GPIO_Init+0x134>)
 8000474:	f002 feeb 	bl	800324e <HAL_GPIO_WritePin>
                          |AS_CLOSE_SDC_Pin|N_ERR_IND_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EBS_ERR_GPIO_Port, EBS_ERR_Pin, GPIO_PIN_SET);
 8000478:	2201      	movs	r2, #1
 800047a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800047e:	4828      	ldr	r0, [pc, #160]	@ (8000520 <MX_GPIO_Init+0x134>)
 8000480:	f002 fee5 	bl	800324e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEE_JDQ_Pin OUTPUT5_Pin OUTPUT6_Pin */
  GPIO_InitStruct.Pin = BEE_JDQ_Pin|OUTPUT5_Pin|OUTPUT6_Pin;
 8000484:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048a:	2301      	movs	r3, #1
 800048c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000492:	2302      	movs	r3, #2
 8000494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	4619      	mov	r1, r3
 800049c:	481f      	ldr	r0, [pc, #124]	@ (800051c <MX_GPIO_Init+0x130>)
 800049e:	f002 fd3b 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : TS_JDQ_Pin DCF_JDQ_Pin EBS_ERR_Pin OUTPUT1_Pin
                           WDOG_Pin AS_CLOSE_SDC_Pin N_ERR_IND_Pin */
  GPIO_InitStruct.Pin = TS_JDQ_Pin|DCF_JDQ_Pin|EBS_ERR_Pin|OUTPUT1_Pin
 80004a2:	f640 3333 	movw	r3, #2867	@ 0xb33
 80004a6:	613b      	str	r3, [r7, #16]
                          |WDOG_Pin|AS_CLOSE_SDC_Pin|N_ERR_IND_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a8:	2301      	movs	r3, #1
 80004aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	2302      	movs	r3, #2
 80004b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	4619      	mov	r1, r3
 80004ba:	4819      	ldr	r0, [pc, #100]	@ (8000520 <MX_GPIO_Init+0x134>)
 80004bc:	f002 fd2c 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : TS_DETECT_Pin SHIFANGFA_DETECT_Pin EBS_LOGIC_POWER_DETECT_Pin INPUT5_Pin */
  GPIO_InitStruct.Pin = TS_DETECT_Pin|SHIFANGFA_DETECT_Pin|EBS_LOGIC_POWER_DETECT_Pin|INPUT5_Pin;
 80004c0:	f24d 0308 	movw	r3, #53256	@ 0xd008
 80004c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ca:	2300      	movs	r3, #0
 80004cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ce:	f107 0310 	add.w	r3, r7, #16
 80004d2:	4619      	mov	r1, r3
 80004d4:	4812      	ldr	r0, [pc, #72]	@ (8000520 <MX_GPIO_Init+0x134>)
 80004d6:	f002 fd1f 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASMS_DETECT_Pin */
  GPIO_InitStruct.Pin = ASMS_DETECT_Pin;
 80004da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004e4:	2301      	movs	r3, #1
 80004e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ASMS_DETECT_GPIO_Port, &GPIO_InitStruct);
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	4619      	mov	r1, r3
 80004ee:	480c      	ldr	r0, [pc, #48]	@ (8000520 <MX_GPIO_Init+0x134>)
 80004f0:	f002 fd12 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT3_Pin INPUT4_Pin */
  GPIO_InitStruct.Pin = INPUT3_Pin|INPUT4_Pin;
 80004f4:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80004f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	4619      	mov	r1, r3
 8000508:	4806      	ldr	r0, [pc, #24]	@ (8000524 <MX_GPIO_Init+0x138>)
 800050a:	f002 fd05 	bl	8002f18 <HAL_GPIO_Init>

}
 800050e:	bf00      	nop
 8000510:	3720      	adds	r7, #32
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000
 800051c:	40011000 	.word	0x40011000
 8000520:	40010c00 	.word	0x40010c00
 8000524:	40010800 	.word	0x40010800

08000528 <User_Init>:
void EBS_Detect()
{
	//if(JITING_State==1||)
}
void User_Init()
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	EBS_Error_LED_Activate();
 800052c:	f000 fd38 	bl	8000fa0 <EBS_Error_LED_Activate>
	DCF_DeActivate();
 8000530:	f000 fd24 	bl	8000f7c <DCF_DeActivate>
	BEE_DeActivate();
 8000534:	f000 fd0e 	bl	8000f54 <BEE_DeActivate>
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fefc 	bl	800133c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f840 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f7ff ff50 	bl	80003ec <MX_GPIO_Init>
  MX_DMA_Init();
 800054c:	f7ff ff30 	bl	80003b0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000550:	f7ff fdfc 	bl	800014c <MX_ADC1_Init>
  MX_CAN_Init();
 8000554:	f7ff fea2 	bl	800029c <MX_CAN_Init>
  MX_TIM2_Init();
 8000558:	f000 f91a 	bl	8000790 <MX_TIM2_Init>
  MX_TIM3_Init();
 800055c:	f000 f964 	bl	8000828 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000560:	f000 f9e4 	bl	800092c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000564:	f000 fb24 	bl	8000bb0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  User_Init();
 8000568:	f7ff ffde 	bl	8000528 <User_Init>
  CAN_Init();
 800056c:	f000 fc44 	bl	8000df8 <CAN_Init>
  HAL_Delay(100);
 8000570:	2064      	movs	r0, #100	@ 0x64
 8000572:	f000 ff45 	bl	8001400 <HAL_Delay>
  TS_State=0;
 8000576:	4b0f      	ldr	r3, [pc, #60]	@ (80005b4 <main+0x78>)
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
  ASMS_State=0;
 800057c:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <main+0x7c>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
  BEE_enabled=1;
 8000582:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <main+0x80>)
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]
  //blink_enabled=1;
  HAL_TIM_Base_Start_IT(&htim3);
 8000588:	480d      	ldr	r0, [pc, #52]	@ (80005c0 <main+0x84>)
 800058a:	f003 fc5d 	bl	8003e48 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim4);
  //DCF_Activate();
//  ASSI_Yellow_Stable();
 // ASSI_Yellow_Blink();
  //ASSI_OFF();
  CAN_SendMessage(100,101);
 800058e:	2165      	movs	r1, #101	@ 0x65
 8000590:	2064      	movs	r0, #100	@ 0x64
 8000592:	f000 fc7d 	bl	8000e90 <CAN_SendMessage>

  //ASSI_Set_Blue();
  HAL_Delay(100);
 8000596:	2064      	movs	r0, #100	@ 0x64
 8000598:	f000 ff32 	bl	8001400 <HAL_Delay>
  {

     //YOUYA_QIYA_Detect();
     //EBS_Able_Detect();
     //AS_State_Detect();
	  if(adc_to_convert==1)
 800059c:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <main+0x88>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d1fa      	bne.n	800059c <main+0x60>
	  {
	  adc_to_convert=0;
 80005a6:	4b07      	ldr	r3, [pc, #28]	@ (80005c4 <main+0x88>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
	  YOUYA_QIYA_Detect();
 80005ac:	f000 fc06 	bl	8000dbc <YOUYA_QIYA_Detect>
	  if(adc_to_convert==1)
 80005b0:	e7f4      	b.n	800059c <main+0x60>
 80005b2:	bf00      	nop
 80005b4:	2000008a 	.word	0x2000008a
 80005b8:	2000008b 	.word	0x2000008b
 80005bc:	2000008e 	.word	0x2000008e
 80005c0:	200000e0 	.word	0x200000e0
 80005c4:	2000008c 	.word	0x2000008c

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	@ 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005d2:	2228      	movs	r2, #40	@ 0x28
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f004 ff46 	bl	8005468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000600:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000606:	2301      	movs	r3, #1
 8000608:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000612:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000614:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000618:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fe46 	bl	80032b0 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800062a:	f000 f828 	bl	800067e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800063e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	2102      	movs	r1, #2
 800064a:	4618      	mov	r0, r3
 800064c:	f003 f8b2 	bl	80037b4 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000656:	f000 f812 	bl	800067e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800065a:	2302      	movs	r3, #2
 800065c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800065e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000662:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	4618      	mov	r0, r3
 8000668:	f003 fa32 	bl	8003ad0 <HAL_RCCEx_PeriphCLKConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000672:	f000 f804 	bl	800067e <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	@ 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000682:	b672      	cpsid	i
}
 8000684:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000686:	bf00      	nop
 8000688:	e7fd      	b.n	8000686 <Error_Handler+0x8>
	...

0800068c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000692:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <HAL_MspInit+0x5c>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	4a14      	ldr	r2, [pc, #80]	@ (80006e8 <HAL_MspInit+0x5c>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6193      	str	r3, [r2, #24]
 800069e:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <HAL_MspInit+0x5c>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <HAL_MspInit+0x5c>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	4a0e      	ldr	r2, [pc, #56]	@ (80006e8 <HAL_MspInit+0x5c>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b4:	61d3      	str	r3, [r2, #28]
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <HAL_MspInit+0x5c>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006c2:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <HAL_MspInit+0x60>)
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <HAL_MspInit+0x60>)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	40021000 	.word	0x40021000
 80006ec:	40010000 	.word	0x40010000

080006f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <NMI_Handler+0x4>

080006f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <MemManage_Handler+0x4>

08000708 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <BusFault_Handler+0x4>

08000710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <UsageFault_Handler+0x4>

08000718 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 fe42 	bl	80013c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 800074c:	4802      	ldr	r0, [pc, #8]	@ (8000758 <DMA1_Channel1_IRQHandler+0x10>)
 800074e:	f002 faaf 	bl	8002cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000170 	.word	0x20000170

0800075c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000760:	4802      	ldr	r0, [pc, #8]	@ (800076c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000762:	f001 feb9 	bl	80024d8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000058 	.word	0x20000058

08000770 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000774:	4802      	ldr	r0, [pc, #8]	@ (8000780 <TIM3_IRQHandler+0x10>)
 8000776:	f003 fdb3 	bl	80042e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000e0 	.word	0x200000e0

08000784 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000824 <MX_TIM2_Init+0x94>)
 80007ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <MX_TIM2_Init+0x94>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000824 <MX_TIM2_Init+0x94>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 80007c0:	4b18      	ldr	r3, [pc, #96]	@ (8000824 <MX_TIM2_Init+0x94>)
 80007c2:	2259      	movs	r2, #89	@ 0x59
 80007c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c6:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <MX_TIM2_Init+0x94>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007cc:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <MX_TIM2_Init+0x94>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007d2:	4814      	ldr	r0, [pc, #80]	@ (8000824 <MX_TIM2_Init+0x94>)
 80007d4:	f003 fae8 	bl	8003da8 <HAL_TIM_Base_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80007de:	f7ff ff4e 	bl	800067e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	4619      	mov	r1, r3
 80007ee:	480d      	ldr	r0, [pc, #52]	@ (8000824 <MX_TIM2_Init+0x94>)
 80007f0:	f003 ff28 	bl	8004644 <HAL_TIM_ConfigClockSource>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80007fa:	f7ff ff40 	bl	800067e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	@ (8000824 <MX_TIM2_Init+0x94>)
 800080c:	f004 fb98 	bl	8004f40 <HAL_TIMEx_MasterConfigSynchronization>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000816:	f7ff ff32 	bl	800067e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000098 	.word	0x20000098

08000828 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08e      	sub	sp, #56	@ 0x38
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083c:	f107 0320 	add.w	r3, r7, #32
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
 8000854:	615a      	str	r2, [r3, #20]
 8000856:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000858:	4b32      	ldr	r3, [pc, #200]	@ (8000924 <MX_TIM3_Init+0xfc>)
 800085a:	4a33      	ldr	r2, [pc, #204]	@ (8000928 <MX_TIM3_Init+0x100>)
 800085c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 800085e:	4b31      	ldr	r3, [pc, #196]	@ (8000924 <MX_TIM3_Init+0xfc>)
 8000860:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000864:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b2f      	ldr	r3, [pc, #188]	@ (8000924 <MX_TIM3_Init+0xfc>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800086c:	4b2d      	ldr	r3, [pc, #180]	@ (8000924 <MX_TIM3_Init+0xfc>)
 800086e:	2263      	movs	r2, #99	@ 0x63
 8000870:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000872:	4b2c      	ldr	r3, [pc, #176]	@ (8000924 <MX_TIM3_Init+0xfc>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000878:	4b2a      	ldr	r3, [pc, #168]	@ (8000924 <MX_TIM3_Init+0xfc>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800087e:	4829      	ldr	r0, [pc, #164]	@ (8000924 <MX_TIM3_Init+0xfc>)
 8000880:	f003 fa92 	bl	8003da8 <HAL_TIM_Base_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800088a:	f7ff fef8 	bl	800067e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000892:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000894:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000898:	4619      	mov	r1, r3
 800089a:	4822      	ldr	r0, [pc, #136]	@ (8000924 <MX_TIM3_Init+0xfc>)
 800089c:	f003 fed2 	bl	8004644 <HAL_TIM_ConfigClockSource>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80008a6:	f7ff feea 	bl	800067e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008aa:	481e      	ldr	r0, [pc, #120]	@ (8000924 <MX_TIM3_Init+0xfc>)
 80008ac:	f003 fb1e 	bl	8003eec <HAL_TIM_PWM_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80008b6:	f7ff fee2 	bl	800067e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008c2:	f107 0320 	add.w	r3, r7, #32
 80008c6:	4619      	mov	r1, r3
 80008c8:	4816      	ldr	r0, [pc, #88]	@ (8000924 <MX_TIM3_Init+0xfc>)
 80008ca:	f004 fb39 	bl	8004f40 <HAL_TIMEx_MasterConfigSynchronization>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80008d4:	f7ff fed3 	bl	800067e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d8:	2360      	movs	r3, #96	@ 0x60
 80008da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2200      	movs	r2, #0
 80008ec:	4619      	mov	r1, r3
 80008ee:	480d      	ldr	r0, [pc, #52]	@ (8000924 <MX_TIM3_Init+0xfc>)
 80008f0:	f003 fde6 	bl	80044c0 <HAL_TIM_PWM_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80008fa:	f7ff fec0 	bl	800067e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2204      	movs	r2, #4
 8000902:	4619      	mov	r1, r3
 8000904:	4807      	ldr	r0, [pc, #28]	@ (8000924 <MX_TIM3_Init+0xfc>)
 8000906:	f003 fddb 	bl	80044c0 <HAL_TIM_PWM_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000910:	f7ff feb5 	bl	800067e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000914:	4803      	ldr	r0, [pc, #12]	@ (8000924 <MX_TIM3_Init+0xfc>)
 8000916:	f000 f8f7 	bl	8000b08 <HAL_TIM_MspPostInit>

}
 800091a:	bf00      	nop
 800091c:	3738      	adds	r7, #56	@ 0x38
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200000e0 	.word	0x200000e0
 8000928:	40000400 	.word	0x40000400

0800092c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	@ 0x38
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000932:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]
 800095a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800095c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a10 <MX_TIM4_Init+0xe4>)
 800095e:	4a2d      	ldr	r2, [pc, #180]	@ (8000a14 <MX_TIM4_Init+0xe8>)
 8000960:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000962:	4b2b      	ldr	r3, [pc, #172]	@ (8000a10 <MX_TIM4_Init+0xe4>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b29      	ldr	r3, [pc, #164]	@ (8000a10 <MX_TIM4_Init+0xe4>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90-1;
 800096e:	4b28      	ldr	r3, [pc, #160]	@ (8000a10 <MX_TIM4_Init+0xe4>)
 8000970:	2259      	movs	r2, #89	@ 0x59
 8000972:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b26      	ldr	r3, [pc, #152]	@ (8000a10 <MX_TIM4_Init+0xe4>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097a:	4b25      	ldr	r3, [pc, #148]	@ (8000a10 <MX_TIM4_Init+0xe4>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000980:	4823      	ldr	r0, [pc, #140]	@ (8000a10 <MX_TIM4_Init+0xe4>)
 8000982:	f003 fa11 	bl	8003da8 <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800098c:	f7ff fe77 	bl	800067e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000994:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000996:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800099a:	4619      	mov	r1, r3
 800099c:	481c      	ldr	r0, [pc, #112]	@ (8000a10 <MX_TIM4_Init+0xe4>)
 800099e:	f003 fe51 	bl	8004644 <HAL_TIM_ConfigClockSource>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80009a8:	f7ff fe69 	bl	800067e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009ac:	4818      	ldr	r0, [pc, #96]	@ (8000a10 <MX_TIM4_Init+0xe4>)
 80009ae:	f003 fa9d 	bl	8003eec <HAL_TIM_PWM_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80009b8:	f7ff fe61 	bl	800067e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009c4:	f107 0320 	add.w	r3, r7, #32
 80009c8:	4619      	mov	r1, r3
 80009ca:	4811      	ldr	r0, [pc, #68]	@ (8000a10 <MX_TIM4_Init+0xe4>)
 80009cc:	f004 fab8 	bl	8004f40 <HAL_TIMEx_MasterConfigSynchronization>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80009d6:	f7ff fe52 	bl	800067e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009da:	2360      	movs	r3, #96	@ 0x60
 80009dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	4619      	mov	r1, r3
 80009f0:	4807      	ldr	r0, [pc, #28]	@ (8000a10 <MX_TIM4_Init+0xe4>)
 80009f2:	f003 fd65 	bl	80044c0 <HAL_TIM_PWM_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80009fc:	f7ff fe3f 	bl	800067e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a00:	4803      	ldr	r0, [pc, #12]	@ (8000a10 <MX_TIM4_Init+0xe4>)
 8000a02:	f000 f881 	bl	8000b08 <HAL_TIM_MspPostInit>

}
 8000a06:	bf00      	nop
 8000a08:	3738      	adds	r7, #56	@ 0x38
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000128 	.word	0x20000128
 8000a14:	40000800 	.word	0x40000800

08000a18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a28:	d10c      	bne.n	8000a44 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a2a:	4b32      	ldr	r3, [pc, #200]	@ (8000af4 <HAL_TIM_Base_MspInit+0xdc>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	4a31      	ldr	r2, [pc, #196]	@ (8000af4 <HAL_TIM_Base_MspInit+0xdc>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	61d3      	str	r3, [r2, #28]
 8000a36:	4b2f      	ldr	r3, [pc, #188]	@ (8000af4 <HAL_TIM_Base_MspInit+0xdc>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000a42:	e053      	b.n	8000aec <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM3)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a2b      	ldr	r2, [pc, #172]	@ (8000af8 <HAL_TIM_Base_MspInit+0xe0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d114      	bne.n	8000a78 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a4e:	4b29      	ldr	r3, [pc, #164]	@ (8000af4 <HAL_TIM_Base_MspInit+0xdc>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	4a28      	ldr	r2, [pc, #160]	@ (8000af4 <HAL_TIM_Base_MspInit+0xdc>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	61d3      	str	r3, [r2, #28]
 8000a5a:	4b26      	ldr	r3, [pc, #152]	@ (8000af4 <HAL_TIM_Base_MspInit+0xdc>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2102      	movs	r1, #2
 8000a6a:	201d      	movs	r0, #29
 8000a6c:	f002 f82f 	bl	8002ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a70:	201d      	movs	r0, #29
 8000a72:	f002 f848 	bl	8002b06 <HAL_NVIC_EnableIRQ>
}
 8000a76:	e039      	b.n	8000aec <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM4)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8000afc <HAL_TIM_Base_MspInit+0xe4>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d134      	bne.n	8000aec <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a82:	4b1c      	ldr	r3, [pc, #112]	@ (8000af4 <HAL_TIM_Base_MspInit+0xdc>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4a1b      	ldr	r2, [pc, #108]	@ (8000af4 <HAL_TIM_Base_MspInit+0xdc>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	61d3      	str	r3, [r2, #28]
 8000a8e:	4b19      	ldr	r3, [pc, #100]	@ (8000af4 <HAL_TIM_Base_MspInit+0xdc>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch1.Instance = DMA1_Channel1;
 8000a9a:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <HAL_TIM_Base_MspInit+0xe8>)
 8000a9c:	4a19      	ldr	r2, [pc, #100]	@ (8000b04 <HAL_TIM_Base_MspInit+0xec>)
 8000a9e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <HAL_TIM_Base_MspInit+0xe8>)
 8000aa2:	2210      	movs	r2, #16
 8000aa4:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa6:	4b16      	ldr	r3, [pc, #88]	@ (8000b00 <HAL_TIM_Base_MspInit+0xe8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000aac:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <HAL_TIM_Base_MspInit+0xe8>)
 8000aae:	2280      	movs	r2, #128	@ 0x80
 8000ab0:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <HAL_TIM_Base_MspInit+0xe8>)
 8000ab4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ab8:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <HAL_TIM_Base_MspInit+0xe8>)
 8000abc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ac0:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <HAL_TIM_Base_MspInit+0xe8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b00 <HAL_TIM_Base_MspInit+0xe8>)
 8000aca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ace:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8000ad0:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <HAL_TIM_Base_MspInit+0xe8>)
 8000ad2:	f002 f833 	bl	8002b3c <HAL_DMA_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_TIM_Base_MspInit+0xc8>
      Error_Handler();
 8000adc:	f7ff fdcf 	bl	800067e <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a07      	ldr	r2, [pc, #28]	@ (8000b00 <HAL_TIM_Base_MspInit+0xe8>)
 8000ae4:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ae6:	4a06      	ldr	r2, [pc, #24]	@ (8000b00 <HAL_TIM_Base_MspInit+0xe8>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000aec:	bf00      	nop
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40000400 	.word	0x40000400
 8000afc:	40000800 	.word	0x40000800
 8000b00:	20000170 	.word	0x20000170
 8000b04:	40020008 	.word	0x40020008

08000b08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a1e      	ldr	r2, [pc, #120]	@ (8000b9c <HAL_TIM_MspPostInit+0x94>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d118      	bne.n	8000b5a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba0 <HAL_TIM_MspPostInit+0x98>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ba0 <HAL_TIM_MspPostInit+0x98>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <HAL_TIM_MspPostInit+0x98>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_SERVO_BRAKE_Pin|PWM_STBY_Pin;
 8000b40:	23c0      	movs	r3, #192	@ 0xc0
 8000b42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4619      	mov	r1, r3
 8000b52:	4814      	ldr	r0, [pc, #80]	@ (8000ba4 <HAL_TIM_MspPostInit+0x9c>)
 8000b54:	f002 f9e0 	bl	8002f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000b58:	e01c      	b.n	8000b94 <HAL_TIM_MspPostInit+0x8c>
  else if(timHandle->Instance==TIM4)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ba8 <HAL_TIM_MspPostInit+0xa0>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d117      	bne.n	8000b94 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <HAL_TIM_MspPostInit+0x98>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba0 <HAL_TIM_MspPostInit+0x98>)
 8000b6a:	f043 0308 	orr.w	r3, r3, #8
 8000b6e:	6193      	str	r3, [r2, #24]
 8000b70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <HAL_TIM_MspPostInit+0x98>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	f003 0308 	and.w	r3, r3, #8
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ASSI_PWM_Pin;
 8000b7c:	2340      	movs	r3, #64	@ 0x40
 8000b7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2302      	movs	r3, #2
 8000b86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ASSI_PWM_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4807      	ldr	r0, [pc, #28]	@ (8000bac <HAL_TIM_MspPostInit+0xa4>)
 8000b90:	f002 f9c2 	bl	8002f18 <HAL_GPIO_Init>
}
 8000b94:	bf00      	nop
 8000b96:	3720      	adds	r7, #32
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40000400 	.word	0x40000400
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40010800 	.word	0x40010800
 8000ba8:	40000800 	.word	0x40000800
 8000bac:	40010c00 	.word	0x40010c00

08000bb0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <MX_USART1_UART_Init+0x4c>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	@ (8000c00 <MX_USART1_UART_Init+0x50>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <MX_USART1_UART_Init+0x4c>)
 8000bbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <MX_USART1_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <MX_USART1_UART_Init+0x4c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <MX_USART1_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <MX_USART1_UART_Init+0x4c>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <MX_USART1_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <MX_USART1_UART_Init+0x4c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <MX_USART1_UART_Init+0x4c>)
 8000be8:	f004 fa1a 	bl	8005020 <HAL_UART_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bf2:	f7ff fd44 	bl	800067e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200001b4 	.word	0x200001b4
 8000c00:	40013800 	.word	0x40013800

08000c04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000c90 <HAL_UART_MspInit+0x8c>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d131      	bne.n	8000c88 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c24:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <HAL_UART_MspInit+0x90>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a1a      	ldr	r2, [pc, #104]	@ (8000c94 <HAL_UART_MspInit+0x90>)
 8000c2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <HAL_UART_MspInit+0x90>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <HAL_UART_MspInit+0x90>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a14      	ldr	r2, [pc, #80]	@ (8000c94 <HAL_UART_MspInit+0x90>)
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <HAL_UART_MspInit+0x90>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	4619      	mov	r1, r3
 8000c68:	480b      	ldr	r0, [pc, #44]	@ (8000c98 <HAL_UART_MspInit+0x94>)
 8000c6a:	f002 f955 	bl	8002f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	4619      	mov	r1, r3
 8000c82:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <HAL_UART_MspInit+0x94>)
 8000c84:	f002 f948 	bl	8002f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c88:	bf00      	nop
 8000c8a:	3720      	adds	r7, #32
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40013800 	.word	0x40013800
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40010800 	.word	0x40010800

08000c9c <TS_State_Detect>:
 */

#include "user_AS_State.h"

void TS_State_Detect(void)//驱动系统检测，通过检测安全回路状态完成
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TS_DETECT_GPIO_Port, TS_DETECT_Pin)==GPIO_PIN_SET)//高电平，说明安全回路闭合，驱动系统激活
 8000ca0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ca4:	4810      	ldr	r0, [pc, #64]	@ (8000ce8 <TS_State_Detect+0x4c>)
 8000ca6:	f002 fabb 	bl	8003220 <HAL_GPIO_ReadPin>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d108      	bne.n	8000cc2 <TS_State_Detect+0x26>
	{
		if(TS_State==0)
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <TS_State_Detect+0x50>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d113      	bne.n	8000ce2 <TS_State_Detect+0x46>
		{
			TS_State=1;
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <TS_State_Detect+0x50>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
		if(TS_State==1)
		{
			TS_State=0;
		}
	}
}
 8000cc0:	e00f      	b.n	8000ce2 <TS_State_Detect+0x46>
	else if(HAL_GPIO_ReadPin(TS_DETECT_GPIO_Port, TS_DETECT_Pin)==GPIO_PIN_RESET)////低电平，说明安全回路断开，驱动系统未激活
 8000cc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cc6:	4808      	ldr	r0, [pc, #32]	@ (8000ce8 <TS_State_Detect+0x4c>)
 8000cc8:	f002 faaa 	bl	8003220 <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d107      	bne.n	8000ce2 <TS_State_Detect+0x46>
		if(TS_State==1)
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <TS_State_Detect+0x50>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d102      	bne.n	8000ce2 <TS_State_Detect+0x46>
			TS_State=0;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	@ (8000cec <TS_State_Detect+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40010c00 	.word	0x40010c00
 8000cec:	2000008a 	.word	0x2000008a

08000cf0 <ASMS_State_Detect>:

void ASMS_State_Detect(void)//检测ASMS是否闭合，无人回路是否导通
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(ASMS_DETECT_GPIO_Port, ASMS_DETECT_Pin)==GPIO_PIN_SET)//高电平，说明ASMS闭合，无人回路导通
 8000cf4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cf8:	4807      	ldr	r0, [pc, #28]	@ (8000d18 <ASMS_State_Detect+0x28>)
 8000cfa:	f002 fa91 	bl	8003220 <HAL_GPIO_ReadPin>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d103      	bne.n	8000d0c <ASMS_State_Detect+0x1c>
	{


		   ASMS_State=1;
 8000d04:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <ASMS_State_Detect+0x2c>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
	{

			ASMS_State=0;
	}

}
 8000d0a:	e002      	b.n	8000d12 <ASMS_State_Detect+0x22>
			ASMS_State=0;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	@ (8000d1c <ASMS_State_Detect+0x2c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40010c00 	.word	0x40010c00
 8000d1c:	2000008b 	.word	0x2000008b

08000d20 <get_adc_value>:
 */

#include "user_adc.h"
#include <stdint.h>
uint32_t get_adc_value(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000d24:	4806      	ldr	r0, [pc, #24]	@ (8000d40 <get_adc_value+0x20>)
 8000d26:	f000 fc67 	bl	80015f8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4804      	ldr	r0, [pc, #16]	@ (8000d40 <get_adc_value+0x20>)
 8000d2e:	f000 fd11 	bl	8001754 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 8000d32:	4803      	ldr	r0, [pc, #12]	@ (8000d40 <get_adc_value+0x20>)
 8000d34:	f000 fe14 	bl	8001960 <HAL_ADC_GetValue>
 8000d38:	4603      	mov	r3, r0

}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000028 	.word	0x20000028

08000d44 <qiya_compare>:

void qiya_compare(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
	 if(adc_value[1]<500||adc_value[1]>3000)
 8000d48:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <qiya_compare+0x34>)
 8000d4a:	885b      	ldrh	r3, [r3, #2]
 8000d4c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d50:	d305      	bcc.n	8000d5e <qiya_compare+0x1a>
 8000d52:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <qiya_compare+0x34>)
 8000d54:	885b      	ldrh	r3, [r3, #2]
 8000d56:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d903      	bls.n	8000d66 <qiya_compare+0x22>
	 {
		 QIYA_State=QIYA_Error;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <qiya_compare+0x38>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	e003      	b.n	8000d6e <qiya_compare+0x2a>
	 }
	 else
	 {
		 QIYA_State=QIYA_OK;
 8000d66:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <qiya_compare+0x38>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	701a      	strb	r2, [r3, #0]
	 }

}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000080 	.word	0x20000080
 8000d7c:	20000089 	.word	0x20000089

08000d80 <youya_compare>:

void youya_compare(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
	if(adc_value[2]<500||adc_value[2]>3000)
 8000d84:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <youya_compare+0x34>)
 8000d86:	889b      	ldrh	r3, [r3, #4]
 8000d88:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d8c:	d305      	bcc.n	8000d9a <youya_compare+0x1a>
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <youya_compare+0x34>)
 8000d90:	889b      	ldrh	r3, [r3, #4]
 8000d92:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d903      	bls.n	8000da2 <youya_compare+0x22>
		 {
			 YOUYA_State=YOUYA_Error;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	@ (8000db8 <youya_compare+0x38>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e003      	b.n	8000daa <youya_compare+0x2a>
		 }
		 else
		 {
			 YOUYA_State=YOUYA_OK;
 8000da2:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <youya_compare+0x38>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	701a      	strb	r2, [r3, #0]
		 }
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000080 	.word	0x20000080
 8000db8:	20000088 	.word	0x20000088

08000dbc <YOUYA_QIYA_Detect>:
void YOUYA_QIYA_Detect(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
	 for(int i=0;i<4;i++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	e00a      	b.n	8000dde <YOUYA_QIYA_Detect+0x22>
		  {
			  adc_value[i]=get_adc_value();
 8000dc8:	f7ff ffaa 	bl	8000d20 <get_adc_value>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b299      	uxth	r1, r3
 8000dd0:	4a08      	ldr	r2, [pc, #32]	@ (8000df4 <YOUYA_QIYA_Detect+0x38>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	 for(int i=0;i<4;i++)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	ddf1      	ble.n	8000dc8 <YOUYA_QIYA_Detect+0xc>
		  }
	 qiya_compare();
 8000de4:	f7ff ffae 	bl	8000d44 <qiya_compare>
	 youya_compare();
 8000de8:	f7ff ffca 	bl	8000d80 <youya_compare>


}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000080 	.word	0x20000080

08000df8 <CAN_Init>:
const uint8_t CAN_AS_Finished_Status=0x05;
const uint8_t CAN_AS_Emergency_Status=0x06;
const uint8_t CAN_EBS_ERR_Status=0x07;

void CAN_Init()
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	CAN_Filter0_Config();
 8000dfc:	f000 f826 	bl	8000e4c <CAN_Filter0_Config>
	HAL_CAN_Start(&hcan);
 8000e00:	4804      	ldr	r0, [pc, #16]	@ (8000e14 <CAN_Init+0x1c>)
 8000e02:	f001 f910 	bl	8002026 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e06:	2102      	movs	r1, #2
 8000e08:	4802      	ldr	r0, [pc, #8]	@ (8000e14 <CAN_Init+0x1c>)
 8000e0a:	f001 fb40 	bl	800248e <HAL_CAN_ActivateNotification>
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000058 	.word	0x20000058

08000e18 <HAL_CAN_RxFifo0MsgPendingCallback>:

//FIFO0回调重写
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	@ 0x30
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
   // HAL_UART_Transmit(&huart1, "CAN_ItMsg Succeed", 19, 10);

    //HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rx_header, rx_data);

   // HAL_UART_Transmit(&huart1, "CAN_ReadMsg Succeed", 19, 10);
    while (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
 8000e20:	bf00      	nop
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	f107 0214 	add.w	r2, r7, #20
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	f001 fa0d 	bl	800224c <HAL_CAN_GetRxMessage>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0f4      	beq.n	8000e22 <HAL_CAN_RxFifo0MsgPendingCallback+0xa>

    }
    }
    //CAN_SendBack(rx_data);
    // 重新激活中断
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2102      	movs	r1, #2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 fb26 	bl	800248e <HAL_CAN_ActivateNotification>
}
 8000e42:	bf00      	nop
 8000e44:	3730      	adds	r7, #48	@ 0x30
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <CAN_Filter0_Config>:


void CAN_Filter0_Config(void) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	@ 0x28
 8000e50:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef canFilter;

    // 基本参数
    canFilter.FilterBank = 0;               // 使用过滤器组0
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
    canFilter.FilterMode = CAN_FILTERMODE_IDMASK;   // 屏蔽位模式
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
    canFilter.FilterScale = CAN_FILTERSCALE_32BIT;  // 32位精度
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	61fb      	str	r3, [r7, #28]
    canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0; // 数据存入FIFO0
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
    canFilter.FilterActivation = ENABLE;     // 启用过滤器
 8000e62:	2301      	movs	r3, #1
 8000e64:	623b      	str	r3, [r7, #32]

    // ID与掩码计算（标准帧ID=0x101）
    canFilter.FilterIdHigh = 0x101 << 5;     // ID左移5位对齐寄存器高位
 8000e66:	f242 0320 	movw	r3, #8224	@ 0x2020
 8000e6a:	603b      	str	r3, [r7, #0]
    canFilter.FilterIdLow = 0x0000;          // 低16位未使用
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
    canFilter.FilterMaskIdHigh = 0x7FF << 5; // 掩码高11位全匹配（0x7FF=11位全1）  即屏蔽码
 8000e70:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000e74:	60bb      	str	r3, [r7, #8]
    canFilter.FilterMaskIdLow = 0x0006;      // 强制IDE=0（标准帧）+ RTR=0（数据帧）
 8000e76:	2306      	movs	r3, #6
 8000e78:	60fb      	str	r3, [r7, #12]

    // 应用配置
    HAL_CAN_ConfigFilter(&hcan, &canFilter);
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4803      	ldr	r0, [pc, #12]	@ (8000e8c <CAN_Filter0_Config+0x40>)
 8000e80:	f001 f808 	bl	8001e94 <HAL_CAN_ConfigFilter>
}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	@ 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000058 	.word	0x20000058

08000e90 <CAN_SendMessage>:
	        {
	            // 发送失败处理
	        }
}

void CAN_SendMessage(uint8_t Send_Id,uint16_t Value){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08c      	sub	sp, #48	@ 0x30
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	460a      	mov	r2, r1
 8000e9a:	71fb      	strb	r3, [r7, #7]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	80bb      	strh	r3, [r7, #4]

    CAN_TxHeaderTypeDef TxHeader;
    uint8_t TxData[8];
    uint32_t TxMailbox;
    TxHeader.StdId = 0x101;      // 标准CAN ID
 8000ea0:	f240 1301 	movw	r3, #257	@ 0x101
 8000ea4:	61bb      	str	r3, [r7, #24]
    TxHeader.RTR = CAN_RTR_DATA; 		// 数据帧
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.IDE = CAN_ID_STD;   		// 使用标准ID
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
    TxHeader.DLC = 8;            		// 数据长度码，表示8字节数据
 8000eae:	2308      	movs	r3, #8
 8000eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.TransmitGlobalTime = DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    TxData[0] = Send_Id;
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	743b      	strb	r3, [r7, #16]
    TxData[1] = (Value >> 8);
 8000ebc:	88bb      	ldrh	r3, [r7, #4]
 8000ebe:	0a1b      	lsrs	r3, r3, #8
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	747b      	strb	r3, [r7, #17]
    TxData[2] = (Value & 0xFF);
 8000ec6:	88bb      	ldrh	r3, [r7, #4]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	74bb      	strb	r3, [r7, #18]
    TxData[3] = 0x00;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	74fb      	strb	r3, [r7, #19]
    TxData[4] = 0x00;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	753b      	strb	r3, [r7, #20]
    TxData[5] = 0x00;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	757b      	strb	r3, [r7, #21]
    TxData[6] = 0x00;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	75bb      	strb	r3, [r7, #22]
    TxData[7] = 0x00;
 8000edc:	2300      	movs	r3, #0
 8000ede:	75fb      	strb	r3, [r7, #23]
    if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	f107 0210 	add.w	r2, r7, #16
 8000ee8:	f107 0118 	add.w	r1, r7, #24
 8000eec:	480b      	ldr	r0, [pc, #44]	@ (8000f1c <CAN_SendMessage+0x8c>)
 8000eee:	f001 f8de 	bl	80020ae <HAL_CAN_AddTxMessage>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <CAN_SendMessage+0x76>
    {
    	 HAL_UART_Transmit(&huart1, "CAN_Send Error", 14, 10);
 8000ef8:	230a      	movs	r3, #10
 8000efa:	220e      	movs	r2, #14
 8000efc:	4908      	ldr	r1, [pc, #32]	@ (8000f20 <CAN_SendMessage+0x90>)
 8000efe:	4809      	ldr	r0, [pc, #36]	@ (8000f24 <CAN_SendMessage+0x94>)
 8000f00:	f004 f8de 	bl	80050c0 <HAL_UART_Transmit>
    {
    	// HAL_Delay(50);
    	 HAL_UART_Transmit(&huart1, "CAN_Send Succeed", 16, 10);

    }
}
 8000f04:	e005      	b.n	8000f12 <CAN_SendMessage+0x82>
    	 HAL_UART_Transmit(&huart1, "CAN_Send Succeed", 16, 10);
 8000f06:	230a      	movs	r3, #10
 8000f08:	2210      	movs	r2, #16
 8000f0a:	4907      	ldr	r1, [pc, #28]	@ (8000f28 <CAN_SendMessage+0x98>)
 8000f0c:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <CAN_SendMessage+0x94>)
 8000f0e:	f004 f8d7 	bl	80050c0 <HAL_UART_Transmit>
}
 8000f12:	bf00      	nop
 8000f14:	3730      	adds	r7, #48	@ 0x30
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000058 	.word	0x20000058
 8000f20:	080054d8 	.word	0x080054d8
 8000f24:	200001b4 	.word	0x200001b4
 8000f28:	080054e8 	.word	0x080054e8

08000f2c <BEE_Activate>:
 *      Author: 24116
 */
#include "user_peripheral.h"
//蜂鸣器控制
void BEE_Activate(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BEE_JDQ_GPIO_Port, BEE_JDQ_Pin)==GPIO_PIN_RESET)
 8000f30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f34:	4806      	ldr	r0, [pc, #24]	@ (8000f50 <BEE_Activate+0x24>)
 8000f36:	f002 f973 	bl	8003220 <HAL_GPIO_ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d105      	bne.n	8000f4c <BEE_Activate+0x20>
	{
		HAL_GPIO_WritePin(BEE_JDQ_GPIO_Port, BEE_JDQ_Pin, GPIO_PIN_SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f46:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <BEE_Activate+0x24>)
 8000f48:	f002 f981 	bl	800324e <HAL_GPIO_WritePin>
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40011000 	.word	0x40011000

08000f54 <BEE_DeActivate>:

void BEE_DeActivate(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BEE_JDQ_GPIO_Port, BEE_JDQ_Pin)==GPIO_PIN_SET)
 8000f58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f5c:	4806      	ldr	r0, [pc, #24]	@ (8000f78 <BEE_DeActivate+0x24>)
 8000f5e:	f002 f95f 	bl	8003220 <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d105      	bne.n	8000f74 <BEE_DeActivate+0x20>
	{
		HAL_GPIO_WritePin(BEE_JDQ_GPIO_Port, BEE_JDQ_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f6e:	4802      	ldr	r0, [pc, #8]	@ (8000f78 <BEE_DeActivate+0x24>)
 8000f70:	f002 f96d 	bl	800324e <HAL_GPIO_WritePin>
	}
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40011000 	.word	0x40011000

08000f7c <DCF_DeActivate>:
		HAL_GPIO_WritePin(DCF_JDQ_GPIO_Port, DCF_JDQ_Pin, GPIO_PIN_SET);
	}
}

void DCF_DeActivate(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(DCF_JDQ_GPIO_Port, DCF_JDQ_Pin)==GPIO_PIN_SET)
 8000f80:	2102      	movs	r1, #2
 8000f82:	4806      	ldr	r0, [pc, #24]	@ (8000f9c <DCF_DeActivate+0x20>)
 8000f84:	f002 f94c 	bl	8003220 <HAL_GPIO_ReadPin>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d104      	bne.n	8000f98 <DCF_DeActivate+0x1c>
	{
		HAL_GPIO_WritePin(DCF_JDQ_GPIO_Port, DCF_JDQ_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2102      	movs	r1, #2
 8000f92:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <DCF_DeActivate+0x20>)
 8000f94:	f002 f95b 	bl	800324e <HAL_GPIO_WritePin>
	}
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40010c00 	.word	0x40010c00

08000fa0 <EBS_Error_LED_Activate>:

//EBS故障灯
void EBS_Error_LED_Activate(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0

		HAL_GPIO_WritePin(EBS_ERR_GPIO_Port, EBS_ERR_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000faa:	4802      	ldr	r0, [pc, #8]	@ (8000fb4 <EBS_Error_LED_Activate+0x14>)
 8000fac:	f002 f94f 	bl	800324e <HAL_GPIO_WritePin>

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40010c00 	.word	0x40010c00

08000fb8 <Reset_Load>:
/*
功能：最后一行装在24个0，输出24个周期占空比为0的PWM波，作为最后reset延时，这里总时长为24*1.25=37.5us > 24us(要求大于24us)
//如果出现无法复位的情况，只需要在增加数组Pixel_Buf[Pixel_NUM+1][24]的行数，并改写Reset_Load即可，这里不做演示了，
*/
 void Reset_Load(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i=0;i<24;i++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	71fb      	strb	r3, [r7, #7]
 8000fc2:	e009      	b.n	8000fd8 <Reset_Load+0x20>
	{
		Pixel_Buf[Pixel_NUM][i] = 0;
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	4a09      	ldr	r2, [pc, #36]	@ (8000fec <Reset_Load+0x34>)
 8000fc8:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000fcc:	2100      	movs	r1, #0
 8000fce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i=0;i<24;i++)
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	71fb      	strb	r3, [r7, #7]
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b17      	cmp	r3, #23
 8000fdc:	d9f2      	bls.n	8000fc4 <Reset_Load+0xc>

	}
}
 8000fde:	bf00      	nop
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	200001fc 	.word	0x200001fc

08000ff0 <RGB_SendArray>:
功能：发送数组Pixel_Buf[Pixel_NUM+1][24]内的数据，发送的数据被存储到定时器1通道1的CCR寄存器，用于控制PWM占空比
参数：(&htim1)定时器1，(TIM_CHANNEL_1)通道1，((uint32_t *)Pixel_Buf)待发送数组，
			(Pixel_NUM+1)*24)发送个数，数组行列相乘
*/
  void RGB_SendArray(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t *)Pixel_Buf,(Pixel_NUM+1)*24);
 8000ff4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8000ff8:	4a03      	ldr	r2, [pc, #12]	@ (8001008 <RGB_SendArray+0x18>)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4803      	ldr	r0, [pc, #12]	@ (800100c <RGB_SendArray+0x1c>)
 8000ffe:	f002 ffcd 	bl	8003f9c <HAL_TIM_PWM_Start_DMA>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200001fc 	.word	0x200001fc
 800100c:	20000128 	.word	0x20000128

08001010 <RGB_Flush>:


 //刷新WS2812B灯板显示函数
 void RGB_Flush(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
    Reset_Load();     //复位
 8001014:	f7ff ffd0 	bl	8000fb8 <Reset_Load>
    RGB_SendArray();  //发送数据
 8001018:	f7ff ffea 	bl	8000ff0 <RGB_SendArray>


}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <ASSI_Set_Black>:
    {
        RGB_SetOne_Color(i,color) ;
    }
}
void ASSI_Set_Black(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
	 for(int j=0;j<Pixel_NUM;j++)
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	e016      	b.n	800105a <ASSI_Set_Black+0x3a>
	    {
	    	for(int i=0;i<24;i++)
 800102c:	2300      	movs	r3, #0
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	e00d      	b.n	800104e <ASSI_Set_Black+0x2e>
	    		{
	    			Pixel_Buf[j][i] = Code0;
 8001032:	490e      	ldr	r1, [pc, #56]	@ (800106c <ASSI_Set_Black+0x4c>)
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	4413      	add	r3, r2
 8001042:	221e      	movs	r2, #30
 8001044:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	    	for(int i=0;i<24;i++)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	603b      	str	r3, [r7, #0]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	2b17      	cmp	r3, #23
 8001052:	ddee      	ble.n	8001032 <ASSI_Set_Black+0x12>
	 for(int j=0;j<Pixel_NUM;j++)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3301      	adds	r3, #1
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b3f      	cmp	r3, #63	@ 0x3f
 800105e:	dde5      	ble.n	800102c <ASSI_Set_Black+0xc>

	    		}
	    }
	 RGB_Flush();
 8001060:	f7ff ffd6 	bl	8001010 <RGB_Flush>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200001fc 	.word	0x200001fc

08001070 <ASSI_Set_Blue>:
void ASSI_Set_Blue(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0

	for(int j=0;j<Pixel_NUM;j++)
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	e03e      	b.n	80010fa <ASSI_Set_Blue+0x8a>
	    {
	    	for(int i=0;i<8;i++)//green
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	e00d      	b.n	800109e <ASSI_Set_Blue+0x2e>
	    		{
	    			Pixel_Buf[j][i] = Code0;
 8001082:	4922      	ldr	r1, [pc, #136]	@ (800110c <ASSI_Set_Blue+0x9c>)
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4613      	mov	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	4413      	add	r3, r2
 8001092:	221e      	movs	r2, #30
 8001094:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	    	for(int i=0;i<8;i++)//green
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	3301      	adds	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	2b07      	cmp	r3, #7
 80010a2:	ddee      	ble.n	8001082 <ASSI_Set_Blue+0x12>

	    		}
	    	for(int i=8;i<16;i++)//red
 80010a4:	2308      	movs	r3, #8
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	e00d      	b.n	80010c6 <ASSI_Set_Blue+0x56>
	    		{
	    		   	Pixel_Buf[j][i] = Code0;
 80010aa:	4918      	ldr	r1, [pc, #96]	@ (800110c <ASSI_Set_Blue+0x9c>)
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	221e      	movs	r2, #30
 80010bc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	    	for(int i=8;i<16;i++)//red
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3301      	adds	r3, #1
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	ddee      	ble.n	80010aa <ASSI_Set_Blue+0x3a>

	    		}
	    	for(int i=16;i<24;i++)//blue
 80010cc:	2310      	movs	r3, #16
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	e00d      	b.n	80010ee <ASSI_Set_Blue+0x7e>
	    	{
	    		Pixel_Buf[j][i] = Code1;
 80010d2:	490e      	ldr	r1, [pc, #56]	@ (800110c <ASSI_Set_Blue+0x9c>)
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	4413      	add	r3, r2
 80010e2:	223c      	movs	r2, #60	@ 0x3c
 80010e4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	    	for(int i=16;i<24;i++)//blue
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2b17      	cmp	r3, #23
 80010f2:	ddee      	ble.n	80010d2 <ASSI_Set_Blue+0x62>
	for(int j=0;j<Pixel_NUM;j++)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3301      	adds	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80010fe:	ddbd      	ble.n	800107c <ASSI_Set_Blue+0xc>
	    	}
	    }
	 RGB_Flush();
 8001100:	f7ff ff86 	bl	8001010 <RGB_Flush>

}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200001fc 	.word	0x200001fc

08001110 <ASSI_Set_Yellow>:
void ASSI_Set_Yellow(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0

	for(int j=0;j<Pixel_NUM;j++)
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	e03e      	b.n	800119a <ASSI_Set_Yellow+0x8a>
	    {

	    	for(int i=0;i<8;i++)
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	e00d      	b.n	800113e <ASSI_Set_Yellow+0x2e>
	    		{
	    			Pixel_Buf[j][i] = Code1;//G
 8001122:	4922      	ldr	r1, [pc, #136]	@ (80011ac <ASSI_Set_Yellow+0x9c>)
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	4413      	add	r3, r2
 8001132:	223c      	movs	r2, #60	@ 0x3c
 8001134:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	    	for(int i=0;i<8;i++)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	3301      	adds	r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	2b07      	cmp	r3, #7
 8001142:	ddee      	ble.n	8001122 <ASSI_Set_Yellow+0x12>

	    		}
	    	for(int i=8;i<16;i++)
 8001144:	2308      	movs	r3, #8
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	e00d      	b.n	8001166 <ASSI_Set_Yellow+0x56>
	    	{
	    		Pixel_Buf[j][i] = Code1;//R
 800114a:	4918      	ldr	r1, [pc, #96]	@ (80011ac <ASSI_Set_Yellow+0x9c>)
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	4613      	mov	r3, r2
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	4413      	add	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	223c      	movs	r2, #60	@ 0x3c
 800115c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	    	for(int i=8;i<16;i++)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3301      	adds	r3, #1
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	ddee      	ble.n	800114a <ASSI_Set_Yellow+0x3a>
	    	}
	    	for(int i=16;i<24;i++)
 800116c:	2310      	movs	r3, #16
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	e00d      	b.n	800118e <ASSI_Set_Yellow+0x7e>
	    	{
	    		 Pixel_Buf[j][i] = Code0;//B
 8001172:	490e      	ldr	r1, [pc, #56]	@ (80011ac <ASSI_Set_Yellow+0x9c>)
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	4413      	add	r3, r2
 8001182:	221e      	movs	r2, #30
 8001184:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	    	for(int i=16;i<24;i++)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	2b17      	cmp	r3, #23
 8001192:	ddee      	ble.n	8001172 <ASSI_Set_Yellow+0x62>
	for(int j=0;j<Pixel_NUM;j++)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3301      	adds	r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b3f      	cmp	r3, #63	@ 0x3f
 800119e:	ddbd      	ble.n	800111c <ASSI_Set_Yellow+0xc>
	    	}
	    }
	 RGB_Flush();
 80011a0:	f7ff ff36 	bl	8001010 <RGB_Flush>

}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200001fc 	.word	0x200001fc

080011b0 <HAL_TIM_PeriodElapsedCallback>:
{
	blink_enabled=2;
}
//TIM中断的重写
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)//控制ASSI闪烁
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a44      	ldr	r2, [pc, #272]	@ (80012d0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	f040 8082 	bne.w	80012c8 <HAL_TIM_PeriodElapsedCallback+0x118>
	{
		 WDOG_num++;
 80011c4:	4b43      	ldr	r3, [pc, #268]	@ (80012d4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	4a42      	ldr	r2, [pc, #264]	@ (80012d4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80011cc:	6013      	str	r3, [r2, #0]
		 if(WDOG_num==5)
 80011ce:	4b41      	ldr	r3, [pc, #260]	@ (80012d4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b05      	cmp	r3, #5
 80011d4:	d127      	bne.n	8001226 <HAL_TIM_PeriodElapsedCallback+0x76>
		 {

			 if(BEE_enabled==1)//EBS间歇蜂鸣
 80011d6:	4b40      	ldr	r3, [pc, #256]	@ (80012d8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d116      	bne.n	800120e <HAL_TIM_PeriodElapsedCallback+0x5e>
						 		{
				 	 	 	 	 	 BEE_Sparkle_state ^= 1;
 80011e0:	4b3e      	ldr	r3, [pc, #248]	@ (80012dc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f083 0301 	eor.w	r3, r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b3b      	ldr	r3, [pc, #236]	@ (80012dc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80011ee:	701a      	strb	r2, [r3, #0]
						 		    if(BEE_Sparkle_state)
 80011f0:	4b3a      	ldr	r3, [pc, #232]	@ (80012dc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_TIM_PeriodElapsedCallback+0x4e>
						 		    {
						 		    	BEE_Activate();
 80011fa:	f7ff fe97 	bl	8000f2c <BEE_Activate>
						 		    }
						 		    if(!BEE_Sparkle_state)
 80011fe:	4b37      	ldr	r3, [pc, #220]	@ (80012dc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10e      	bne.n	8001226 <HAL_TIM_PeriodElapsedCallback+0x76>
						 		    {
						 		    	BEE_DeActivate();
 8001208:	f7ff fea4 	bl	8000f54 <BEE_DeActivate>
 800120c:	e00b      	b.n	8001226 <HAL_TIM_PeriodElapsedCallback+0x76>
						 		    }

						 		}
			else if(BEE_enabled==2)//GO鸣笛
 800120e:	4b32      	ldr	r3, [pc, #200]	@ (80012d8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d006      	beq.n	8001226 <HAL_TIM_PeriodElapsedCallback+0x76>
						 		{

						 		}
			else if(BEE_enabled==0)
 8001218:	4b2f      	ldr	r3, [pc, #188]	@ (80012d8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_TIM_PeriodElapsedCallback+0x76>
						 {
										BEE_DeActivate();
 8001222:	f7ff fe97 	bl	8000f54 <BEE_DeActivate>
						 }
			// ASMS_State=0;
			 //TS_State=0;
		 }
		 if(WDOG_num>=100)
 8001226:	4b2b      	ldr	r3, [pc, #172]	@ (80012d4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b63      	cmp	r3, #99	@ 0x63
 800122c:	dd4c      	ble.n	80012c8 <HAL_TIM_PeriodElapsedCallback+0x118>
		 {
			 WDOG_num=0;
 800122e:	4b29      	ldr	r3, [pc, #164]	@ (80012d4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
			 if(blink_enabled==1)//蓝灯闪烁
 8001234:	4b2a      	ldr	r3, [pc, #168]	@ (80012e0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b01      	cmp	r3, #1
 800123c:	d116      	bne.n	800126c <HAL_TIM_PeriodElapsedCallback+0xbc>
			 		{
			 			led_state ^= 1;
 800123e:	4b29      	ldr	r3, [pc, #164]	@ (80012e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	f083 0301 	eor.w	r3, r3, #1
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b26      	ldr	r3, [pc, #152]	@ (80012e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800124c:	701a      	strb	r2, [r3, #0]
			 		    if(led_state)
 800124e:	4b25      	ldr	r3, [pc, #148]	@ (80012e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_TIM_PeriodElapsedCallback+0xac>
			 		    {
			 		    	 ASSI_Set_Blue();
 8001258:	f7ff ff0a 	bl	8001070 <ASSI_Set_Blue>
			 		    }
			 		    if(!led_state)
 800125c:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d125      	bne.n	80012b2 <HAL_TIM_PeriodElapsedCallback+0x102>
			 		    {
			 		    	 ASSI_Set_Black();
 8001266:	f7ff fedb 	bl	8001020 <ASSI_Set_Black>
 800126a:	e022      	b.n	80012b2 <HAL_TIM_PeriodElapsedCallback+0x102>
			 		    }

			 		}
			 else if(blink_enabled==2)//黄灯闪烁
 800126c:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d116      	bne.n	80012a4 <HAL_TIM_PeriodElapsedCallback+0xf4>
			 		{
			 		    led_state ^= 1;
 8001276:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f083 0301 	eor.w	r3, r3, #1
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001284:	701a      	strb	r2, [r3, #0]
			 		    if(led_state)
 8001286:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_TIM_PeriodElapsedCallback+0xe4>
			 		   	 {
			 		   		  ASSI_Set_Yellow();
 8001290:	f7ff ff3e 	bl	8001110 <ASSI_Set_Yellow>
			 		     }
			 		    if(!led_state)
 8001294:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d109      	bne.n	80012b2 <HAL_TIM_PeriodElapsedCallback+0x102>
			 		     {
			 		   		  ASSI_Set_Black();
 800129e:	f7ff febf 	bl	8001020 <ASSI_Set_Black>
 80012a2:	e006      	b.n	80012b2 <HAL_TIM_PeriodElapsedCallback+0x102>
			 		     }
			 		}
			 else if(blink_enabled==0)
 80012a4:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_TIM_PeriodElapsedCallback+0x102>
			 {
				 ASSI_Set_Black();
 80012ae:	f7ff feb7 	bl	8001020 <ASSI_Set_Black>
			 }

		 adc_to_convert=1;
 80012b2:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	701a      	strb	r2, [r3, #0]
		 //ASMS_State=1;
		 //TS_State=1;
		 ASMS_State_Detect();
 80012b8:	f7ff fd1a 	bl	8000cf0 <ASMS_State_Detect>
		 TS_State_Detect();
 80012bc:	f7ff fcee 	bl	8000c9c <TS_State_Detect>
		 HAL_GPIO_TogglePin(WDOG_GPIO_Port, WDOG_Pin);
 80012c0:	2120      	movs	r1, #32
 80012c2:	480a      	ldr	r0, [pc, #40]	@ (80012ec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80012c4:	f001 ffdb 	bl	800327e <HAL_GPIO_TogglePin>
		if(EBS_Able_State==EBS_Disable)
		{
			CAN_Send_EBS_Disable();
		}*/
	//}
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40000400 	.word	0x40000400
 80012d4:	20000094 	.word	0x20000094
 80012d8:	2000008e 	.word	0x2000008e
 80012dc:	20000090 	.word	0x20000090
 80012e0:	2000008d 	.word	0x2000008d
 80012e4:	2000008f 	.word	0x2000008f
 80012e8:	2000008c 	.word	0x2000008c
 80012ec:	40010c00 	.word	0x40010c00

080012f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012f0:	f7ff fa48 	bl	8000784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f4:	480b      	ldr	r0, [pc, #44]	@ (8001324 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012f6:	490c      	ldr	r1, [pc, #48]	@ (8001328 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012f8:	4a0c      	ldr	r2, [pc, #48]	@ (800132c <LoopFillZerobss+0x16>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130a:	4a09      	ldr	r2, [pc, #36]	@ (8001330 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800130c:	4c09      	ldr	r4, [pc, #36]	@ (8001334 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800131a:	f004 f8ad 	bl	8005478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800131e:	f7ff f90d 	bl	800053c <main>
  bx lr
 8001322:	4770      	bx	lr
  ldr r0, =_sdata
 8001324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001328:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800132c:	08005544 	.word	0x08005544
  ldr r2, =_sbss
 8001330:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001334:	20000e30 	.word	0x20000e30

08001338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001338:	e7fe      	b.n	8001338 <ADC1_2_IRQHandler>
	...

0800133c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001340:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <HAL_Init+0x28>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a07      	ldr	r2, [pc, #28]	@ (8001364 <HAL_Init+0x28>)
 8001346:	f043 0310 	orr.w	r3, r3, #16
 800134a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134c:	2003      	movs	r0, #3
 800134e:	f001 fbb3 	bl	8002ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001352:	2000      	movs	r0, #0
 8001354:	f000 f808 	bl	8001368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001358:	f7ff f998 	bl	800068c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40022000 	.word	0x40022000

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <HAL_InitTick+0x54>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <HAL_InitTick+0x58>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800137e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f001 fbcb 	bl	8002b22 <HAL_SYSTICK_Config>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e00e      	b.n	80013b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d80a      	bhi.n	80013b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139c:	2200      	movs	r2, #0
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	f001 fb93 	bl	8002ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a8:	4a06      	ldr	r2, [pc, #24]	@ (80013c4 <HAL_InitTick+0x5c>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000008 	.word	0x20000008
 80013c4:	20000004 	.word	0x20000004

080013c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013cc:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <HAL_IncTick+0x1c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <HAL_IncTick+0x20>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a03      	ldr	r2, [pc, #12]	@ (80013e8 <HAL_IncTick+0x20>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	20000008 	.word	0x20000008
 80013e8:	20000e2c 	.word	0x20000e2c

080013ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b02      	ldr	r3, [pc, #8]	@ (80013fc <HAL_GetTick+0x10>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	20000e2c 	.word	0x20000e2c

08001400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001408:	f7ff fff0 	bl	80013ec <HAL_GetTick>
 800140c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001418:	d005      	beq.n	8001426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141a:	4b0a      	ldr	r3, [pc, #40]	@ (8001444 <HAL_Delay+0x44>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4413      	add	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001426:	bf00      	nop
 8001428:	f7ff ffe0 	bl	80013ec <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	429a      	cmp	r2, r3
 8001436:	d8f7      	bhi.n	8001428 <HAL_Delay+0x28>
  {
  }
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000008 	.word	0x20000008

08001448 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e0be      	b.n	80015e8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001474:	2b00      	cmp	r3, #0
 8001476:	d109      	bne.n	800148c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7fe fecc 	bl	8000224 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 fbc5 	bl	8001c1c <ADC_ConversionStop_Disable>
 8001492:	4603      	mov	r3, r0
 8001494:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f040 8099 	bne.w	80015d6 <HAL_ADC_Init+0x18e>
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f040 8095 	bne.w	80015d6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014b4:	f023 0302 	bic.w	r3, r3, #2
 80014b8:	f043 0202 	orr.w	r2, r3, #2
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	7b1b      	ldrb	r3, [r3, #12]
 80014ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014e0:	d003      	beq.n	80014ea <HAL_ADC_Init+0xa2>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d102      	bne.n	80014f0 <HAL_ADC_Init+0xa8>
 80014ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014ee:	e000      	b.n	80014f2 <HAL_ADC_Init+0xaa>
 80014f0:	2300      	movs	r3, #0
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7d1b      	ldrb	r3, [r3, #20]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d119      	bne.n	8001534 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7b1b      	ldrb	r3, [r3, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d109      	bne.n	800151c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	3b01      	subs	r3, #1
 800150e:	035a      	lsls	r2, r3, #13
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	e00b      	b.n	8001534 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001520:	f043 0220 	orr.w	r2, r3, #32
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800152c:	f043 0201 	orr.w	r2, r3, #1
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	430a      	orrs	r2, r1
 8001546:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	4b28      	ldr	r3, [pc, #160]	@ (80015f0 <HAL_ADC_Init+0x1a8>)
 8001550:	4013      	ands	r3, r2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	430b      	orrs	r3, r1
 800155a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001564:	d003      	beq.n	800156e <HAL_ADC_Init+0x126>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d104      	bne.n	8001578 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	3b01      	subs	r3, #1
 8001574:	051b      	lsls	r3, r3, #20
 8001576:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	430a      	orrs	r2, r1
 800158a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <HAL_ADC_Init+0x1ac>)
 8001594:	4013      	ands	r3, r2
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	429a      	cmp	r2, r3
 800159a:	d10b      	bne.n	80015b4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a6:	f023 0303 	bic.w	r3, r3, #3
 80015aa:	f043 0201 	orr.w	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015b2:	e018      	b.n	80015e6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b8:	f023 0312 	bic.w	r3, r3, #18
 80015bc:	f043 0210 	orr.w	r2, r3, #16
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c8:	f043 0201 	orr.w	r2, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015d4:	e007      	b.n	80015e6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015da:	f043 0210 	orr.w	r2, r3, #16
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	ffe1f7fd 	.word	0xffe1f7fd
 80015f4:	ff1f0efe 	.word	0xff1f0efe

080015f8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_ADC_Start+0x1a>
 800160e:	2302      	movs	r3, #2
 8001610:	e098      	b.n	8001744 <HAL_ADC_Start+0x14c>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 faa4 	bl	8001b68 <ADC_Enable>
 8001620:	4603      	mov	r3, r0
 8001622:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	2b00      	cmp	r3, #0
 8001628:	f040 8087 	bne.w	800173a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a41      	ldr	r2, [pc, #260]	@ (800174c <HAL_ADC_Start+0x154>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d105      	bne.n	8001656 <HAL_ADC_Start+0x5e>
 800164a:	4b41      	ldr	r3, [pc, #260]	@ (8001750 <HAL_ADC_Start+0x158>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d115      	bne.n	8001682 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800166c:	2b00      	cmp	r3, #0
 800166e:	d026      	beq.n	80016be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001674:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001678:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001680:	e01d      	b.n	80016be <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001686:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a2f      	ldr	r2, [pc, #188]	@ (8001750 <HAL_ADC_Start+0x158>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d004      	beq.n	80016a2 <HAL_ADC_Start+0xaa>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a2b      	ldr	r2, [pc, #172]	@ (800174c <HAL_ADC_Start+0x154>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d10d      	bne.n	80016be <HAL_ADC_Start+0xc6>
 80016a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001750 <HAL_ADC_Start+0x158>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d007      	beq.n	80016be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d006      	beq.n	80016d8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ce:	f023 0206 	bic.w	r2, r3, #6
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80016d6:	e002      	b.n	80016de <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f06f 0202 	mvn.w	r2, #2
 80016ee:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80016fa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80016fe:	d113      	bne.n	8001728 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001704:	4a11      	ldr	r2, [pc, #68]	@ (800174c <HAL_ADC_Start+0x154>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d105      	bne.n	8001716 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800170a:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <HAL_ADC_Start+0x158>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001712:	2b00      	cmp	r3, #0
 8001714:	d108      	bne.n	8001728 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	e00c      	b.n	8001742 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	e003      	b.n	8001742 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40012800 	.word	0x40012800
 8001750:	40012400 	.word	0x40012400

08001754 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800176a:	f7ff fe3f 	bl	80013ec <HAL_GetTick>
 800176e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00b      	beq.n	8001796 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001782:	f043 0220 	orr.w	r2, r3, #32
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0d3      	b.n	800193e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d131      	bne.n	8001808 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017aa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d12a      	bne.n	8001808 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80017b2:	e021      	b.n	80017f8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ba:	d01d      	beq.n	80017f8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d007      	beq.n	80017d2 <HAL_ADC_PollForConversion+0x7e>
 80017c2:	f7ff fe13 	bl	80013ec <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d212      	bcs.n	80017f8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10b      	bne.n	80017f8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e4:	f043 0204 	orr.w	r2, r3, #4
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e0a2      	b.n	800193e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0d6      	beq.n	80017b4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001806:	e070      	b.n	80018ea <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001808:	4b4f      	ldr	r3, [pc, #316]	@ (8001948 <HAL_ADC_PollForConversion+0x1f4>)
 800180a:	681c      	ldr	r4, [r3, #0]
 800180c:	2002      	movs	r0, #2
 800180e:	f002 fa15 	bl	8003c3c <HAL_RCCEx_GetPeriphCLKFreq>
 8001812:	4603      	mov	r3, r0
 8001814:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6919      	ldr	r1, [r3, #16]
 800181e:	4b4b      	ldr	r3, [pc, #300]	@ (800194c <HAL_ADC_PollForConversion+0x1f8>)
 8001820:	400b      	ands	r3, r1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d118      	bne.n	8001858 <HAL_ADC_PollForConversion+0x104>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68d9      	ldr	r1, [r3, #12]
 800182c:	4b48      	ldr	r3, [pc, #288]	@ (8001950 <HAL_ADC_PollForConversion+0x1fc>)
 800182e:	400b      	ands	r3, r1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d111      	bne.n	8001858 <HAL_ADC_PollForConversion+0x104>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6919      	ldr	r1, [r3, #16]
 800183a:	4b46      	ldr	r3, [pc, #280]	@ (8001954 <HAL_ADC_PollForConversion+0x200>)
 800183c:	400b      	ands	r3, r1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d108      	bne.n	8001854 <HAL_ADC_PollForConversion+0x100>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68d9      	ldr	r1, [r3, #12]
 8001848:	4b43      	ldr	r3, [pc, #268]	@ (8001958 <HAL_ADC_PollForConversion+0x204>)
 800184a:	400b      	ands	r3, r1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_ADC_PollForConversion+0x100>
 8001850:	2314      	movs	r3, #20
 8001852:	e020      	b.n	8001896 <HAL_ADC_PollForConversion+0x142>
 8001854:	2329      	movs	r3, #41	@ 0x29
 8001856:	e01e      	b.n	8001896 <HAL_ADC_PollForConversion+0x142>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6919      	ldr	r1, [r3, #16]
 800185e:	4b3d      	ldr	r3, [pc, #244]	@ (8001954 <HAL_ADC_PollForConversion+0x200>)
 8001860:	400b      	ands	r3, r1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d106      	bne.n	8001874 <HAL_ADC_PollForConversion+0x120>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68d9      	ldr	r1, [r3, #12]
 800186c:	4b3a      	ldr	r3, [pc, #232]	@ (8001958 <HAL_ADC_PollForConversion+0x204>)
 800186e:	400b      	ands	r3, r1
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00d      	beq.n	8001890 <HAL_ADC_PollForConversion+0x13c>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6919      	ldr	r1, [r3, #16]
 800187a:	4b38      	ldr	r3, [pc, #224]	@ (800195c <HAL_ADC_PollForConversion+0x208>)
 800187c:	400b      	ands	r3, r1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d108      	bne.n	8001894 <HAL_ADC_PollForConversion+0x140>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68d9      	ldr	r1, [r3, #12]
 8001888:	4b34      	ldr	r3, [pc, #208]	@ (800195c <HAL_ADC_PollForConversion+0x208>)
 800188a:	400b      	ands	r3, r1
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_ADC_PollForConversion+0x140>
 8001890:	2354      	movs	r3, #84	@ 0x54
 8001892:	e000      	b.n	8001896 <HAL_ADC_PollForConversion+0x142>
 8001894:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001896:	fb02 f303 	mul.w	r3, r2, r3
 800189a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800189c:	e021      	b.n	80018e2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a4:	d01a      	beq.n	80018dc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d007      	beq.n	80018bc <HAL_ADC_PollForConversion+0x168>
 80018ac:	f7ff fd9e 	bl	80013ec <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d20f      	bcs.n	80018dc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d90b      	bls.n	80018dc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c8:	f043 0204 	orr.w	r2, r3, #4
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e030      	b.n	800193e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	3301      	adds	r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d8d9      	bhi.n	800189e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f06f 0212 	mvn.w	r2, #18
 80018f2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800190a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800190e:	d115      	bne.n	800193c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001914:	2b00      	cmp	r3, #0
 8001916:	d111      	bne.n	800193c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800191c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001928:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d105      	bne.n	800193c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001934:	f043 0201 	orr.w	r2, r3, #1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	371c      	adds	r7, #28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	bf00      	nop
 8001948:	20000000 	.word	0x20000000
 800194c:	24924924 	.word	0x24924924
 8001950:	00924924 	.word	0x00924924
 8001954:	12492492 	.word	0x12492492
 8001958:	00492492 	.word	0x00492492
 800195c:	00249249 	.word	0x00249249

08001960 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x20>
 8001994:	2302      	movs	r3, #2
 8001996:	e0dc      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x1da>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b06      	cmp	r3, #6
 80019a6:	d81c      	bhi.n	80019e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	3b05      	subs	r3, #5
 80019ba:	221f      	movs	r2, #31
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	4019      	ands	r1, r3
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	6818      	ldr	r0, [r3, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	3b05      	subs	r3, #5
 80019d4:	fa00 f203 	lsl.w	r2, r0, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	635a      	str	r2, [r3, #52]	@ 0x34
 80019e0:	e03c      	b.n	8001a5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b0c      	cmp	r3, #12
 80019e8:	d81c      	bhi.n	8001a24 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	3b23      	subs	r3, #35	@ 0x23
 80019fc:	221f      	movs	r2, #31
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	4019      	ands	r1, r3
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	3b23      	subs	r3, #35	@ 0x23
 8001a16:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a22:	e01b      	b.n	8001a5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	3b41      	subs	r3, #65	@ 0x41
 8001a36:	221f      	movs	r2, #31
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	4019      	ands	r1, r3
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3b41      	subs	r3, #65	@ 0x41
 8001a50:	fa00 f203 	lsl.w	r2, r0, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b09      	cmp	r3, #9
 8001a62:	d91c      	bls.n	8001a9e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68d9      	ldr	r1, [r3, #12]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	3b1e      	subs	r3, #30
 8001a76:	2207      	movs	r2, #7
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	4019      	ands	r1, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	6898      	ldr	r0, [r3, #8]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3b1e      	subs	r3, #30
 8001a90:	fa00 f203 	lsl.w	r2, r0, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	e019      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6919      	ldr	r1, [r3, #16]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	2207      	movs	r2, #7
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	4019      	ands	r1, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	6898      	ldr	r0, [r3, #8]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b10      	cmp	r3, #16
 8001ad8:	d003      	beq.n	8001ae2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ade:	2b11      	cmp	r3, #17
 8001ae0:	d132      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8001b5c <HAL_ADC_ConfigChannel+0x1e4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d125      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d126      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001b08:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b10      	cmp	r3, #16
 8001b10:	d11a      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b12:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <HAL_ADC_ConfigChannel+0x1e8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a13      	ldr	r2, [pc, #76]	@ (8001b64 <HAL_ADC_ConfigChannel+0x1ec>)
 8001b18:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1c:	0c9a      	lsrs	r2, r3, #18
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b28:	e002      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f9      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x1b2>
 8001b36:	e007      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3c:	f043 0220 	orr.w	r2, r3, #32
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	40012400 	.word	0x40012400
 8001b60:	20000000 	.word	0x20000000
 8001b64:	431bde83 	.word	0x431bde83

08001b68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d040      	beq.n	8001c08 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0201 	orr.w	r2, r2, #1
 8001b94:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b96:	4b1f      	ldr	r3, [pc, #124]	@ (8001c14 <ADC_Enable+0xac>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8001c18 <ADC_Enable+0xb0>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	0c9b      	lsrs	r3, r3, #18
 8001ba2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ba4:	e002      	b.n	8001bac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f9      	bne.n	8001ba6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bb2:	f7ff fc1b 	bl	80013ec <HAL_GetTick>
 8001bb6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bb8:	e01f      	b.n	8001bfa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bba:	f7ff fc17 	bl	80013ec <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d918      	bls.n	8001bfa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d011      	beq.n	8001bfa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bda:	f043 0210 	orr.w	r2, r3, #16
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be6:	f043 0201 	orr.w	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e007      	b.n	8001c0a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d1d8      	bne.n	8001bba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000000 	.word	0x20000000
 8001c18:	431bde83 	.word	0x431bde83

08001c1c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d12e      	bne.n	8001c94 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0201 	bic.w	r2, r2, #1
 8001c44:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c46:	f7ff fbd1 	bl	80013ec <HAL_GetTick>
 8001c4a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c4c:	e01b      	b.n	8001c86 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c4e:	f7ff fbcd 	bl	80013ec <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d914      	bls.n	8001c86 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d10d      	bne.n	8001c86 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6e:	f043 0210 	orr.w	r2, r3, #16
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7a:	f043 0201 	orr.w	r2, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e007      	b.n	8001c96 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d0dc      	beq.n	8001c4e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b084      	sub	sp, #16
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0ed      	b.n	8001e8c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d102      	bne.n	8001cc2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7fe fb23 	bl	8000308 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cd2:	f7ff fb8b 	bl	80013ec <HAL_GetTick>
 8001cd6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cd8:	e012      	b.n	8001d00 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cda:	f7ff fb87 	bl	80013ec <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b0a      	cmp	r3, #10
 8001ce6:	d90b      	bls.n	8001d00 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2205      	movs	r2, #5
 8001cf8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0c5      	b.n	8001e8c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0e5      	beq.n	8001cda <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0202 	bic.w	r2, r2, #2
 8001d1c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d1e:	f7ff fb65 	bl	80013ec <HAL_GetTick>
 8001d22:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d24:	e012      	b.n	8001d4c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d26:	f7ff fb61 	bl	80013ec <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b0a      	cmp	r3, #10
 8001d32:	d90b      	bls.n	8001d4c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d38:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2205      	movs	r2, #5
 8001d44:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e09f      	b.n	8001e8c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1e5      	bne.n	8001d26 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7e1b      	ldrb	r3, [r3, #24]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d108      	bne.n	8001d74 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	e007      	b.n	8001d84 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7e5b      	ldrb	r3, [r3, #25]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d108      	bne.n	8001d9e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e007      	b.n	8001dae <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7e9b      	ldrb	r3, [r3, #26]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d108      	bne.n	8001dc8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0220 	orr.w	r2, r2, #32
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	e007      	b.n	8001dd8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0220 	bic.w	r2, r2, #32
 8001dd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7edb      	ldrb	r3, [r3, #27]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d108      	bne.n	8001df2 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0210 	bic.w	r2, r2, #16
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	e007      	b.n	8001e02 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0210 	orr.w	r2, r2, #16
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7f1b      	ldrb	r3, [r3, #28]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d108      	bne.n	8001e1c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0208 	orr.w	r2, r2, #8
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e007      	b.n	8001e2c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0208 	bic.w	r2, r2, #8
 8001e2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7f5b      	ldrb	r3, [r3, #29]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d108      	bne.n	8001e46 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0204 	orr.w	r2, r2, #4
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	e007      	b.n	8001e56 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0204 	bic.w	r2, r2, #4
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	ea42 0103 	orr.w	r1, r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	1e5a      	subs	r2, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eaa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001eac:	7cfb      	ldrb	r3, [r7, #19]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d003      	beq.n	8001eba <HAL_CAN_ConfigFilter+0x26>
 8001eb2:	7cfb      	ldrb	r3, [r7, #19]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	f040 80aa 	bne.w	800200e <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ec0:	f043 0201 	orr.w	r2, r3, #1
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	401a      	ands	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d123      	bne.n	8001f3c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	401a      	ands	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f16:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	3248      	adds	r2, #72	@ 0x48
 8001f1c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f30:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f32:	6979      	ldr	r1, [r7, #20]
 8001f34:	3348      	adds	r3, #72	@ 0x48
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d122      	bne.n	8001f8a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f64:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	3248      	adds	r2, #72	@ 0x48
 8001f6a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f7e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f80:	6979      	ldr	r1, [r7, #20]
 8001f82:	3348      	adds	r3, #72	@ 0x48
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	440b      	add	r3, r1
 8001f88:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d109      	bne.n	8001fa6 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	401a      	ands	r2, r3
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001fa4:	e007      	b.n	8001fb6 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d109      	bne.n	8001fd2 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	401a      	ands	r2, r3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001fd0:	e007      	b.n	8001fe2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d107      	bne.n	8001ffa <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002000:	f023 0201 	bic.w	r2, r3, #1
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e006      	b.n	800201c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002012:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
  }
}
 800201c:	4618      	mov	r0, r3
 800201e:	371c      	adds	r7, #28
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b01      	cmp	r3, #1
 8002038:	d12e      	bne.n	8002098 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2202      	movs	r2, #2
 800203e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0201 	bic.w	r2, r2, #1
 8002050:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002052:	f7ff f9cb 	bl	80013ec <HAL_GetTick>
 8002056:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002058:	e012      	b.n	8002080 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800205a:	f7ff f9c7 	bl	80013ec <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b0a      	cmp	r3, #10
 8002066:	d90b      	bls.n	8002080 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2205      	movs	r2, #5
 8002078:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e012      	b.n	80020a6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1e5      	bne.n	800205a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	e006      	b.n	80020a6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
  }
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b089      	sub	sp, #36	@ 0x24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80020cc:	7ffb      	ldrb	r3, [r7, #31]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d003      	beq.n	80020da <HAL_CAN_AddTxMessage+0x2c>
 80020d2:	7ffb      	ldrb	r3, [r7, #31]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	f040 80ad 	bne.w	8002234 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10a      	bne.n	80020fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d105      	bne.n	80020fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 8095 	beq.w	8002224 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	0e1b      	lsrs	r3, r3, #24
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002104:	2201      	movs	r2, #1
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	409a      	lsls	r2, r3
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10d      	bne.n	8002132 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002120:	68f9      	ldr	r1, [r7, #12]
 8002122:	6809      	ldr	r1, [r1, #0]
 8002124:	431a      	orrs	r2, r3
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	3318      	adds	r3, #24
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	440b      	add	r3, r1
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	e00f      	b.n	8002152 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800213c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002142:	68f9      	ldr	r1, [r7, #12]
 8002144:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002146:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	3318      	adds	r3, #24
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	440b      	add	r3, r1
 8002150:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6819      	ldr	r1, [r3, #0]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	3318      	adds	r3, #24
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	440b      	add	r3, r1
 8002162:	3304      	adds	r3, #4
 8002164:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	7d1b      	ldrb	r3, [r3, #20]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d111      	bne.n	8002192 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	3318      	adds	r3, #24
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	4413      	add	r3, r2
 800217a:	3304      	adds	r3, #4
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	6811      	ldr	r1, [r2, #0]
 8002182:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3318      	adds	r3, #24
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	440b      	add	r3, r1
 800218e:	3304      	adds	r3, #4
 8002190:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3307      	adds	r3, #7
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	061a      	lsls	r2, r3, #24
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3306      	adds	r3, #6
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	041b      	lsls	r3, r3, #16
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3305      	adds	r3, #5
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	4313      	orrs	r3, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	3204      	adds	r2, #4
 80021b2:	7812      	ldrb	r2, [r2, #0]
 80021b4:	4610      	mov	r0, r2
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	6811      	ldr	r1, [r2, #0]
 80021ba:	ea43 0200 	orr.w	r2, r3, r0
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	440b      	add	r3, r1
 80021c4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80021c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3303      	adds	r3, #3
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	061a      	lsls	r2, r3, #24
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3302      	adds	r3, #2
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	041b      	lsls	r3, r3, #16
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3301      	adds	r3, #1
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	4313      	orrs	r3, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	7812      	ldrb	r2, [r2, #0]
 80021ea:	4610      	mov	r0, r2
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	6811      	ldr	r1, [r2, #0]
 80021f0:	ea43 0200 	orr.w	r2, r3, r0
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	440b      	add	r3, r1
 80021fa:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80021fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3318      	adds	r3, #24
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	4413      	add	r3, r2
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	6811      	ldr	r1, [r2, #0]
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	3318      	adds	r3, #24
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	440b      	add	r3, r1
 800221e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	e00e      	b.n	8002242 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002228:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e006      	b.n	8002242 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
  }
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	@ 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002260:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002262:	7dfb      	ldrb	r3, [r7, #23]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d003      	beq.n	8002270 <HAL_CAN_GetRxMessage+0x24>
 8002268:	7dfb      	ldrb	r3, [r7, #23]
 800226a:	2b02      	cmp	r3, #2
 800226c:	f040 8103 	bne.w	8002476 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10e      	bne.n	8002294 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d116      	bne.n	80022b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002288:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0f7      	b.n	8002484 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d107      	bne.n	80022b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e0e8      	b.n	8002484 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	331b      	adds	r3, #27
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	4413      	add	r3, r2
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0204 	and.w	r2, r3, #4
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10c      	bne.n	80022ea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	331b      	adds	r3, #27
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	4413      	add	r3, r2
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	0d5b      	lsrs	r3, r3, #21
 80022e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	e00b      	b.n	8002302 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	331b      	adds	r3, #27
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	4413      	add	r3, r2
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	08db      	lsrs	r3, r3, #3
 80022fa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	331b      	adds	r3, #27
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	4413      	add	r3, r2
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0202 	and.w	r2, r3, #2
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	331b      	adds	r3, #27
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	4413      	add	r3, r2
 8002324:	3304      	adds	r3, #4
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2208      	movs	r2, #8
 8002334:	611a      	str	r2, [r3, #16]
 8002336:	e00b      	b.n	8002350 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	331b      	adds	r3, #27
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	4413      	add	r3, r2
 8002344:	3304      	adds	r3, #4
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 020f 	and.w	r2, r3, #15
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	331b      	adds	r3, #27
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	4413      	add	r3, r2
 800235c:	3304      	adds	r3, #4
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	b2da      	uxtb	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	331b      	adds	r3, #27
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	4413      	add	r3, r2
 8002374:	3304      	adds	r3, #4
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	0c1b      	lsrs	r3, r3, #16
 800237a:	b29a      	uxth	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	4413      	add	r3, r2
 800238a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	4413      	add	r3, r2
 80023a0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	0a1a      	lsrs	r2, r3, #8
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	3301      	adds	r3, #1
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	0c1a      	lsrs	r2, r3, #16
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	3302      	adds	r3, #2
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	0e1a      	lsrs	r2, r3, #24
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	3303      	adds	r3, #3
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	3304      	adds	r3, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	4413      	add	r3, r2
 8002406:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0a1a      	lsrs	r2, r3, #8
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	3305      	adds	r3, #5
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	4413      	add	r3, r2
 8002420:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	0c1a      	lsrs	r2, r3, #16
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	3306      	adds	r3, #6
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	4413      	add	r3, r2
 800243a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0e1a      	lsrs	r2, r3, #24
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	3307      	adds	r3, #7
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d108      	bne.n	8002462 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0220 	orr.w	r2, r2, #32
 800245e:	60da      	str	r2, [r3, #12]
 8002460:	e007      	b.n	8002472 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0220 	orr.w	r2, r2, #32
 8002470:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	e006      	b.n	8002484 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
  }
}
 8002484:	4618      	mov	r0, r3
 8002486:	371c      	adds	r7, #28
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800248e:	b480      	push	{r7}
 8002490:	b085      	sub	sp, #20
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800249e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d002      	beq.n	80024ac <HAL_CAN_ActivateNotification+0x1e>
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d109      	bne.n	80024c0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6959      	ldr	r1, [r3, #20]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e006      	b.n	80024ce <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
  }
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	@ 0x28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d07c      	beq.n	8002618 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d023      	beq.n	8002570 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2201      	movs	r2, #1
 800252e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f983 	bl	8002846 <HAL_CAN_TxMailbox0CompleteCallback>
 8002540:	e016      	b.n	8002570 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d004      	beq.n	8002556 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
 8002554:	e00c      	b.n	8002570 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b00      	cmp	r3, #0
 800255e:	d004      	beq.n	800256a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002562:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002566:	627b      	str	r3, [r7, #36]	@ 0x24
 8002568:	e002      	b.n	8002570 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f986 	bl	800287c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002576:	2b00      	cmp	r3, #0
 8002578:	d024      	beq.n	80025c4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002582:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f962 	bl	8002858 <HAL_CAN_TxMailbox1CompleteCallback>
 8002594:	e016      	b.n	80025c4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259c:	2b00      	cmp	r3, #0
 800259e:	d004      	beq.n	80025aa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a8:	e00c      	b.n	80025c4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d004      	beq.n	80025be <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80025bc:	e002      	b.n	80025c4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f965 	bl	800288e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d024      	beq.n	8002618 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80025d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f941 	bl	800286a <HAL_CAN_TxMailbox2CompleteCallback>
 80025e8:	e016      	b.n	8002618 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80025fc:	e00c      	b.n	8002618 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800260e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002610:	e002      	b.n	8002618 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f944 	bl	80028a0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00c      	beq.n	800263c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b00      	cmp	r3, #0
 800262a:	d007      	beq.n	800263c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2210      	movs	r2, #16
 800263a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00b      	beq.n	800265e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d006      	beq.n	800265e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2208      	movs	r2, #8
 8002656:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f92a 	bl	80028b2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d009      	beq.n	800267c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe fbce 	bl	8000e18 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00c      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b00      	cmp	r3, #0
 800268e:	d007      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2210      	movs	r2, #16
 800269e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d006      	beq.n	80026c2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2208      	movs	r2, #8
 80026ba:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f90a 	bl	80028d6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d009      	beq.n	80026e0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f8f2 	bl	80028c4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00b      	beq.n	8002702 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2210      	movs	r2, #16
 80026fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f8f3 	bl	80028e8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00b      	beq.n	8002724 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d006      	beq.n	8002724 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2208      	movs	r2, #8
 800271c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f8eb 	bl	80028fa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d07b      	beq.n	8002826 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d072      	beq.n	800281e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800275a:	2b00      	cmp	r3, #0
 800275c:	d008      	beq.n	8002770 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276a:	f043 0302 	orr.w	r3, r3, #2
 800276e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002776:	2b00      	cmp	r3, #0
 8002778:	d008      	beq.n	800278c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	f043 0304 	orr.w	r3, r3, #4
 800278a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002792:	2b00      	cmp	r3, #0
 8002794:	d043      	beq.n	800281e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800279c:	2b00      	cmp	r3, #0
 800279e:	d03e      	beq.n	800281e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027a6:	2b60      	cmp	r3, #96	@ 0x60
 80027a8:	d02b      	beq.n	8002802 <HAL_CAN_IRQHandler+0x32a>
 80027aa:	2b60      	cmp	r3, #96	@ 0x60
 80027ac:	d82e      	bhi.n	800280c <HAL_CAN_IRQHandler+0x334>
 80027ae:	2b50      	cmp	r3, #80	@ 0x50
 80027b0:	d022      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x320>
 80027b2:	2b50      	cmp	r3, #80	@ 0x50
 80027b4:	d82a      	bhi.n	800280c <HAL_CAN_IRQHandler+0x334>
 80027b6:	2b40      	cmp	r3, #64	@ 0x40
 80027b8:	d019      	beq.n	80027ee <HAL_CAN_IRQHandler+0x316>
 80027ba:	2b40      	cmp	r3, #64	@ 0x40
 80027bc:	d826      	bhi.n	800280c <HAL_CAN_IRQHandler+0x334>
 80027be:	2b30      	cmp	r3, #48	@ 0x30
 80027c0:	d010      	beq.n	80027e4 <HAL_CAN_IRQHandler+0x30c>
 80027c2:	2b30      	cmp	r3, #48	@ 0x30
 80027c4:	d822      	bhi.n	800280c <HAL_CAN_IRQHandler+0x334>
 80027c6:	2b10      	cmp	r3, #16
 80027c8:	d002      	beq.n	80027d0 <HAL_CAN_IRQHandler+0x2f8>
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	d005      	beq.n	80027da <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80027ce:	e01d      	b.n	800280c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	f043 0308 	orr.w	r3, r3, #8
 80027d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027d8:	e019      	b.n	800280e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	f043 0310 	orr.w	r3, r3, #16
 80027e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027e2:	e014      	b.n	800280e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e6:	f043 0320 	orr.w	r3, r3, #32
 80027ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027ec:	e00f      	b.n	800280e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027f6:	e00a      	b.n	800280e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002800:	e005      	b.n	800280e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800280a:	e000      	b.n	800280e <HAL_CAN_IRQHandler+0x336>
            break;
 800280c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800281c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2204      	movs	r2, #4
 8002824:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f867 	bl	800290c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800283e:	bf00      	nop
 8002840:	3728      	adds	r7, #40	@ 0x28
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr

080028d6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr
	...

08002920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002930:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800293c:	4013      	ands	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002948:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800294c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002952:	4a04      	ldr	r2, [pc, #16]	@ (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	60d3      	str	r3, [r2, #12]
}
 8002958:	bf00      	nop
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800296c:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <__NVIC_GetPriorityGrouping+0x18>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	f003 0307 	and.w	r3, r3, #7
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	2b00      	cmp	r3, #0
 8002994:	db0b      	blt.n	80029ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	4906      	ldr	r1, [pc, #24]	@ (80029b8 <__NVIC_EnableIRQ+0x34>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	2001      	movs	r0, #1
 80029a6:	fa00 f202 	lsl.w	r2, r0, r2
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	e000e100 	.word	0xe000e100

080029bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	@ (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	@ (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	@ 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
         );
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	@ 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a84:	d301      	bcc.n	8002a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a86:	2301      	movs	r3, #1
 8002a88:	e00f      	b.n	8002aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab4 <SysTick_Config+0x40>)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a92:	210f      	movs	r1, #15
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295
 8002a98:	f7ff ff90 	bl	80029bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a9c:	4b05      	ldr	r3, [pc, #20]	@ (8002ab4 <SysTick_Config+0x40>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa2:	4b04      	ldr	r3, [pc, #16]	@ (8002ab4 <SysTick_Config+0x40>)
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	e000e010 	.word	0xe000e010

08002ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff ff2d 	bl	8002920 <__NVIC_SetPriorityGrouping>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b086      	sub	sp, #24
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae0:	f7ff ff42 	bl	8002968 <__NVIC_GetPriorityGrouping>
 8002ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	6978      	ldr	r0, [r7, #20]
 8002aec:	f7ff ff90 	bl	8002a10 <NVIC_EncodePriority>
 8002af0:	4602      	mov	r2, r0
 8002af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff5f 	bl	80029bc <__NVIC_SetPriority>
}
 8002afe:	bf00      	nop
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff35 	bl	8002984 <__NVIC_EnableIRQ>
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ffa2 	bl	8002a74 <SysTick_Config>
 8002b30:	4603      	mov	r3, r0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e043      	b.n	8002bda <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b22      	ldr	r3, [pc, #136]	@ (8002be4 <HAL_DMA_Init+0xa8>)
 8002b5a:	4413      	add	r3, r2
 8002b5c:	4a22      	ldr	r2, [pc, #136]	@ (8002be8 <HAL_DMA_Init+0xac>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	091b      	lsrs	r3, r3, #4
 8002b64:	009a      	lsls	r2, r3, #2
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002bec <HAL_DMA_Init+0xb0>)
 8002b6e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b86:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002b8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr
 8002be4:	bffdfff8 	.word	0xbffdfff8
 8002be8:	cccccccd 	.word	0xcccccccd
 8002bec:	40020000 	.word	0x40020000

08002bf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_DMA_Start_IT+0x20>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e04b      	b.n	8002ca8 <HAL_DMA_Start_IT+0xb8>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d13a      	bne.n	8002c9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0201 	bic.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	68b9      	ldr	r1, [r7, #8]
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 f937 	bl	8002ebc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 020e 	orr.w	r2, r2, #14
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	e00f      	b.n	8002c88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0204 	bic.w	r2, r2, #4
 8002c76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 020a 	orr.w	r2, r2, #10
 8002c86:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	e005      	b.n	8002ca6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	2204      	movs	r2, #4
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d04f      	beq.n	8002d78 <HAL_DMA_IRQHandler+0xc8>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d04a      	beq.n	8002d78 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d107      	bne.n	8002d00 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0204 	bic.w	r2, r2, #4
 8002cfe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a66      	ldr	r2, [pc, #408]	@ (8002ea0 <HAL_DMA_IRQHandler+0x1f0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d029      	beq.n	8002d5e <HAL_DMA_IRQHandler+0xae>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a65      	ldr	r2, [pc, #404]	@ (8002ea4 <HAL_DMA_IRQHandler+0x1f4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d022      	beq.n	8002d5a <HAL_DMA_IRQHandler+0xaa>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a63      	ldr	r2, [pc, #396]	@ (8002ea8 <HAL_DMA_IRQHandler+0x1f8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d01a      	beq.n	8002d54 <HAL_DMA_IRQHandler+0xa4>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a62      	ldr	r2, [pc, #392]	@ (8002eac <HAL_DMA_IRQHandler+0x1fc>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d012      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x9e>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a60      	ldr	r2, [pc, #384]	@ (8002eb0 <HAL_DMA_IRQHandler+0x200>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00a      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x98>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a5f      	ldr	r2, [pc, #380]	@ (8002eb4 <HAL_DMA_IRQHandler+0x204>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d102      	bne.n	8002d42 <HAL_DMA_IRQHandler+0x92>
 8002d3c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d40:	e00e      	b.n	8002d60 <HAL_DMA_IRQHandler+0xb0>
 8002d42:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002d46:	e00b      	b.n	8002d60 <HAL_DMA_IRQHandler+0xb0>
 8002d48:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002d4c:	e008      	b.n	8002d60 <HAL_DMA_IRQHandler+0xb0>
 8002d4e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d52:	e005      	b.n	8002d60 <HAL_DMA_IRQHandler+0xb0>
 8002d54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d58:	e002      	b.n	8002d60 <HAL_DMA_IRQHandler+0xb0>
 8002d5a:	2340      	movs	r3, #64	@ 0x40
 8002d5c:	e000      	b.n	8002d60 <HAL_DMA_IRQHandler+0xb0>
 8002d5e:	2304      	movs	r3, #4
 8002d60:	4a55      	ldr	r2, [pc, #340]	@ (8002eb8 <HAL_DMA_IRQHandler+0x208>)
 8002d62:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 8094 	beq.w	8002e96 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d76:	e08e      	b.n	8002e96 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d056      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x186>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d051      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10b      	bne.n	8002db8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 020a 	bic.w	r2, r2, #10
 8002dae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a38      	ldr	r2, [pc, #224]	@ (8002ea0 <HAL_DMA_IRQHandler+0x1f0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d029      	beq.n	8002e16 <HAL_DMA_IRQHandler+0x166>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a37      	ldr	r2, [pc, #220]	@ (8002ea4 <HAL_DMA_IRQHandler+0x1f4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d022      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x162>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a35      	ldr	r2, [pc, #212]	@ (8002ea8 <HAL_DMA_IRQHandler+0x1f8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d01a      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x15c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a34      	ldr	r2, [pc, #208]	@ (8002eac <HAL_DMA_IRQHandler+0x1fc>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d012      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x156>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a32      	ldr	r2, [pc, #200]	@ (8002eb0 <HAL_DMA_IRQHandler+0x200>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00a      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x150>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a31      	ldr	r2, [pc, #196]	@ (8002eb4 <HAL_DMA_IRQHandler+0x204>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d102      	bne.n	8002dfa <HAL_DMA_IRQHandler+0x14a>
 8002df4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002df8:	e00e      	b.n	8002e18 <HAL_DMA_IRQHandler+0x168>
 8002dfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dfe:	e00b      	b.n	8002e18 <HAL_DMA_IRQHandler+0x168>
 8002e00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e04:	e008      	b.n	8002e18 <HAL_DMA_IRQHandler+0x168>
 8002e06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e0a:	e005      	b.n	8002e18 <HAL_DMA_IRQHandler+0x168>
 8002e0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e10:	e002      	b.n	8002e18 <HAL_DMA_IRQHandler+0x168>
 8002e12:	2320      	movs	r3, #32
 8002e14:	e000      	b.n	8002e18 <HAL_DMA_IRQHandler+0x168>
 8002e16:	2302      	movs	r3, #2
 8002e18:	4a27      	ldr	r2, [pc, #156]	@ (8002eb8 <HAL_DMA_IRQHandler+0x208>)
 8002e1a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d034      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e34:	e02f      	b.n	8002e96 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3a:	2208      	movs	r2, #8
 8002e3c:	409a      	lsls	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d028      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x1e8>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d023      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 020e 	bic.w	r2, r2, #14
 8002e5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e68:	2101      	movs	r1, #1
 8002e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d004      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
    }
  }
  return;
 8002e96:	bf00      	nop
 8002e98:	bf00      	nop
}
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40020008 	.word	0x40020008
 8002ea4:	4002001c 	.word	0x4002001c
 8002ea8:	40020030 	.word	0x40020030
 8002eac:	40020044 	.word	0x40020044
 8002eb0:	40020058 	.word	0x40020058
 8002eb4:	4002006c 	.word	0x4002006c
 8002eb8:	40020000 	.word	0x40020000

08002ebc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b10      	cmp	r3, #16
 8002ee8:	d108      	bne.n	8002efc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002efa:	e007      	b.n	8002f0c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	60da      	str	r2, [r3, #12]
}
 8002f0c:	bf00      	nop
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
	...

08002f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b08b      	sub	sp, #44	@ 0x2c
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f22:	2300      	movs	r3, #0
 8002f24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f26:	2300      	movs	r3, #0
 8002f28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f2a:	e169      	b.n	8003200 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69fa      	ldr	r2, [r7, #28]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	f040 8158 	bne.w	80031fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4a9a      	ldr	r2, [pc, #616]	@ (80031b8 <HAL_GPIO_Init+0x2a0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d05e      	beq.n	8003012 <HAL_GPIO_Init+0xfa>
 8002f54:	4a98      	ldr	r2, [pc, #608]	@ (80031b8 <HAL_GPIO_Init+0x2a0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d875      	bhi.n	8003046 <HAL_GPIO_Init+0x12e>
 8002f5a:	4a98      	ldr	r2, [pc, #608]	@ (80031bc <HAL_GPIO_Init+0x2a4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d058      	beq.n	8003012 <HAL_GPIO_Init+0xfa>
 8002f60:	4a96      	ldr	r2, [pc, #600]	@ (80031bc <HAL_GPIO_Init+0x2a4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d86f      	bhi.n	8003046 <HAL_GPIO_Init+0x12e>
 8002f66:	4a96      	ldr	r2, [pc, #600]	@ (80031c0 <HAL_GPIO_Init+0x2a8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d052      	beq.n	8003012 <HAL_GPIO_Init+0xfa>
 8002f6c:	4a94      	ldr	r2, [pc, #592]	@ (80031c0 <HAL_GPIO_Init+0x2a8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d869      	bhi.n	8003046 <HAL_GPIO_Init+0x12e>
 8002f72:	4a94      	ldr	r2, [pc, #592]	@ (80031c4 <HAL_GPIO_Init+0x2ac>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d04c      	beq.n	8003012 <HAL_GPIO_Init+0xfa>
 8002f78:	4a92      	ldr	r2, [pc, #584]	@ (80031c4 <HAL_GPIO_Init+0x2ac>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d863      	bhi.n	8003046 <HAL_GPIO_Init+0x12e>
 8002f7e:	4a92      	ldr	r2, [pc, #584]	@ (80031c8 <HAL_GPIO_Init+0x2b0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d046      	beq.n	8003012 <HAL_GPIO_Init+0xfa>
 8002f84:	4a90      	ldr	r2, [pc, #576]	@ (80031c8 <HAL_GPIO_Init+0x2b0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d85d      	bhi.n	8003046 <HAL_GPIO_Init+0x12e>
 8002f8a:	2b12      	cmp	r3, #18
 8002f8c:	d82a      	bhi.n	8002fe4 <HAL_GPIO_Init+0xcc>
 8002f8e:	2b12      	cmp	r3, #18
 8002f90:	d859      	bhi.n	8003046 <HAL_GPIO_Init+0x12e>
 8002f92:	a201      	add	r2, pc, #4	@ (adr r2, 8002f98 <HAL_GPIO_Init+0x80>)
 8002f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f98:	08003013 	.word	0x08003013
 8002f9c:	08002fed 	.word	0x08002fed
 8002fa0:	08002fff 	.word	0x08002fff
 8002fa4:	08003041 	.word	0x08003041
 8002fa8:	08003047 	.word	0x08003047
 8002fac:	08003047 	.word	0x08003047
 8002fb0:	08003047 	.word	0x08003047
 8002fb4:	08003047 	.word	0x08003047
 8002fb8:	08003047 	.word	0x08003047
 8002fbc:	08003047 	.word	0x08003047
 8002fc0:	08003047 	.word	0x08003047
 8002fc4:	08003047 	.word	0x08003047
 8002fc8:	08003047 	.word	0x08003047
 8002fcc:	08003047 	.word	0x08003047
 8002fd0:	08003047 	.word	0x08003047
 8002fd4:	08003047 	.word	0x08003047
 8002fd8:	08003047 	.word	0x08003047
 8002fdc:	08002ff5 	.word	0x08002ff5
 8002fe0:	08003009 	.word	0x08003009
 8002fe4:	4a79      	ldr	r2, [pc, #484]	@ (80031cc <HAL_GPIO_Init+0x2b4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d013      	beq.n	8003012 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fea:	e02c      	b.n	8003046 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	623b      	str	r3, [r7, #32]
          break;
 8002ff2:	e029      	b.n	8003048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	623b      	str	r3, [r7, #32]
          break;
 8002ffc:	e024      	b.n	8003048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	3308      	adds	r3, #8
 8003004:	623b      	str	r3, [r7, #32]
          break;
 8003006:	e01f      	b.n	8003048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	330c      	adds	r3, #12
 800300e:	623b      	str	r3, [r7, #32]
          break;
 8003010:	e01a      	b.n	8003048 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d102      	bne.n	8003020 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800301a:	2304      	movs	r3, #4
 800301c:	623b      	str	r3, [r7, #32]
          break;
 800301e:	e013      	b.n	8003048 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d105      	bne.n	8003034 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003028:	2308      	movs	r3, #8
 800302a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69fa      	ldr	r2, [r7, #28]
 8003030:	611a      	str	r2, [r3, #16]
          break;
 8003032:	e009      	b.n	8003048 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003034:	2308      	movs	r3, #8
 8003036:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	615a      	str	r2, [r3, #20]
          break;
 800303e:	e003      	b.n	8003048 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003040:	2300      	movs	r3, #0
 8003042:	623b      	str	r3, [r7, #32]
          break;
 8003044:	e000      	b.n	8003048 <HAL_GPIO_Init+0x130>
          break;
 8003046:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2bff      	cmp	r3, #255	@ 0xff
 800304c:	d801      	bhi.n	8003052 <HAL_GPIO_Init+0x13a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	e001      	b.n	8003056 <HAL_GPIO_Init+0x13e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3304      	adds	r3, #4
 8003056:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	2bff      	cmp	r3, #255	@ 0xff
 800305c:	d802      	bhi.n	8003064 <HAL_GPIO_Init+0x14c>
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	e002      	b.n	800306a <HAL_GPIO_Init+0x152>
 8003064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003066:	3b08      	subs	r3, #8
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	210f      	movs	r1, #15
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	401a      	ands	r2, r3
 800307c:	6a39      	ldr	r1, [r7, #32]
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	fa01 f303 	lsl.w	r3, r1, r3
 8003084:	431a      	orrs	r2, r3
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 80b1 	beq.w	80031fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003098:	4b4d      	ldr	r3, [pc, #308]	@ (80031d0 <HAL_GPIO_Init+0x2b8>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	4a4c      	ldr	r2, [pc, #304]	@ (80031d0 <HAL_GPIO_Init+0x2b8>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	6193      	str	r3, [r2, #24]
 80030a4:	4b4a      	ldr	r3, [pc, #296]	@ (80031d0 <HAL_GPIO_Init+0x2b8>)
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030b0:	4a48      	ldr	r2, [pc, #288]	@ (80031d4 <HAL_GPIO_Init+0x2bc>)
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	3302      	adds	r3, #2
 80030b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	220f      	movs	r2, #15
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4013      	ands	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a40      	ldr	r2, [pc, #256]	@ (80031d8 <HAL_GPIO_Init+0x2c0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d013      	beq.n	8003104 <HAL_GPIO_Init+0x1ec>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a3f      	ldr	r2, [pc, #252]	@ (80031dc <HAL_GPIO_Init+0x2c4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00d      	beq.n	8003100 <HAL_GPIO_Init+0x1e8>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a3e      	ldr	r2, [pc, #248]	@ (80031e0 <HAL_GPIO_Init+0x2c8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d007      	beq.n	80030fc <HAL_GPIO_Init+0x1e4>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a3d      	ldr	r2, [pc, #244]	@ (80031e4 <HAL_GPIO_Init+0x2cc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d101      	bne.n	80030f8 <HAL_GPIO_Init+0x1e0>
 80030f4:	2303      	movs	r3, #3
 80030f6:	e006      	b.n	8003106 <HAL_GPIO_Init+0x1ee>
 80030f8:	2304      	movs	r3, #4
 80030fa:	e004      	b.n	8003106 <HAL_GPIO_Init+0x1ee>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e002      	b.n	8003106 <HAL_GPIO_Init+0x1ee>
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <HAL_GPIO_Init+0x1ee>
 8003104:	2300      	movs	r3, #0
 8003106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003108:	f002 0203 	and.w	r2, r2, #3
 800310c:	0092      	lsls	r2, r2, #2
 800310e:	4093      	lsls	r3, r2
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003116:	492f      	ldr	r1, [pc, #188]	@ (80031d4 <HAL_GPIO_Init+0x2bc>)
 8003118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311a:	089b      	lsrs	r3, r3, #2
 800311c:	3302      	adds	r3, #2
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d006      	beq.n	800313e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003130:	4b2d      	ldr	r3, [pc, #180]	@ (80031e8 <HAL_GPIO_Init+0x2d0>)
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	492c      	ldr	r1, [pc, #176]	@ (80031e8 <HAL_GPIO_Init+0x2d0>)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	4313      	orrs	r3, r2
 800313a:	608b      	str	r3, [r1, #8]
 800313c:	e006      	b.n	800314c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800313e:	4b2a      	ldr	r3, [pc, #168]	@ (80031e8 <HAL_GPIO_Init+0x2d0>)
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	43db      	mvns	r3, r3
 8003146:	4928      	ldr	r1, [pc, #160]	@ (80031e8 <HAL_GPIO_Init+0x2d0>)
 8003148:	4013      	ands	r3, r2
 800314a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d006      	beq.n	8003166 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003158:	4b23      	ldr	r3, [pc, #140]	@ (80031e8 <HAL_GPIO_Init+0x2d0>)
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	4922      	ldr	r1, [pc, #136]	@ (80031e8 <HAL_GPIO_Init+0x2d0>)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	4313      	orrs	r3, r2
 8003162:	60cb      	str	r3, [r1, #12]
 8003164:	e006      	b.n	8003174 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003166:	4b20      	ldr	r3, [pc, #128]	@ (80031e8 <HAL_GPIO_Init+0x2d0>)
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	43db      	mvns	r3, r3
 800316e:	491e      	ldr	r1, [pc, #120]	@ (80031e8 <HAL_GPIO_Init+0x2d0>)
 8003170:	4013      	ands	r3, r2
 8003172:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d006      	beq.n	800318e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003180:	4b19      	ldr	r3, [pc, #100]	@ (80031e8 <HAL_GPIO_Init+0x2d0>)
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	4918      	ldr	r1, [pc, #96]	@ (80031e8 <HAL_GPIO_Init+0x2d0>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]
 800318c:	e006      	b.n	800319c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800318e:	4b16      	ldr	r3, [pc, #88]	@ (80031e8 <HAL_GPIO_Init+0x2d0>)
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	43db      	mvns	r3, r3
 8003196:	4914      	ldr	r1, [pc, #80]	@ (80031e8 <HAL_GPIO_Init+0x2d0>)
 8003198:	4013      	ands	r3, r2
 800319a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d021      	beq.n	80031ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031a8:	4b0f      	ldr	r3, [pc, #60]	@ (80031e8 <HAL_GPIO_Init+0x2d0>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	490e      	ldr	r1, [pc, #56]	@ (80031e8 <HAL_GPIO_Init+0x2d0>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	600b      	str	r3, [r1, #0]
 80031b4:	e021      	b.n	80031fa <HAL_GPIO_Init+0x2e2>
 80031b6:	bf00      	nop
 80031b8:	10320000 	.word	0x10320000
 80031bc:	10310000 	.word	0x10310000
 80031c0:	10220000 	.word	0x10220000
 80031c4:	10210000 	.word	0x10210000
 80031c8:	10120000 	.word	0x10120000
 80031cc:	10110000 	.word	0x10110000
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40010000 	.word	0x40010000
 80031d8:	40010800 	.word	0x40010800
 80031dc:	40010c00 	.word	0x40010c00
 80031e0:	40011000 	.word	0x40011000
 80031e4:	40011400 	.word	0x40011400
 80031e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031ec:	4b0b      	ldr	r3, [pc, #44]	@ (800321c <HAL_GPIO_Init+0x304>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	43db      	mvns	r3, r3
 80031f4:	4909      	ldr	r1, [pc, #36]	@ (800321c <HAL_GPIO_Init+0x304>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	3301      	adds	r3, #1
 80031fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	fa22 f303 	lsr.w	r3, r2, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	f47f ae8e 	bne.w	8002f2c <HAL_GPIO_Init+0x14>
  }
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	372c      	adds	r7, #44	@ 0x2c
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr
 800321c:	40010400 	.word	0x40010400

08003220 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	887b      	ldrh	r3, [r7, #2]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003238:	2301      	movs	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
 800323c:	e001      	b.n	8003242 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003242:	7bfb      	ldrb	r3, [r7, #15]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	460b      	mov	r3, r1
 8003258:	807b      	strh	r3, [r7, #2]
 800325a:	4613      	mov	r3, r2
 800325c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800325e:	787b      	ldrb	r3, [r7, #1]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003264:	887a      	ldrh	r2, [r7, #2]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800326a:	e003      	b.n	8003274 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800326c:	887b      	ldrh	r3, [r7, #2]
 800326e:	041a      	lsls	r2, r3, #16
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	611a      	str	r2, [r3, #16]
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr

0800327e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800327e:	b480      	push	{r7}
 8003280:	b085      	sub	sp, #20
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	460b      	mov	r3, r1
 8003288:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003290:	887a      	ldrh	r2, [r7, #2]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4013      	ands	r3, r2
 8003296:	041a      	lsls	r2, r3, #16
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	43d9      	mvns	r1, r3
 800329c:	887b      	ldrh	r3, [r7, #2]
 800329e:	400b      	ands	r3, r1
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	611a      	str	r2, [r3, #16]
}
 80032a6:	bf00      	nop
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e272      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 8087 	beq.w	80033de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d0:	4b92      	ldr	r3, [pc, #584]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 030c 	and.w	r3, r3, #12
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d00c      	beq.n	80032f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032dc:	4b8f      	ldr	r3, [pc, #572]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 030c 	and.w	r3, r3, #12
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d112      	bne.n	800330e <HAL_RCC_OscConfig+0x5e>
 80032e8:	4b8c      	ldr	r3, [pc, #560]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f4:	d10b      	bne.n	800330e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f6:	4b89      	ldr	r3, [pc, #548]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d06c      	beq.n	80033dc <HAL_RCC_OscConfig+0x12c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d168      	bne.n	80033dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e24c      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003316:	d106      	bne.n	8003326 <HAL_RCC_OscConfig+0x76>
 8003318:	4b80      	ldr	r3, [pc, #512]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a7f      	ldr	r2, [pc, #508]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 800331e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	e02e      	b.n	8003384 <HAL_RCC_OscConfig+0xd4>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10c      	bne.n	8003348 <HAL_RCC_OscConfig+0x98>
 800332e:	4b7b      	ldr	r3, [pc, #492]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a7a      	ldr	r2, [pc, #488]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 8003334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	4b78      	ldr	r3, [pc, #480]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a77      	ldr	r2, [pc, #476]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 8003340:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	e01d      	b.n	8003384 <HAL_RCC_OscConfig+0xd4>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003350:	d10c      	bne.n	800336c <HAL_RCC_OscConfig+0xbc>
 8003352:	4b72      	ldr	r3, [pc, #456]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a71      	ldr	r2, [pc, #452]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 8003358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	4b6f      	ldr	r3, [pc, #444]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a6e      	ldr	r2, [pc, #440]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 8003364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	e00b      	b.n	8003384 <HAL_RCC_OscConfig+0xd4>
 800336c:	4b6b      	ldr	r3, [pc, #428]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a6a      	ldr	r2, [pc, #424]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 8003372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	4b68      	ldr	r3, [pc, #416]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a67      	ldr	r2, [pc, #412]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 800337e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003382:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d013      	beq.n	80033b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7fe f82e 	bl	80013ec <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003394:	f7fe f82a 	bl	80013ec <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	@ 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e200      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a6:	4b5d      	ldr	r3, [pc, #372]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCC_OscConfig+0xe4>
 80033b2:	e014      	b.n	80033de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b4:	f7fe f81a 	bl	80013ec <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033bc:	f7fe f816 	bl	80013ec <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	@ 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e1ec      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ce:	4b53      	ldr	r3, [pc, #332]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x10c>
 80033da:	e000      	b.n	80033de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d063      	beq.n	80034b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033ea:	4b4c      	ldr	r3, [pc, #304]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033f6:	4b49      	ldr	r3, [pc, #292]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d11c      	bne.n	800343c <HAL_RCC_OscConfig+0x18c>
 8003402:	4b46      	ldr	r3, [pc, #280]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d116      	bne.n	800343c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340e:	4b43      	ldr	r3, [pc, #268]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d005      	beq.n	8003426 <HAL_RCC_OscConfig+0x176>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d001      	beq.n	8003426 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e1c0      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003426:	4b3d      	ldr	r3, [pc, #244]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4939      	ldr	r1, [pc, #228]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343a:	e03a      	b.n	80034b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d020      	beq.n	8003486 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003444:	4b36      	ldr	r3, [pc, #216]	@ (8003520 <HAL_RCC_OscConfig+0x270>)
 8003446:	2201      	movs	r2, #1
 8003448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344a:	f7fd ffcf 	bl	80013ec <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003452:	f7fd ffcb 	bl	80013ec <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e1a1      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003464:	4b2d      	ldr	r3, [pc, #180]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003470:	4b2a      	ldr	r3, [pc, #168]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4927      	ldr	r1, [pc, #156]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 8003480:	4313      	orrs	r3, r2
 8003482:	600b      	str	r3, [r1, #0]
 8003484:	e015      	b.n	80034b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003486:	4b26      	ldr	r3, [pc, #152]	@ (8003520 <HAL_RCC_OscConfig+0x270>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fd ffae 	bl	80013ec <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003494:	f7fd ffaa 	bl	80013ec <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e180      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a6:	4b1d      	ldr	r3, [pc, #116]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d03a      	beq.n	8003534 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d019      	beq.n	80034fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c6:	4b17      	ldr	r3, [pc, #92]	@ (8003524 <HAL_RCC_OscConfig+0x274>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034cc:	f7fd ff8e 	bl	80013ec <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d4:	f7fd ff8a 	bl	80013ec <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e160      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e6:	4b0d      	ldr	r3, [pc, #52]	@ (800351c <HAL_RCC_OscConfig+0x26c>)
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034f2:	2001      	movs	r0, #1
 80034f4:	f000 face 	bl	8003a94 <RCC_Delay>
 80034f8:	e01c      	b.n	8003534 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003524 <HAL_RCC_OscConfig+0x274>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003500:	f7fd ff74 	bl	80013ec <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003506:	e00f      	b.n	8003528 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003508:	f7fd ff70 	bl	80013ec <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d908      	bls.n	8003528 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e146      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	42420000 	.word	0x42420000
 8003524:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003528:	4b92      	ldr	r3, [pc, #584]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e9      	bne.n	8003508 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80a6 	beq.w	800368e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003542:	2300      	movs	r3, #0
 8003544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003546:	4b8b      	ldr	r3, [pc, #556]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10d      	bne.n	800356e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003552:	4b88      	ldr	r3, [pc, #544]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	4a87      	ldr	r2, [pc, #540]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800355c:	61d3      	str	r3, [r2, #28]
 800355e:	4b85      	ldr	r3, [pc, #532]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800356a:	2301      	movs	r3, #1
 800356c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356e:	4b82      	ldr	r3, [pc, #520]	@ (8003778 <HAL_RCC_OscConfig+0x4c8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d118      	bne.n	80035ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800357a:	4b7f      	ldr	r3, [pc, #508]	@ (8003778 <HAL_RCC_OscConfig+0x4c8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a7e      	ldr	r2, [pc, #504]	@ (8003778 <HAL_RCC_OscConfig+0x4c8>)
 8003580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003586:	f7fd ff31 	bl	80013ec <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358e:	f7fd ff2d 	bl	80013ec <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b64      	cmp	r3, #100	@ 0x64
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e103      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a0:	4b75      	ldr	r3, [pc, #468]	@ (8003778 <HAL_RCC_OscConfig+0x4c8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d106      	bne.n	80035c2 <HAL_RCC_OscConfig+0x312>
 80035b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4a6e      	ldr	r2, [pc, #440]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	6213      	str	r3, [r2, #32]
 80035c0:	e02d      	b.n	800361e <HAL_RCC_OscConfig+0x36e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x334>
 80035ca:	4b6a      	ldr	r3, [pc, #424]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	4a69      	ldr	r2, [pc, #420]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	f023 0301 	bic.w	r3, r3, #1
 80035d4:	6213      	str	r3, [r2, #32]
 80035d6:	4b67      	ldr	r3, [pc, #412]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	4a66      	ldr	r2, [pc, #408]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	f023 0304 	bic.w	r3, r3, #4
 80035e0:	6213      	str	r3, [r2, #32]
 80035e2:	e01c      	b.n	800361e <HAL_RCC_OscConfig+0x36e>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b05      	cmp	r3, #5
 80035ea:	d10c      	bne.n	8003606 <HAL_RCC_OscConfig+0x356>
 80035ec:	4b61      	ldr	r3, [pc, #388]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	4a60      	ldr	r2, [pc, #384]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035f2:	f043 0304 	orr.w	r3, r3, #4
 80035f6:	6213      	str	r3, [r2, #32]
 80035f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	4a5d      	ldr	r2, [pc, #372]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	6213      	str	r3, [r2, #32]
 8003604:	e00b      	b.n	800361e <HAL_RCC_OscConfig+0x36e>
 8003606:	4b5b      	ldr	r3, [pc, #364]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	4a5a      	ldr	r2, [pc, #360]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	f023 0301 	bic.w	r3, r3, #1
 8003610:	6213      	str	r3, [r2, #32]
 8003612:	4b58      	ldr	r3, [pc, #352]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	4a57      	ldr	r2, [pc, #348]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	f023 0304 	bic.w	r3, r3, #4
 800361c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d015      	beq.n	8003652 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003626:	f7fd fee1 	bl	80013ec <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362c:	e00a      	b.n	8003644 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362e:	f7fd fedd 	bl	80013ec <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e0b1      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003644:	4b4b      	ldr	r3, [pc, #300]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0ee      	beq.n	800362e <HAL_RCC_OscConfig+0x37e>
 8003650:	e014      	b.n	800367c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003652:	f7fd fecb 	bl	80013ec <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003658:	e00a      	b.n	8003670 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365a:	f7fd fec7 	bl	80013ec <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e09b      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003670:	4b40      	ldr	r3, [pc, #256]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1ee      	bne.n	800365a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800367c:	7dfb      	ldrb	r3, [r7, #23]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d105      	bne.n	800368e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003682:	4b3c      	ldr	r3, [pc, #240]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4a3b      	ldr	r2, [pc, #236]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003688:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800368c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8087 	beq.w	80037a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003698:	4b36      	ldr	r3, [pc, #216]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 030c 	and.w	r3, r3, #12
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d061      	beq.n	8003768 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d146      	bne.n	800373a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ac:	4b33      	ldr	r3, [pc, #204]	@ (800377c <HAL_RCC_OscConfig+0x4cc>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b2:	f7fd fe9b 	bl	80013ec <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ba:	f7fd fe97 	bl	80013ec <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e06d      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036cc:	4b29      	ldr	r3, [pc, #164]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1f0      	bne.n	80036ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036e0:	d108      	bne.n	80036f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036e2:	4b24      	ldr	r3, [pc, #144]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	4921      	ldr	r1, [pc, #132]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a19      	ldr	r1, [r3, #32]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003704:	430b      	orrs	r3, r1
 8003706:	491b      	ldr	r1, [pc, #108]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800370c:	4b1b      	ldr	r3, [pc, #108]	@ (800377c <HAL_RCC_OscConfig+0x4cc>)
 800370e:	2201      	movs	r2, #1
 8003710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003712:	f7fd fe6b 	bl	80013ec <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371a:	f7fd fe67 	bl	80013ec <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e03d      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800372c:	4b11      	ldr	r3, [pc, #68]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x46a>
 8003738:	e035      	b.n	80037a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373a:	4b10      	ldr	r3, [pc, #64]	@ (800377c <HAL_RCC_OscConfig+0x4cc>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003740:	f7fd fe54 	bl	80013ec <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003748:	f7fd fe50 	bl	80013ec <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e026      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375a:	4b06      	ldr	r3, [pc, #24]	@ (8003774 <HAL_RCC_OscConfig+0x4c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x498>
 8003766:	e01e      	b.n	80037a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d107      	bne.n	8003780 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e019      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
 8003774:	40021000 	.word	0x40021000
 8003778:	40007000 	.word	0x40007000
 800377c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003780:	4b0b      	ldr	r3, [pc, #44]	@ (80037b0 <HAL_RCC_OscConfig+0x500>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	429a      	cmp	r2, r3
 8003792:	d106      	bne.n	80037a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379e:	429a      	cmp	r2, r3
 80037a0:	d001      	beq.n	80037a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000

080037b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0d0      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d910      	bls.n	80037f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b67      	ldr	r3, [pc, #412]	@ (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 0207 	bic.w	r2, r3, #7
 80037de:	4965      	ldr	r1, [pc, #404]	@ (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b63      	ldr	r3, [pc, #396]	@ (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0b8      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d020      	beq.n	8003846 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003810:	4b59      	ldr	r3, [pc, #356]	@ (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4a58      	ldr	r2, [pc, #352]	@ (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800381a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003828:	4b53      	ldr	r3, [pc, #332]	@ (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4a52      	ldr	r2, [pc, #328]	@ (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003832:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003834:	4b50      	ldr	r3, [pc, #320]	@ (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	494d      	ldr	r1, [pc, #308]	@ (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003842:	4313      	orrs	r3, r2
 8003844:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d040      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d107      	bne.n	800386a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	4b47      	ldr	r3, [pc, #284]	@ (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d115      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e07f      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003872:	4b41      	ldr	r3, [pc, #260]	@ (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e073      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003882:	4b3d      	ldr	r3, [pc, #244]	@ (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e06b      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003892:	4b39      	ldr	r3, [pc, #228]	@ (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f023 0203 	bic.w	r2, r3, #3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4936      	ldr	r1, [pc, #216]	@ (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038a4:	f7fd fda2 	bl	80013ec <HAL_GetTick>
 80038a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	e00a      	b.n	80038c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ac:	f7fd fd9e 	bl	80013ec <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e053      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 020c 	and.w	r2, r3, #12
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d1eb      	bne.n	80038ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038d4:	4b27      	ldr	r3, [pc, #156]	@ (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d210      	bcs.n	8003904 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b24      	ldr	r3, [pc, #144]	@ (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 0207 	bic.w	r2, r3, #7
 80038ea:	4922      	ldr	r1, [pc, #136]	@ (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b20      	ldr	r3, [pc, #128]	@ (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e032      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003910:	4b19      	ldr	r3, [pc, #100]	@ (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4916      	ldr	r1, [pc, #88]	@ (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	4313      	orrs	r3, r2
 8003920:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800392e:	4b12      	ldr	r3, [pc, #72]	@ (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	490e      	ldr	r1, [pc, #56]	@ (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003942:	f000 f821 	bl	8003988 <HAL_RCC_GetSysClockFreq>
 8003946:	4602      	mov	r2, r0
 8003948:	4b0b      	ldr	r3, [pc, #44]	@ (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	490a      	ldr	r1, [pc, #40]	@ (800397c <HAL_RCC_ClockConfig+0x1c8>)
 8003954:	5ccb      	ldrb	r3, [r1, r3]
 8003956:	fa22 f303 	lsr.w	r3, r2, r3
 800395a:	4a09      	ldr	r2, [pc, #36]	@ (8003980 <HAL_RCC_ClockConfig+0x1cc>)
 800395c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800395e:	4b09      	ldr	r3, [pc, #36]	@ (8003984 <HAL_RCC_ClockConfig+0x1d0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7fd fd00 	bl	8001368 <HAL_InitTick>

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40022000 	.word	0x40022000
 8003978:	40021000 	.word	0x40021000
 800397c:	080054fc 	.word	0x080054fc
 8003980:	20000000 	.word	0x20000000
 8003984:	20000004 	.word	0x20000004

08003988 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	2300      	movs	r3, #0
 800399c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039a2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x94>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d002      	beq.n	80039b8 <HAL_RCC_GetSysClockFreq+0x30>
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d003      	beq.n	80039be <HAL_RCC_GetSysClockFreq+0x36>
 80039b6:	e027      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039b8:	4b19      	ldr	r3, [pc, #100]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0x98>)
 80039ba:	613b      	str	r3, [r7, #16]
      break;
 80039bc:	e027      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	0c9b      	lsrs	r3, r3, #18
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	4a17      	ldr	r2, [pc, #92]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039c8:	5cd3      	ldrb	r3, [r2, r3]
 80039ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d010      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039d6:	4b11      	ldr	r3, [pc, #68]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x94>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	0c5b      	lsrs	r3, r3, #17
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	4a11      	ldr	r2, [pc, #68]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039e2:	5cd3      	ldrb	r3, [r2, r3]
 80039e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0x98>)
 80039ea:	fb03 f202 	mul.w	r2, r3, r2
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	e004      	b.n	8003a02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a0c      	ldr	r2, [pc, #48]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0xa4>)
 80039fc:	fb02 f303 	mul.w	r3, r2, r3
 8003a00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	613b      	str	r3, [r7, #16]
      break;
 8003a06:	e002      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a08:	4b05      	ldr	r3, [pc, #20]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a0a:	613b      	str	r3, [r7, #16]
      break;
 8003a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a0e:	693b      	ldr	r3, [r7, #16]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	371c      	adds	r7, #28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	007a1200 	.word	0x007a1200
 8003a24:	08005514 	.word	0x08005514
 8003a28:	08005524 	.word	0x08005524
 8003a2c:	003d0900 	.word	0x003d0900

08003a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a34:	4b02      	ldr	r3, [pc, #8]	@ (8003a40 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a36:	681b      	ldr	r3, [r3, #0]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr
 8003a40:	20000000 	.word	0x20000000

08003a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a48:	f7ff fff2 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4903      	ldr	r1, [pc, #12]	@ (8003a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40021000 	.word	0x40021000
 8003a68:	0800550c 	.word	0x0800550c

08003a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a70:	f7ff ffde 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	0adb      	lsrs	r3, r3, #11
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	4903      	ldr	r1, [pc, #12]	@ (8003a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	0800550c 	.word	0x0800550c

08003a94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac8 <RCC_Delay+0x34>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8003acc <RCC_Delay+0x38>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	0a5b      	lsrs	r3, r3, #9
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	fb02 f303 	mul.w	r3, r2, r3
 8003aae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ab0:	bf00      	nop
  }
  while (Delay --);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1e5a      	subs	r2, r3, #1
 8003ab6:	60fa      	str	r2, [r7, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1f9      	bne.n	8003ab0 <RCC_Delay+0x1c>
}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr
 8003ac8:	20000000 	.word	0x20000000
 8003acc:	10624dd3 	.word	0x10624dd3

08003ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d07d      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003aec:	2300      	movs	r3, #0
 8003aee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af0:	4b4f      	ldr	r3, [pc, #316]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10d      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afc:	4b4c      	ldr	r3, [pc, #304]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	4a4b      	ldr	r2, [pc, #300]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b06:	61d3      	str	r3, [r2, #28]
 8003b08:	4b49      	ldr	r3, [pc, #292]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b14:	2301      	movs	r3, #1
 8003b16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b18:	4b46      	ldr	r3, [pc, #280]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d118      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b24:	4b43      	ldr	r3, [pc, #268]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a42      	ldr	r2, [pc, #264]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b30:	f7fd fc5c 	bl	80013ec <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b36:	e008      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b38:	f7fd fc58 	bl	80013ec <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b64      	cmp	r3, #100	@ 0x64
 8003b44:	d901      	bls.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e06d      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b56:	4b36      	ldr	r3, [pc, #216]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d02e      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d027      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b74:	4b2e      	ldr	r3, [pc, #184]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b84:	4b2c      	ldr	r3, [pc, #176]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b8a:	4a29      	ldr	r2, [pc, #164]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d014      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9a:	f7fd fc27 	bl	80013ec <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba0:	e00a      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba2:	f7fd fc23 	bl	80013ec <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e036      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0ee      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	4917      	ldr	r1, [pc, #92]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d105      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bdc:	4b14      	ldr	r3, [pc, #80]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	4a13      	ldr	r2, [pc, #76]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003be6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d008      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	490b      	ldr	r1, [pc, #44]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c12:	4b07      	ldr	r3, [pc, #28]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	4904      	ldr	r1, [pc, #16]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40021000 	.word	0x40021000
 8003c34:	40007000 	.word	0x40007000
 8003c38:	42420440 	.word	0x42420440

08003c3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	2300      	movs	r3, #0
 8003c56:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b10      	cmp	r3, #16
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b10      	cmp	r3, #16
 8003c62:	f200 808a 	bhi.w	8003d7a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d045      	beq.n	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d075      	beq.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003c72:	e082      	b.n	8003d7a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003c74:	4b46      	ldr	r3, [pc, #280]	@ (8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c7a:	4b45      	ldr	r3, [pc, #276]	@ (8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d07b      	beq.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	0c9b      	lsrs	r3, r3, #18
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	4a41      	ldr	r2, [pc, #260]	@ (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003c90:	5cd3      	ldrb	r3, [r2, r3]
 8003c92:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d015      	beq.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	0c5b      	lsrs	r3, r3, #17
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	4a3b      	ldr	r2, [pc, #236]	@ (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003caa:	5cd3      	ldrb	r3, [r2, r3]
 8003cac:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00d      	beq.n	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003cb8:	4a38      	ldr	r2, [pc, #224]	@ (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	61fb      	str	r3, [r7, #28]
 8003cc8:	e004      	b.n	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4a34      	ldr	r2, [pc, #208]	@ (8003da0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003cce:	fb02 f303 	mul.w	r3, r2, r3
 8003cd2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ce0:	d102      	bne.n	8003ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	61bb      	str	r3, [r7, #24]
      break;
 8003ce6:	e04a      	b.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	4a2d      	ldr	r2, [pc, #180]	@ (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	61bb      	str	r3, [r7, #24]
      break;
 8003cf6:	e042      	b.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003cf8:	4b25      	ldr	r3, [pc, #148]	@ (8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d08:	d108      	bne.n	8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003d14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	e01f      	b.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d26:	d109      	bne.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003d28:	4b19      	ldr	r3, [pc, #100]	@ (8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003d34:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	e00f      	b.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d46:	d11c      	bne.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d48:	4b11      	ldr	r3, [pc, #68]	@ (8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d016      	beq.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003d54:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003d58:	61bb      	str	r3, [r7, #24]
      break;
 8003d5a:	e012      	b.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d5c:	e011      	b.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d5e:	f7ff fe85 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 8003d62:	4602      	mov	r2, r0
 8003d64:	4b0a      	ldr	r3, [pc, #40]	@ (8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	0b9b      	lsrs	r3, r3, #14
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	3301      	adds	r3, #1
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d76:	61bb      	str	r3, [r7, #24]
      break;
 8003d78:	e004      	b.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003d7a:	bf00      	nop
 8003d7c:	e002      	b.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003d7e:	bf00      	nop
 8003d80:	e000      	b.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003d82:	bf00      	nop
    }
  }
  return (frequency);
 8003d84:	69bb      	ldr	r3, [r7, #24]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3720      	adds	r7, #32
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
 8003d94:	08005528 	.word	0x08005528
 8003d98:	08005538 	.word	0x08005538
 8003d9c:	007a1200 	.word	0x007a1200
 8003da0:	003d0900 	.word	0x003d0900
 8003da4:	aaaaaaab 	.word	0xaaaaaaab

08003da8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e041      	b.n	8003e3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fc fe22 	bl	8000a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3304      	adds	r3, #4
 8003de4:	4619      	mov	r1, r3
 8003de6:	4610      	mov	r0, r2
 8003de8:	f000 fdfa 	bl	80049e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d001      	beq.n	8003e60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e03a      	b.n	8003ed6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a18      	ldr	r2, [pc, #96]	@ (8003ee0 <HAL_TIM_Base_Start_IT+0x98>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d00e      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x58>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e8a:	d009      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x58>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a14      	ldr	r2, [pc, #80]	@ (8003ee4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d004      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x58>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a13      	ldr	r2, [pc, #76]	@ (8003ee8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d111      	bne.n	8003ec4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b06      	cmp	r3, #6
 8003eb0:	d010      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0201 	orr.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec2:	e007      	b.n	8003ed4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr
 8003ee0:	40012c00 	.word	0x40012c00
 8003ee4:	40000400 	.word	0x40000400
 8003ee8:	40000800 	.word	0x40000800

08003eec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e041      	b.n	8003f82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f839 	bl	8003f8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	f000 fd58 	bl	80049e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr

08003f9c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d109      	bne.n	8003fc8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	bf0c      	ite	eq
 8003fc0:	2301      	moveq	r3, #1
 8003fc2:	2300      	movne	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	e022      	b.n	800400e <HAL_TIM_PWM_Start_DMA+0x72>
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d109      	bne.n	8003fe2 <HAL_TIM_PWM_Start_DMA+0x46>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	bf0c      	ite	eq
 8003fda:	2301      	moveq	r3, #1
 8003fdc:	2300      	movne	r3, #0
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	e015      	b.n	800400e <HAL_TIM_PWM_Start_DMA+0x72>
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d109      	bne.n	8003ffc <HAL_TIM_PWM_Start_DMA+0x60>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	bf0c      	ite	eq
 8003ff4:	2301      	moveq	r3, #1
 8003ff6:	2300      	movne	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	e008      	b.n	800400e <HAL_TIM_PWM_Start_DMA+0x72>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	bf0c      	ite	eq
 8004008:	2301      	moveq	r3, #1
 800400a:	2300      	movne	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004012:	2302      	movs	r3, #2
 8004014:	e153      	b.n	80042be <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d109      	bne.n	8004030 <HAL_TIM_PWM_Start_DMA+0x94>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b01      	cmp	r3, #1
 8004026:	bf0c      	ite	eq
 8004028:	2301      	moveq	r3, #1
 800402a:	2300      	movne	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	e022      	b.n	8004076 <HAL_TIM_PWM_Start_DMA+0xda>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b04      	cmp	r3, #4
 8004034:	d109      	bne.n	800404a <HAL_TIM_PWM_Start_DMA+0xae>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b01      	cmp	r3, #1
 8004040:	bf0c      	ite	eq
 8004042:	2301      	moveq	r3, #1
 8004044:	2300      	movne	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	e015      	b.n	8004076 <HAL_TIM_PWM_Start_DMA+0xda>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d109      	bne.n	8004064 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b01      	cmp	r3, #1
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	e008      	b.n	8004076 <HAL_TIM_PWM_Start_DMA+0xda>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d024      	beq.n	80040c4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_TIM_PWM_Start_DMA+0xea>
 8004080:	887b      	ldrh	r3, [r7, #2]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e119      	b.n	80042be <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d104      	bne.n	800409a <HAL_TIM_PWM_Start_DMA+0xfe>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004098:	e016      	b.n	80040c8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b04      	cmp	r3, #4
 800409e:	d104      	bne.n	80040aa <HAL_TIM_PWM_Start_DMA+0x10e>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040a8:	e00e      	b.n	80040c8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d104      	bne.n	80040ba <HAL_TIM_PWM_Start_DMA+0x11e>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040b8:	e006      	b.n	80040c8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2202      	movs	r2, #2
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040c2:	e001      	b.n	80040c8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0fa      	b.n	80042be <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b0c      	cmp	r3, #12
 80040cc:	f200 80ae 	bhi.w	800422c <HAL_TIM_PWM_Start_DMA+0x290>
 80040d0:	a201      	add	r2, pc, #4	@ (adr r2, 80040d8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80040d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d6:	bf00      	nop
 80040d8:	0800410d 	.word	0x0800410d
 80040dc:	0800422d 	.word	0x0800422d
 80040e0:	0800422d 	.word	0x0800422d
 80040e4:	0800422d 	.word	0x0800422d
 80040e8:	08004155 	.word	0x08004155
 80040ec:	0800422d 	.word	0x0800422d
 80040f0:	0800422d 	.word	0x0800422d
 80040f4:	0800422d 	.word	0x0800422d
 80040f8:	0800419d 	.word	0x0800419d
 80040fc:	0800422d 	.word	0x0800422d
 8004100:	0800422d 	.word	0x0800422d
 8004104:	0800422d 	.word	0x0800422d
 8004108:	080041e5 	.word	0x080041e5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	4a6d      	ldr	r2, [pc, #436]	@ (80042c8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004112:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	4a6c      	ldr	r2, [pc, #432]	@ (80042cc <HAL_TIM_PWM_Start_DMA+0x330>)
 800411a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	4a6b      	ldr	r2, [pc, #428]	@ (80042d0 <HAL_TIM_PWM_Start_DMA+0x334>)
 8004122:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3334      	adds	r3, #52	@ 0x34
 8004130:	461a      	mov	r2, r3
 8004132:	887b      	ldrh	r3, [r7, #2]
 8004134:	f7fe fd5c 	bl	8002bf0 <HAL_DMA_Start_IT>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e0bd      	b.n	80042be <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004150:	60da      	str	r2, [r3, #12]
      break;
 8004152:	e06e      	b.n	8004232 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004158:	4a5b      	ldr	r2, [pc, #364]	@ (80042c8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800415a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004160:	4a5a      	ldr	r2, [pc, #360]	@ (80042cc <HAL_TIM_PWM_Start_DMA+0x330>)
 8004162:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004168:	4a59      	ldr	r2, [pc, #356]	@ (80042d0 <HAL_TIM_PWM_Start_DMA+0x334>)
 800416a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3338      	adds	r3, #56	@ 0x38
 8004178:	461a      	mov	r2, r3
 800417a:	887b      	ldrh	r3, [r7, #2]
 800417c:	f7fe fd38 	bl	8002bf0 <HAL_DMA_Start_IT>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e099      	b.n	80042be <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004198:	60da      	str	r2, [r3, #12]
      break;
 800419a:	e04a      	b.n	8004232 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a0:	4a49      	ldr	r2, [pc, #292]	@ (80042c8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80041a2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a8:	4a48      	ldr	r2, [pc, #288]	@ (80042cc <HAL_TIM_PWM_Start_DMA+0x330>)
 80041aa:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b0:	4a47      	ldr	r2, [pc, #284]	@ (80042d0 <HAL_TIM_PWM_Start_DMA+0x334>)
 80041b2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	333c      	adds	r3, #60	@ 0x3c
 80041c0:	461a      	mov	r2, r3
 80041c2:	887b      	ldrh	r3, [r7, #2]
 80041c4:	f7fe fd14 	bl	8002bf0 <HAL_DMA_Start_IT>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e075      	b.n	80042be <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041e0:	60da      	str	r2, [r3, #12]
      break;
 80041e2:	e026      	b.n	8004232 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e8:	4a37      	ldr	r2, [pc, #220]	@ (80042c8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80041ea:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f0:	4a36      	ldr	r2, [pc, #216]	@ (80042cc <HAL_TIM_PWM_Start_DMA+0x330>)
 80041f2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f8:	4a35      	ldr	r2, [pc, #212]	@ (80042d0 <HAL_TIM_PWM_Start_DMA+0x334>)
 80041fa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3340      	adds	r3, #64	@ 0x40
 8004208:	461a      	mov	r2, r3
 800420a:	887b      	ldrh	r3, [r7, #2]
 800420c:	f7fe fcf0 	bl	8002bf0 <HAL_DMA_Start_IT>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e051      	b.n	80042be <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004228:	60da      	str	r2, [r3, #12]
      break;
 800422a:	e002      	b.n	8004232 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	75fb      	strb	r3, [r7, #23]
      break;
 8004230:	bf00      	nop
  }

  if (status == HAL_OK)
 8004232:	7dfb      	ldrb	r3, [r7, #23]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d141      	bne.n	80042bc <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2201      	movs	r2, #1
 800423e:	68b9      	ldr	r1, [r7, #8]
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fe59 	bl	8004ef8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a22      	ldr	r2, [pc, #136]	@ (80042d4 <HAL_TIM_PWM_Start_DMA+0x338>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d107      	bne.n	8004260 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800425e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a1b      	ldr	r2, [pc, #108]	@ (80042d4 <HAL_TIM_PWM_Start_DMA+0x338>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00e      	beq.n	8004288 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004272:	d009      	beq.n	8004288 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a17      	ldr	r2, [pc, #92]	@ (80042d8 <HAL_TIM_PWM_Start_DMA+0x33c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d004      	beq.n	8004288 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a16      	ldr	r2, [pc, #88]	@ (80042dc <HAL_TIM_PWM_Start_DMA+0x340>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d111      	bne.n	80042ac <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	2b06      	cmp	r3, #6
 8004298:	d010      	beq.n	80042bc <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0201 	orr.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042aa:	e007      	b.n	80042bc <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	080048d1 	.word	0x080048d1
 80042cc:	08004979 	.word	0x08004979
 80042d0:	0800483f 	.word	0x0800483f
 80042d4:	40012c00 	.word	0x40012c00
 80042d8:	40000400 	.word	0x40000400
 80042dc:	40000800 	.word	0x40000800

080042e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d020      	beq.n	8004344 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01b      	beq.n	8004344 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0202 	mvn.w	r2, #2
 8004314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fa5a 	bl	80047e4 <HAL_TIM_IC_CaptureCallback>
 8004330:	e005      	b.n	800433e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fa4d 	bl	80047d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fa5c 	bl	80047f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b00      	cmp	r3, #0
 800434c:	d020      	beq.n	8004390 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01b      	beq.n	8004390 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0204 	mvn.w	r2, #4
 8004360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2202      	movs	r2, #2
 8004366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fa34 	bl	80047e4 <HAL_TIM_IC_CaptureCallback>
 800437c:	e005      	b.n	800438a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fa27 	bl	80047d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fa36 	bl	80047f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d020      	beq.n	80043dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01b      	beq.n	80043dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0208 	mvn.w	r2, #8
 80043ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2204      	movs	r2, #4
 80043b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fa0e 	bl	80047e4 <HAL_TIM_IC_CaptureCallback>
 80043c8:	e005      	b.n	80043d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fa01 	bl	80047d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fa10 	bl	80047f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d020      	beq.n	8004428 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01b      	beq.n	8004428 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0210 	mvn.w	r2, #16
 80043f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2208      	movs	r2, #8
 80043fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f9e8 	bl	80047e4 <HAL_TIM_IC_CaptureCallback>
 8004414:	e005      	b.n	8004422 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f9db 	bl	80047d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f9ea 	bl	80047f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00c      	beq.n	800444c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0201 	mvn.w	r2, #1
 8004444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fc feb2 	bl	80011b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00c      	beq.n	8004470 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800445c:	2b00      	cmp	r3, #0
 800445e:	d007      	beq.n	8004470 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fdcf 	bl	800500e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00c      	beq.n	8004494 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004480:	2b00      	cmp	r3, #0
 8004482:	d007      	beq.n	8004494 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800448c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f9c3 	bl	800481a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00c      	beq.n	80044b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d007      	beq.n	80044b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f06f 0220 	mvn.w	r2, #32
 80044b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fda2 	bl	8004ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044b8:	bf00      	nop
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044da:	2302      	movs	r3, #2
 80044dc:	e0ae      	b.n	800463c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b0c      	cmp	r3, #12
 80044ea:	f200 809f 	bhi.w	800462c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044ee:	a201      	add	r2, pc, #4	@ (adr r2, 80044f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	08004529 	.word	0x08004529
 80044f8:	0800462d 	.word	0x0800462d
 80044fc:	0800462d 	.word	0x0800462d
 8004500:	0800462d 	.word	0x0800462d
 8004504:	08004569 	.word	0x08004569
 8004508:	0800462d 	.word	0x0800462d
 800450c:	0800462d 	.word	0x0800462d
 8004510:	0800462d 	.word	0x0800462d
 8004514:	080045ab 	.word	0x080045ab
 8004518:	0800462d 	.word	0x0800462d
 800451c:	0800462d 	.word	0x0800462d
 8004520:	0800462d 	.word	0x0800462d
 8004524:	080045eb 	.word	0x080045eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fac4 	bl	8004abc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0208 	orr.w	r2, r2, #8
 8004542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0204 	bic.w	r2, r2, #4
 8004552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6999      	ldr	r1, [r3, #24]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	619a      	str	r2, [r3, #24]
      break;
 8004566:	e064      	b.n	8004632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68b9      	ldr	r1, [r7, #8]
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fb0a 	bl	8004b88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6999      	ldr	r1, [r3, #24]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	021a      	lsls	r2, r3, #8
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	619a      	str	r2, [r3, #24]
      break;
 80045a8:	e043      	b.n	8004632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fb53 	bl	8004c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69da      	ldr	r2, [r3, #28]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0208 	orr.w	r2, r2, #8
 80045c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69da      	ldr	r2, [r3, #28]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0204 	bic.w	r2, r2, #4
 80045d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69d9      	ldr	r1, [r3, #28]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	61da      	str	r2, [r3, #28]
      break;
 80045e8:	e023      	b.n	8004632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fb9d 	bl	8004d30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69da      	ldr	r2, [r3, #28]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69da      	ldr	r2, [r3, #28]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69d9      	ldr	r1, [r3, #28]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	021a      	lsls	r2, r3, #8
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	61da      	str	r2, [r3, #28]
      break;
 800462a:	e002      	b.n	8004632 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	75fb      	strb	r3, [r7, #23]
      break;
 8004630:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800463a:	7dfb      	ldrb	r3, [r7, #23]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_TIM_ConfigClockSource+0x1c>
 800465c:	2302      	movs	r3, #2
 800465e:	e0b4      	b.n	80047ca <HAL_TIM_ConfigClockSource+0x186>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800467e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004698:	d03e      	beq.n	8004718 <HAL_TIM_ConfigClockSource+0xd4>
 800469a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800469e:	f200 8087 	bhi.w	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046a6:	f000 8086 	beq.w	80047b6 <HAL_TIM_ConfigClockSource+0x172>
 80046aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ae:	d87f      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046b0:	2b70      	cmp	r3, #112	@ 0x70
 80046b2:	d01a      	beq.n	80046ea <HAL_TIM_ConfigClockSource+0xa6>
 80046b4:	2b70      	cmp	r3, #112	@ 0x70
 80046b6:	d87b      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046b8:	2b60      	cmp	r3, #96	@ 0x60
 80046ba:	d050      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x11a>
 80046bc:	2b60      	cmp	r3, #96	@ 0x60
 80046be:	d877      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046c0:	2b50      	cmp	r3, #80	@ 0x50
 80046c2:	d03c      	beq.n	800473e <HAL_TIM_ConfigClockSource+0xfa>
 80046c4:	2b50      	cmp	r3, #80	@ 0x50
 80046c6:	d873      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046c8:	2b40      	cmp	r3, #64	@ 0x40
 80046ca:	d058      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x13a>
 80046cc:	2b40      	cmp	r3, #64	@ 0x40
 80046ce:	d86f      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046d0:	2b30      	cmp	r3, #48	@ 0x30
 80046d2:	d064      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15a>
 80046d4:	2b30      	cmp	r3, #48	@ 0x30
 80046d6:	d86b      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046d8:	2b20      	cmp	r3, #32
 80046da:	d060      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15a>
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d867      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d05c      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15a>
 80046e4:	2b10      	cmp	r3, #16
 80046e6:	d05a      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15a>
 80046e8:	e062      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046fa:	f000 fbde 	bl	8004eba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800470c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	609a      	str	r2, [r3, #8]
      break;
 8004716:	e04f      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004728:	f000 fbc7 	bl	8004eba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800473a:	609a      	str	r2, [r3, #8]
      break;
 800473c:	e03c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800474a:	461a      	mov	r2, r3
 800474c:	f000 fb3e 	bl	8004dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2150      	movs	r1, #80	@ 0x50
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fb95 	bl	8004e86 <TIM_ITRx_SetConfig>
      break;
 800475c:	e02c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800476a:	461a      	mov	r2, r3
 800476c:	f000 fb5c 	bl	8004e28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2160      	movs	r1, #96	@ 0x60
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fb85 	bl	8004e86 <TIM_ITRx_SetConfig>
      break;
 800477c:	e01c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800478a:	461a      	mov	r2, r3
 800478c:	f000 fb1e 	bl	8004dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2140      	movs	r1, #64	@ 0x40
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fb75 	bl	8004e86 <TIM_ITRx_SetConfig>
      break;
 800479c:	e00c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4619      	mov	r1, r3
 80047a8:	4610      	mov	r0, r2
 80047aa:	f000 fb6c 	bl	8004e86 <TIM_ITRx_SetConfig>
      break;
 80047ae:	e003      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	73fb      	strb	r3, [r7, #15]
      break;
 80047b4:	e000      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr

080047e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr

080047f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr

08004808 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr

0800481a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr

0800482c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	bc80      	pop	{r7}
 800483c:	4770      	bx	lr

0800483e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	429a      	cmp	r2, r3
 8004854:	d107      	bne.n	8004866 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004864:	e02a      	b.n	80048bc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	429a      	cmp	r2, r3
 800486e:	d107      	bne.n	8004880 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2202      	movs	r2, #2
 8004874:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800487e:	e01d      	b.n	80048bc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	429a      	cmp	r2, r3
 8004888:	d107      	bne.n	800489a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2204      	movs	r2, #4
 800488e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004898:	e010      	b.n	80048bc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d107      	bne.n	80048b4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2208      	movs	r2, #8
 80048a8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048b2:	e003      	b.n	80048bc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7ff ffb5 	bl	800482c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	771a      	strb	r2, [r3, #28]
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048dc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d10b      	bne.n	8004900 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2201      	movs	r2, #1
 80048ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d136      	bne.n	8004964 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048fe:	e031      	b.n	8004964 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	429a      	cmp	r2, r3
 8004908:	d10b      	bne.n	8004922 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2202      	movs	r2, #2
 800490e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d125      	bne.n	8004964 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004920:	e020      	b.n	8004964 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	429a      	cmp	r2, r3
 800492a:	d10b      	bne.n	8004944 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2204      	movs	r2, #4
 8004930:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d114      	bne.n	8004964 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004942:	e00f      	b.n	8004964 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	429a      	cmp	r2, r3
 800494c:	d10a      	bne.n	8004964 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2208      	movs	r2, #8
 8004952:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d103      	bne.n	8004964 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f7ff ff46 	bl	80047f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	771a      	strb	r2, [r3, #28]
}
 8004970:	bf00      	nop
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004984:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	429a      	cmp	r2, r3
 800498e:	d103      	bne.n	8004998 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2201      	movs	r2, #1
 8004994:	771a      	strb	r2, [r3, #28]
 8004996:	e019      	b.n	80049cc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d103      	bne.n	80049aa <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2202      	movs	r2, #2
 80049a6:	771a      	strb	r2, [r3, #28]
 80049a8:	e010      	b.n	80049cc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d103      	bne.n	80049bc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2204      	movs	r2, #4
 80049b8:	771a      	strb	r2, [r3, #28]
 80049ba:	e007      	b.n	80049cc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d102      	bne.n	80049cc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2208      	movs	r2, #8
 80049ca:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f7ff ff1b 	bl	8004808 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
}
 80049d8:	bf00      	nop
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a2f      	ldr	r2, [pc, #188]	@ (8004ab0 <TIM_Base_SetConfig+0xd0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00b      	beq.n	8004a10 <TIM_Base_SetConfig+0x30>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049fe:	d007      	beq.n	8004a10 <TIM_Base_SetConfig+0x30>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a2c      	ldr	r2, [pc, #176]	@ (8004ab4 <TIM_Base_SetConfig+0xd4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d003      	beq.n	8004a10 <TIM_Base_SetConfig+0x30>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab8 <TIM_Base_SetConfig+0xd8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d108      	bne.n	8004a22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a22      	ldr	r2, [pc, #136]	@ (8004ab0 <TIM_Base_SetConfig+0xd0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00b      	beq.n	8004a42 <TIM_Base_SetConfig+0x62>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a30:	d007      	beq.n	8004a42 <TIM_Base_SetConfig+0x62>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a1f      	ldr	r2, [pc, #124]	@ (8004ab4 <TIM_Base_SetConfig+0xd4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d003      	beq.n	8004a42 <TIM_Base_SetConfig+0x62>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab8 <TIM_Base_SetConfig+0xd8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d108      	bne.n	8004a54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a0d      	ldr	r2, [pc, #52]	@ (8004ab0 <TIM_Base_SetConfig+0xd0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d103      	bne.n	8004a88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d005      	beq.n	8004aa6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f023 0201 	bic.w	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	611a      	str	r2, [r3, #16]
  }
}
 8004aa6:	bf00      	nop
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr
 8004ab0:	40012c00 	.word	0x40012c00
 8004ab4:	40000400 	.word	0x40000400
 8004ab8:	40000800 	.word	0x40000800

08004abc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	f023 0201 	bic.w	r2, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0303 	bic.w	r3, r3, #3
 8004af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f023 0302 	bic.w	r3, r3, #2
 8004b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a1c      	ldr	r2, [pc, #112]	@ (8004b84 <TIM_OC1_SetConfig+0xc8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d10c      	bne.n	8004b32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f023 0308 	bic.w	r3, r3, #8
 8004b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f023 0304 	bic.w	r3, r3, #4
 8004b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a13      	ldr	r2, [pc, #76]	@ (8004b84 <TIM_OC1_SetConfig+0xc8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d111      	bne.n	8004b5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	621a      	str	r2, [r3, #32]
}
 8004b78:	bf00      	nop
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40012c00 	.word	0x40012c00

08004b88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	f023 0210 	bic.w	r2, r3, #16
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	021b      	lsls	r3, r3, #8
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f023 0320 	bic.w	r3, r3, #32
 8004bd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	011b      	lsls	r3, r3, #4
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a1d      	ldr	r2, [pc, #116]	@ (8004c58 <TIM_OC2_SetConfig+0xd0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d10d      	bne.n	8004c04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a14      	ldr	r2, [pc, #80]	@ (8004c58 <TIM_OC2_SetConfig+0xd0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d113      	bne.n	8004c34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	621a      	str	r2, [r3, #32]
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr
 8004c58:	40012c00 	.word	0x40012c00

08004c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0303 	bic.w	r3, r3, #3
 8004c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d2c <TIM_OC3_SetConfig+0xd0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d10d      	bne.n	8004cd6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a14      	ldr	r2, [pc, #80]	@ (8004d2c <TIM_OC3_SetConfig+0xd0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d113      	bne.n	8004d06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	621a      	str	r2, [r3, #32]
}
 8004d20:	bf00      	nop
 8004d22:	371c      	adds	r7, #28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bc80      	pop	{r7}
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40012c00 	.word	0x40012c00

08004d30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	021b      	lsls	r3, r3, #8
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	031b      	lsls	r3, r3, #12
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8004dc8 <TIM_OC4_SetConfig+0x98>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d109      	bne.n	8004da4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	019b      	lsls	r3, r3, #6
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	621a      	str	r2, [r3, #32]
}
 8004dbe:	bf00      	nop
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr
 8004dc8:	40012c00 	.word	0x40012c00

08004dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	f023 0201 	bic.w	r2, r3, #1
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f023 030a 	bic.w	r3, r3, #10
 8004e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	621a      	str	r2, [r3, #32]
}
 8004e1e:	bf00      	nop
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr

08004e28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	f023 0210 	bic.w	r2, r3, #16
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	031b      	lsls	r3, r3, #12
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e64:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	621a      	str	r2, [r3, #32]
}
 8004e7c:	bf00      	nop
 8004e7e:	371c      	adds	r7, #28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc80      	pop	{r7}
 8004e84:	4770      	bx	lr

08004e86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b085      	sub	sp, #20
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f043 0307 	orr.w	r3, r3, #7
 8004ea8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	609a      	str	r2, [r3, #8]
}
 8004eb0:	bf00      	nop
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b087      	sub	sp, #28
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	607a      	str	r2, [r7, #4]
 8004ec6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	021a      	lsls	r2, r3, #8
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	431a      	orrs	r2, r3
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	609a      	str	r2, [r3, #8]
}
 8004eee:	bf00      	nop
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bc80      	pop	{r7}
 8004ef6:	4770      	bx	lr

08004ef8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f003 031f 	and.w	r3, r3, #31
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a1a      	ldr	r2, [r3, #32]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	401a      	ands	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a1a      	ldr	r2, [r3, #32]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f30:	431a      	orrs	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	621a      	str	r2, [r3, #32]
}
 8004f36:	bf00      	nop
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e046      	b.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a16      	ldr	r2, [pc, #88]	@ (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00e      	beq.n	8004fba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa4:	d009      	beq.n	8004fba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a12      	ldr	r2, [pc, #72]	@ (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d004      	beq.n	8004fba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a10      	ldr	r2, [pc, #64]	@ (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr
 8004ff0:	40012c00 	.word	0x40012c00
 8004ff4:	40000400 	.word	0x40000400
 8004ff8:	40000800 	.word	0x40000800

08004ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	bc80      	pop	{r7}
 800500c:	4770      	bx	lr

0800500e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr

08005020 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e042      	b.n	80050b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7fb fddc 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2224      	movs	r2, #36	@ 0x24
 8005050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005062:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f971 	bl	800534c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005078:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695a      	ldr	r2, [r3, #20]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005088:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005098:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	@ 0x28
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	603b      	str	r3, [r7, #0]
 80050cc:	4613      	mov	r3, r2
 80050ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d175      	bne.n	80051cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <HAL_UART_Transmit+0x2c>
 80050e6:	88fb      	ldrh	r3, [r7, #6]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e06e      	b.n	80051ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2221      	movs	r2, #33	@ 0x21
 80050fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050fe:	f7fc f975 	bl	80013ec <HAL_GetTick>
 8005102:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	88fa      	ldrh	r2, [r7, #6]
 8005108:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	88fa      	ldrh	r2, [r7, #6]
 800510e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005118:	d108      	bne.n	800512c <HAL_UART_Transmit+0x6c>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	e003      	b.n	8005134 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005130:	2300      	movs	r3, #0
 8005132:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005134:	e02e      	b.n	8005194 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2200      	movs	r2, #0
 800513e:	2180      	movs	r1, #128	@ 0x80
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 f848 	bl	80051d6 <UART_WaitOnFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d005      	beq.n	8005158 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e03a      	b.n	80051ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10b      	bne.n	8005176 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800516c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	3302      	adds	r3, #2
 8005172:	61bb      	str	r3, [r7, #24]
 8005174:	e007      	b.n	8005186 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	781a      	ldrb	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	3301      	adds	r3, #1
 8005184:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1cb      	bne.n	8005136 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2200      	movs	r2, #0
 80051a6:	2140      	movs	r1, #64	@ 0x40
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f814 	bl	80051d6 <UART_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e006      	b.n	80051ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	e000      	b.n	80051ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80051cc:	2302      	movs	r3, #2
  }
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3720      	adds	r7, #32
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b086      	sub	sp, #24
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	4613      	mov	r3, r2
 80051e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e6:	e03b      	b.n	8005260 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ee:	d037      	beq.n	8005260 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f0:	f7fc f8fc 	bl	80013ec <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	6a3a      	ldr	r2, [r7, #32]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d302      	bcc.n	8005206 <UART_WaitOnFlagUntilTimeout+0x30>
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e03a      	b.n	8005280 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d023      	beq.n	8005260 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b80      	cmp	r3, #128	@ 0x80
 800521c:	d020      	beq.n	8005260 <UART_WaitOnFlagUntilTimeout+0x8a>
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b40      	cmp	r3, #64	@ 0x40
 8005222:	d01d      	beq.n	8005260 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	2b08      	cmp	r3, #8
 8005230:	d116      	bne.n	8005260 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 f81d 	bl	8005288 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2208      	movs	r2, #8
 8005252:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e00f      	b.n	8005280 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	4013      	ands	r3, r2
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	429a      	cmp	r2, r3
 800526e:	bf0c      	ite	eq
 8005270:	2301      	moveq	r3, #1
 8005272:	2300      	movne	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	461a      	mov	r2, r3
 8005278:	79fb      	ldrb	r3, [r7, #7]
 800527a:	429a      	cmp	r2, r3
 800527c:	d0b4      	beq.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005288:	b480      	push	{r7}
 800528a:	b095      	sub	sp, #84	@ 0x54
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	330c      	adds	r3, #12
 80052ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80052b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e5      	bne.n	8005290 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3314      	adds	r3, #20
 80052ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	e853 3f00 	ldrex	r3, [r3]
 80052d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f023 0301 	bic.w	r3, r3, #1
 80052da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3314      	adds	r3, #20
 80052e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052ec:	e841 2300 	strex	r3, r2, [r1]
 80052f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1e5      	bne.n	80052c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d119      	bne.n	8005334 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	330c      	adds	r3, #12
 8005306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f023 0310 	bic.w	r3, r3, #16
 8005316:	647b      	str	r3, [r7, #68]	@ 0x44
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	330c      	adds	r3, #12
 800531e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005320:	61ba      	str	r2, [r7, #24]
 8005322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	6979      	ldr	r1, [r7, #20]
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	613b      	str	r3, [r7, #16]
   return(result);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e5      	bne.n	8005300 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005342:	bf00      	nop
 8005344:	3754      	adds	r7, #84	@ 0x54
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr

0800534c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005386:	f023 030c 	bic.w	r3, r3, #12
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6812      	ldr	r2, [r2, #0]
 800538e:	68b9      	ldr	r1, [r7, #8]
 8005390:	430b      	orrs	r3, r1
 8005392:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a2c      	ldr	r2, [pc, #176]	@ (8005460 <UART_SetConfig+0x114>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d103      	bne.n	80053bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80053b4:	f7fe fb5a 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	e002      	b.n	80053c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80053bc:	f7fe fb42 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 80053c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	009a      	lsls	r2, r3, #2
 80053cc:	441a      	add	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d8:	4a22      	ldr	r2, [pc, #136]	@ (8005464 <UART_SetConfig+0x118>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	0119      	lsls	r1, r3, #4
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4613      	mov	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	009a      	lsls	r2, r3, #2
 80053ec:	441a      	add	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80053f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005464 <UART_SetConfig+0x118>)
 80053fa:	fba3 0302 	umull	r0, r3, r3, r2
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	2064      	movs	r0, #100	@ 0x64
 8005402:	fb00 f303 	mul.w	r3, r0, r3
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	3332      	adds	r3, #50	@ 0x32
 800540c:	4a15      	ldr	r2, [pc, #84]	@ (8005464 <UART_SetConfig+0x118>)
 800540e:	fba2 2303 	umull	r2, r3, r2, r3
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005418:	4419      	add	r1, r3
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4613      	mov	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	009a      	lsls	r2, r3, #2
 8005424:	441a      	add	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005430:	4b0c      	ldr	r3, [pc, #48]	@ (8005464 <UART_SetConfig+0x118>)
 8005432:	fba3 0302 	umull	r0, r3, r3, r2
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	2064      	movs	r0, #100	@ 0x64
 800543a:	fb00 f303 	mul.w	r3, r0, r3
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	3332      	adds	r3, #50	@ 0x32
 8005444:	4a07      	ldr	r2, [pc, #28]	@ (8005464 <UART_SetConfig+0x118>)
 8005446:	fba2 2303 	umull	r2, r3, r2, r3
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	f003 020f 	and.w	r2, r3, #15
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	440a      	add	r2, r1
 8005456:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005458:	bf00      	nop
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40013800 	.word	0x40013800
 8005464:	51eb851f 	.word	0x51eb851f

08005468 <memset>:
 8005468:	4603      	mov	r3, r0
 800546a:	4402      	add	r2, r0
 800546c:	4293      	cmp	r3, r2
 800546e:	d100      	bne.n	8005472 <memset+0xa>
 8005470:	4770      	bx	lr
 8005472:	f803 1b01 	strb.w	r1, [r3], #1
 8005476:	e7f9      	b.n	800546c <memset+0x4>

08005478 <__libc_init_array>:
 8005478:	b570      	push	{r4, r5, r6, lr}
 800547a:	2600      	movs	r6, #0
 800547c:	4d0c      	ldr	r5, [pc, #48]	@ (80054b0 <__libc_init_array+0x38>)
 800547e:	4c0d      	ldr	r4, [pc, #52]	@ (80054b4 <__libc_init_array+0x3c>)
 8005480:	1b64      	subs	r4, r4, r5
 8005482:	10a4      	asrs	r4, r4, #2
 8005484:	42a6      	cmp	r6, r4
 8005486:	d109      	bne.n	800549c <__libc_init_array+0x24>
 8005488:	f000 f81a 	bl	80054c0 <_init>
 800548c:	2600      	movs	r6, #0
 800548e:	4d0a      	ldr	r5, [pc, #40]	@ (80054b8 <__libc_init_array+0x40>)
 8005490:	4c0a      	ldr	r4, [pc, #40]	@ (80054bc <__libc_init_array+0x44>)
 8005492:	1b64      	subs	r4, r4, r5
 8005494:	10a4      	asrs	r4, r4, #2
 8005496:	42a6      	cmp	r6, r4
 8005498:	d105      	bne.n	80054a6 <__libc_init_array+0x2e>
 800549a:	bd70      	pop	{r4, r5, r6, pc}
 800549c:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a0:	4798      	blx	r3
 80054a2:	3601      	adds	r6, #1
 80054a4:	e7ee      	b.n	8005484 <__libc_init_array+0xc>
 80054a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054aa:	4798      	blx	r3
 80054ac:	3601      	adds	r6, #1
 80054ae:	e7f2      	b.n	8005496 <__libc_init_array+0x1e>
 80054b0:	0800553c 	.word	0x0800553c
 80054b4:	0800553c 	.word	0x0800553c
 80054b8:	0800553c 	.word	0x0800553c
 80054bc:	08005540 	.word	0x08005540

080054c0 <_init>:
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c2:	bf00      	nop
 80054c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054c6:	bc08      	pop	{r3}
 80054c8:	469e      	mov	lr, r3
 80054ca:	4770      	bx	lr

080054cc <_fini>:
 80054cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ce:	bf00      	nop
 80054d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d2:	bc08      	pop	{r3}
 80054d4:	469e      	mov	lr, r3
 80054d6:	4770      	bx	lr
